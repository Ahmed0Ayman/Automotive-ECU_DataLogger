
DataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e054  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  0800e204  0800e204  0001e204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb58  0800eb58  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb58  0800eb58  0001eb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb60  0800eb60  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb60  0800eb60  0001eb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb64  0800eb64  0001eb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800eb68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008dd8  200000b4  0800ec1c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 0000155c  20008e8c  0800ec1c  00028e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e627  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b04  00000000  00000000  0004e70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd0  00000000  00000000  00054210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  00055ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abda  00000000  00000000  00057988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000251a9  00000000  00000000  00082562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec148  00000000  00000000  000a770b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00193853  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000824c  00000000  00000000  001938a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e1ec 	.word	0x0800e1ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	0800e1ec 	.word	0x0800e1ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96e 	b.w	8000b90 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468c      	mov	ip, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f040 8083 	bne.w	80009e2 <__udivmoddi4+0x116>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d947      	bls.n	8000972 <__udivmoddi4+0xa6>
 80008e2:	fab2 f282 	clz	r2, r2
 80008e6:	b142      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e8:	f1c2 0020 	rsb	r0, r2, #32
 80008ec:	fa24 f000 	lsr.w	r0, r4, r0
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4097      	lsls	r7, r2
 80008f4:	ea40 0c01 	orr.w	ip, r0, r1
 80008f8:	4094      	lsls	r4, r2
 80008fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008fe:	0c23      	lsrs	r3, r4, #16
 8000900:	fbbc f6f8 	udiv	r6, ip, r8
 8000904:	fa1f fe87 	uxth.w	lr, r7
 8000908:	fb08 c116 	mls	r1, r8, r6, ip
 800090c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000910:	fb06 f10e 	mul.w	r1, r6, lr
 8000914:	4299      	cmp	r1, r3
 8000916:	d909      	bls.n	800092c <__udivmoddi4+0x60>
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	f106 30ff 	add.w	r0, r6, #4294967295
 800091e:	f080 8119 	bcs.w	8000b54 <__udivmoddi4+0x288>
 8000922:	4299      	cmp	r1, r3
 8000924:	f240 8116 	bls.w	8000b54 <__udivmoddi4+0x288>
 8000928:	3e02      	subs	r6, #2
 800092a:	443b      	add	r3, r7
 800092c:	1a5b      	subs	r3, r3, r1
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb3 f0f8 	udiv	r0, r3, r8
 8000934:	fb08 3310 	mls	r3, r8, r0, r3
 8000938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000940:	45a6      	cmp	lr, r4
 8000942:	d909      	bls.n	8000958 <__udivmoddi4+0x8c>
 8000944:	193c      	adds	r4, r7, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	f080 8105 	bcs.w	8000b58 <__udivmoddi4+0x28c>
 800094e:	45a6      	cmp	lr, r4
 8000950:	f240 8102 	bls.w	8000b58 <__udivmoddi4+0x28c>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095c:	eba4 040e 	sub.w	r4, r4, lr
 8000960:	2600      	movs	r6, #0
 8000962:	b11d      	cbz	r5, 800096c <__udivmoddi4+0xa0>
 8000964:	40d4      	lsrs	r4, r2
 8000966:	2300      	movs	r3, #0
 8000968:	e9c5 4300 	strd	r4, r3, [r5]
 800096c:	4631      	mov	r1, r6
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	b902      	cbnz	r2, 8000976 <__udivmoddi4+0xaa>
 8000974:	deff      	udf	#255	; 0xff
 8000976:	fab2 f282 	clz	r2, r2
 800097a:	2a00      	cmp	r2, #0
 800097c:	d150      	bne.n	8000a20 <__udivmoddi4+0x154>
 800097e:	1bcb      	subs	r3, r1, r7
 8000980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	2601      	movs	r6, #1
 800098a:	fbb3 fcfe 	udiv	ip, r3, lr
 800098e:	0c21      	lsrs	r1, r4, #16
 8000990:	fb0e 331c 	mls	r3, lr, ip, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb08 f30c 	mul.w	r3, r8, ip
 800099c:	428b      	cmp	r3, r1
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0xe4>
 80009a0:	1879      	adds	r1, r7, r1
 80009a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0xe2>
 80009a8:	428b      	cmp	r3, r1
 80009aa:	f200 80e9 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009ae:	4684      	mov	ip, r0
 80009b0:	1ac9      	subs	r1, r1, r3
 80009b2:	b2a3      	uxth	r3, r4
 80009b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009bc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009c0:	fb08 f800 	mul.w	r8, r8, r0
 80009c4:	45a0      	cmp	r8, r4
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x10c>
 80009c8:	193c      	adds	r4, r7, r4
 80009ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x10a>
 80009d0:	45a0      	cmp	r8, r4
 80009d2:	f200 80d9 	bhi.w	8000b88 <__udivmoddi4+0x2bc>
 80009d6:	4618      	mov	r0, r3
 80009d8:	eba4 0408 	sub.w	r4, r4, r8
 80009dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009e0:	e7bf      	b.n	8000962 <__udivmoddi4+0x96>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d909      	bls.n	80009fa <__udivmoddi4+0x12e>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	f000 80b1 	beq.w	8000b4e <__udivmoddi4+0x282>
 80009ec:	2600      	movs	r6, #0
 80009ee:	e9c5 0100 	strd	r0, r1, [r5]
 80009f2:	4630      	mov	r0, r6
 80009f4:	4631      	mov	r1, r6
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	fab3 f683 	clz	r6, r3
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d14a      	bne.n	8000a98 <__udivmoddi4+0x1cc>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d302      	bcc.n	8000a0c <__udivmoddi4+0x140>
 8000a06:	4282      	cmp	r2, r0
 8000a08:	f200 80b8 	bhi.w	8000b7c <__udivmoddi4+0x2b0>
 8000a0c:	1a84      	subs	r4, r0, r2
 8000a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	468c      	mov	ip, r1
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d0a8      	beq.n	800096c <__udivmoddi4+0xa0>
 8000a1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a1e:	e7a5      	b.n	800096c <__udivmoddi4+0xa0>
 8000a20:	f1c2 0320 	rsb	r3, r2, #32
 8000a24:	fa20 f603 	lsr.w	r6, r0, r3
 8000a28:	4097      	lsls	r7, r2
 8000a2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a32:	40d9      	lsrs	r1, r3
 8000a34:	4330      	orrs	r0, r6
 8000a36:	0c03      	lsrs	r3, r0, #16
 8000a38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a3c:	fa1f f887 	uxth.w	r8, r7
 8000a40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a48:	fb06 f108 	mul.w	r1, r6, r8
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x19c>
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a5a:	f080 808d 	bcs.w	8000b78 <__udivmoddi4+0x2ac>
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	f240 808a 	bls.w	8000b78 <__udivmoddi4+0x2ac>
 8000a64:	3e02      	subs	r6, #2
 8000a66:	443b      	add	r3, r7
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	b281      	uxth	r1, r0
 8000a6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a78:	fb00 f308 	mul.w	r3, r0, r8
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	d907      	bls.n	8000a90 <__udivmoddi4+0x1c4>
 8000a80:	1879      	adds	r1, r7, r1
 8000a82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a86:	d273      	bcs.n	8000b70 <__udivmoddi4+0x2a4>
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d971      	bls.n	8000b70 <__udivmoddi4+0x2a4>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4439      	add	r1, r7
 8000a90:	1acb      	subs	r3, r1, r3
 8000a92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a96:	e778      	b.n	800098a <__udivmoddi4+0xbe>
 8000a98:	f1c6 0c20 	rsb	ip, r6, #32
 8000a9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000aa0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000aae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ab2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	0c3b      	lsrs	r3, r7, #16
 8000aba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000abe:	fa1f f884 	uxth.w	r8, r4
 8000ac2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aca:	fb09 fa08 	mul.w	sl, r9, r8
 8000ace:	458a      	cmp	sl, r1
 8000ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ad4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x220>
 8000ada:	1861      	adds	r1, r4, r1
 8000adc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ae0:	d248      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae2:	458a      	cmp	sl, r1
 8000ae4:	d946      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aea:	4421      	add	r1, r4
 8000aec:	eba1 010a 	sub.w	r1, r1, sl
 8000af0:	b2bf      	uxth	r7, r7
 8000af2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000af6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000afa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000afe:	fb00 f808 	mul.w	r8, r0, r8
 8000b02:	45b8      	cmp	r8, r7
 8000b04:	d907      	bls.n	8000b16 <__udivmoddi4+0x24a>
 8000b06:	19e7      	adds	r7, r4, r7
 8000b08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0c:	d22e      	bcs.n	8000b6c <__udivmoddi4+0x2a0>
 8000b0e:	45b8      	cmp	r8, r7
 8000b10:	d92c      	bls.n	8000b6c <__udivmoddi4+0x2a0>
 8000b12:	3802      	subs	r0, #2
 8000b14:	4427      	add	r7, r4
 8000b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b1a:	eba7 0708 	sub.w	r7, r7, r8
 8000b1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b22:	454f      	cmp	r7, r9
 8000b24:	46c6      	mov	lr, r8
 8000b26:	4649      	mov	r1, r9
 8000b28:	d31a      	bcc.n	8000b60 <__udivmoddi4+0x294>
 8000b2a:	d017      	beq.n	8000b5c <__udivmoddi4+0x290>
 8000b2c:	b15d      	cbz	r5, 8000b46 <__udivmoddi4+0x27a>
 8000b2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b32:	eb67 0701 	sbc.w	r7, r7, r1
 8000b36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b3a:	40f2      	lsrs	r2, r6
 8000b3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b40:	40f7      	lsrs	r7, r6
 8000b42:	e9c5 2700 	strd	r2, r7, [r5]
 8000b46:	2600      	movs	r6, #0
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e70b      	b.n	800096c <__udivmoddi4+0xa0>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e9      	b.n	800092c <__udivmoddi4+0x60>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6fd      	b.n	8000958 <__udivmoddi4+0x8c>
 8000b5c:	4543      	cmp	r3, r8
 8000b5e:	d2e5      	bcs.n	8000b2c <__udivmoddi4+0x260>
 8000b60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b64:	eb69 0104 	sbc.w	r1, r9, r4
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7df      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e7d2      	b.n	8000b16 <__udivmoddi4+0x24a>
 8000b70:	4660      	mov	r0, ip
 8000b72:	e78d      	b.n	8000a90 <__udivmoddi4+0x1c4>
 8000b74:	4681      	mov	r9, r0
 8000b76:	e7b9      	b.n	8000aec <__udivmoddi4+0x220>
 8000b78:	4666      	mov	r6, ip
 8000b7a:	e775      	b.n	8000a68 <__udivmoddi4+0x19c>
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	e74a      	b.n	8000a16 <__udivmoddi4+0x14a>
 8000b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b84:	4439      	add	r1, r7
 8000b86:	e713      	b.n	80009b0 <__udivmoddi4+0xe4>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	443c      	add	r4, r7
 8000b8c:	e724      	b.n	80009d8 <__udivmoddi4+0x10c>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_idiv0>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <MX_CAN1_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000ba0:	2215      	movs	r2, #21
 8000ba2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bb2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000bb6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bba:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000bbe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000be6:	f001 fc05 	bl	80023f4 <HAL_CAN_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000bf0:	f001 f878 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20004b54 	.word	0x20004b54
 8000bfc:	40006400 	.word	0x40006400

08000c00 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <HAL_CAN_MspInit+0x94>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d134      	bne.n	8000c8c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_CAN_MspInit+0x98>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <HAL_CAN_MspInit+0x98>)
 8000c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_CAN_MspInit+0x98>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_CAN_MspInit+0x98>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <HAL_CAN_MspInit+0x98>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_CAN_MspInit+0x98>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c6c:	2309      	movs	r3, #9
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <HAL_CAN_MspInit+0x9c>)
 8000c78:	f002 fa92 	bl	80031a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2105      	movs	r1, #5
 8000c80:	2014      	movs	r0, #20
 8000c82:	f002 f9d1 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c86:	2014      	movs	r0, #20
 8000c88:	f002 f9ea 	bl	8003060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40006400 	.word	0x40006400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <SELECT+0x18>)
 8000caa:	f002 fc25 	bl	80034f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f001 fb7c 	bl	80023ac <HAL_Delay>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40020000 	.word	0x40020000

08000cbc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <DESELECT+0x18>)
 8000cc6:	f002 fc17 	bl	80034f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f001 fb6e 	bl	80023ac <HAL_Delay>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ce2:	bf00      	nop
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <SPI_TxByte+0x30>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d1f8      	bne.n	8000ce4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000cf2:	1df9      	adds	r1, r7, #7
 8000cf4:	2364      	movs	r3, #100	; 0x64
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <SPI_TxByte+0x30>)
 8000cfa:	f003 f946 	bl	8003f8a <HAL_SPI_Transmit>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20006ce0 	.word	0x20006ce0

08000d0c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d18:	bf00      	nop
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <SPI_TxBuffer+0x30>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d1f8      	bne.n	8000d1a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000d28:	887a      	ldrh	r2, [r7, #2]
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <SPI_TxBuffer+0x30>)
 8000d30:	f003 f92b 	bl	8003f8a <HAL_SPI_Transmit>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20006ce0 	.word	0x20006ce0

08000d40 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000d46:	23ff      	movs	r3, #255	; 0xff
 8000d48:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d4a:	bf00      	nop
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <SPI_RxByte+0x34>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d1f8      	bne.n	8000d4c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d5a:	1dba      	adds	r2, r7, #6
 8000d5c:	1df9      	adds	r1, r7, #7
 8000d5e:	2364      	movs	r3, #100	; 0x64
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2301      	movs	r3, #1
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <SPI_RxByte+0x34>)
 8000d66:	f003 fa4c 	bl	8004202 <HAL_SPI_TransmitReceive>

	return data;
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20006ce0 	.word	0x20006ce0

08000d78 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000d80:	f7ff ffde 	bl	8000d40 <SPI_RxByte>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	701a      	strb	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <SD_ReadyWait+0x30>)
 8000d9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000da0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000da2:	f7ff ffcd 	bl	8000d40 <SPI_RxByte>
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2bff      	cmp	r3, #255	; 0xff
 8000dae:	d003      	beq.n	8000db8 <SD_ReadyWait+0x24>
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SD_ReadyWait+0x30>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f4      	bne.n	8000da2 <SD_ReadyWait+0xe>

	return res;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20004b7c 	.word	0x20004b7c

08000dc8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000dce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000dd2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000dd4:	f7ff ff72 	bl	8000cbc <DESELECT>
	for(int i = 0; i < 10; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	e005      	b.n	8000dea <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000dde:	20ff      	movs	r0, #255	; 0xff
 8000de0:	f7ff ff7a 	bl	8000cd8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	ddf6      	ble.n	8000dde <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000df0:	f7ff ff56 	bl	8000ca0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000e08:	2395      	movs	r3, #149	; 0x95
 8000e0a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2106      	movs	r1, #6
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff7b 	bl	8000d0c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e16:	e002      	b.n	8000e1e <SD_PowerOn+0x56>
	{
		cnt--;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e1e:	f7ff ff8f 	bl	8000d40 <SPI_RxByte>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d002      	beq.n	8000e2e <SD_PowerOn+0x66>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f4      	bne.n	8000e18 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000e2e:	f7ff ff45 	bl	8000cbc <DESELECT>
	SPI_TxByte(0XFF);
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	f7ff ff50 	bl	8000cd8 <SPI_TxByte>

	PowerFlag = 1;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <SD_PowerOn+0x80>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000d1 	.word	0x200000d1

08000e4c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <SD_PowerOff+0x14>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	200000d1 	.word	0x200000d1

08000e64 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <SD_CheckPower+0x14>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200000d1 	.word	0x200000d1

08000e7c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <SD_RxDataBlock+0x58>)
 8000e88:	22c8      	movs	r2, #200	; 0xc8
 8000e8a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000e8c:	f7ff ff58 	bl	8000d40 <SPI_RxByte>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	2bff      	cmp	r3, #255	; 0xff
 8000e98:	d103      	bne.n	8000ea2 <SD_RxDataBlock+0x26>
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <SD_RxDataBlock+0x58>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f4      	bne.n	8000e8c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2bfe      	cmp	r3, #254	; 0xfe
 8000ea6:	d001      	beq.n	8000eac <SD_RxDataBlock+0x30>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e00f      	b.n	8000ecc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff60 	bl	8000d78 <SPI_RxBytePtr>
	} while(len--);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	603a      	str	r2, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f4      	bne.n	8000eac <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000ec2:	f7ff ff3d 	bl	8000d40 <SPI_RxByte>
	SPI_RxByte();
 8000ec6:	f7ff ff3b 	bl	8000d40 <SPI_RxByte>

	return TRUE;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20004b7e 	.word	0x20004b7e

08000ed8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000ee8:	f7ff ff54 	bl	8000d94 <SD_ReadyWait>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d001      	beq.n	8000ef6 <SD_TxDataBlock+0x1e>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e02f      	b.n	8000f56 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff feed 	bl	8000cd8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	2bfd      	cmp	r3, #253	; 0xfd
 8000f02:	d020      	beq.n	8000f46 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff feff 	bl	8000d0c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000f0e:	f7ff ff17 	bl	8000d40 <SPI_RxByte>
		SPI_RxByte();
 8000f12:	f7ff ff15 	bl	8000d40 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000f16:	e00b      	b.n	8000f30 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000f18:	f7ff ff12 	bl	8000d40 <SPI_RxByte>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	d006      	beq.n	8000f38 <SD_TxDataBlock+0x60>
			i++;
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	2b40      	cmp	r3, #64	; 0x40
 8000f34:	d9f0      	bls.n	8000f18 <SD_TxDataBlock+0x40>
 8000f36:	e000      	b.n	8000f3a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000f38:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ff00 	bl	8000d40 <SPI_RxByte>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0fa      	beq.n	8000f3c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	f003 031f 	and.w	r3, r3, #31
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d101      	bne.n	8000f54 <SD_TxDataBlock+0x7c>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	6039      	str	r1, [r7, #0]
 8000f68:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000f6a:	f7ff ff13 	bl	8000d94 <SD_ReadyWait>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2bff      	cmp	r3, #255	; 0xff
 8000f72:	d001      	beq.n	8000f78 <SD_SendCmd+0x1a>
 8000f74:	23ff      	movs	r3, #255	; 0xff
 8000f76:	e042      	b.n	8000ffe <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff feac 	bl	8000cd8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	0e1b      	lsrs	r3, r3, #24
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fea6 	bl	8000cd8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	0c1b      	lsrs	r3, r3, #16
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fea0 	bl	8000cd8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fe9a 	bl	8000cd8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe95 	bl	8000cd8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b40      	cmp	r3, #64	; 0x40
 8000fb2:	d102      	bne.n	8000fba <SD_SendCmd+0x5c>
 8000fb4:	2395      	movs	r3, #149	; 0x95
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e007      	b.n	8000fca <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b48      	cmp	r3, #72	; 0x48
 8000fbe:	d102      	bne.n	8000fc6 <SD_SendCmd+0x68>
 8000fc0:	2387      	movs	r3, #135	; 0x87
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e001      	b.n	8000fca <SD_SendCmd+0x6c>
	else crc = 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe83 	bl	8000cd8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b4c      	cmp	r3, #76	; 0x4c
 8000fd6:	d101      	bne.n	8000fdc <SD_SendCmd+0x7e>
 8000fd8:	f7ff feb2 	bl	8000d40 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000fdc:	230a      	movs	r3, #10
 8000fde:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000fe0:	f7ff feae 	bl	8000d40 <SPI_RxByte>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000fe8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da05      	bge.n	8000ffc <SD_SendCmd+0x9e>
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	73bb      	strb	r3, [r7, #14]
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f1      	bne.n	8000fe0 <SD_SendCmd+0x82>

	return res;
 8000ffc:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SD_disk_initialize+0x14>
 8001018:	2301      	movs	r3, #1
 800101a:	e0d1      	b.n	80011c0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800101c:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <SD_disk_initialize+0x1c0>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <SD_disk_initialize+0x2a>
 800102a:	4b67      	ldr	r3, [pc, #412]	; (80011c8 <SD_disk_initialize+0x1c0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	e0c6      	b.n	80011c0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001032:	f7ff fec9 	bl	8000dc8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001036:	f7ff fe33 	bl	8000ca0 <SELECT>

	/* check disk type */
	type = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800103e:	2100      	movs	r1, #0
 8001040:	2040      	movs	r0, #64	; 0x40
 8001042:	f7ff ff8c 	bl	8000f5e <SD_SendCmd>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	f040 80a1 	bne.w	8001190 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800104e:	4b5f      	ldr	r3, [pc, #380]	; (80011cc <SD_disk_initialize+0x1c4>)
 8001050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001054:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001056:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800105a:	2048      	movs	r0, #72	; 0x48
 800105c:	f7ff ff7f 	bl	8000f5e <SD_SendCmd>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d155      	bne.n	8001112 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e00c      	b.n	8001086 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800106c:	7bfc      	ldrb	r4, [r7, #15]
 800106e:	f7ff fe67 	bl	8000d40 <SPI_RxByte>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4423      	add	r3, r4
 800107c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	3301      	adds	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b03      	cmp	r3, #3
 800108a:	d9ef      	bls.n	800106c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800108c:	7abb      	ldrb	r3, [r7, #10]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d17e      	bne.n	8001190 <SD_disk_initialize+0x188>
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	2baa      	cmp	r3, #170	; 0xaa
 8001096:	d17b      	bne.n	8001190 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001098:	2100      	movs	r1, #0
 800109a:	2077      	movs	r0, #119	; 0x77
 800109c:	f7ff ff5f 	bl	8000f5e <SD_SendCmd>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d807      	bhi.n	80010b6 <SD_disk_initialize+0xae>
 80010a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010aa:	2069      	movs	r0, #105	; 0x69
 80010ac:	f7ff ff57 	bl	8000f5e <SD_SendCmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d004      	beq.n	80010c0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80010b6:	4b45      	ldr	r3, [pc, #276]	; (80011cc <SD_disk_initialize+0x1c4>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1ec      	bne.n	8001098 <SD_disk_initialize+0x90>
 80010be:	e000      	b.n	80010c2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80010c0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80010c2:	4b42      	ldr	r3, [pc, #264]	; (80011cc <SD_disk_initialize+0x1c4>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d062      	beq.n	8001190 <SD_disk_initialize+0x188>
 80010ca:	2100      	movs	r1, #0
 80010cc:	207a      	movs	r0, #122	; 0x7a
 80010ce:	f7ff ff46 	bl	8000f5e <SD_SendCmd>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d15b      	bne.n	8001190 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e00c      	b.n	80010f8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80010de:	7bfc      	ldrb	r4, [r7, #15]
 80010e0:	f7ff fe2e 	bl	8000d40 <SPI_RxByte>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4423      	add	r3, r4
 80010ee:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d9ef      	bls.n	80010de <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80010fe:	7a3b      	ldrb	r3, [r7, #8]
 8001100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SD_disk_initialize+0x104>
 8001108:	230c      	movs	r3, #12
 800110a:	e000      	b.n	800110e <SD_disk_initialize+0x106>
 800110c:	2304      	movs	r3, #4
 800110e:	73bb      	strb	r3, [r7, #14]
 8001110:	e03e      	b.n	8001190 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001112:	2100      	movs	r1, #0
 8001114:	2077      	movs	r0, #119	; 0x77
 8001116:	f7ff ff22 	bl	8000f5e <SD_SendCmd>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d808      	bhi.n	8001132 <SD_disk_initialize+0x12a>
 8001120:	2100      	movs	r1, #0
 8001122:	2069      	movs	r0, #105	; 0x69
 8001124:	f7ff ff1b 	bl	8000f5e <SD_SendCmd>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	d801      	bhi.n	8001132 <SD_disk_initialize+0x12a>
 800112e:	2302      	movs	r3, #2
 8001130:	e000      	b.n	8001134 <SD_disk_initialize+0x12c>
 8001132:	2301      	movs	r3, #1
 8001134:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d10e      	bne.n	800115a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800113c:	2100      	movs	r1, #0
 800113e:	2077      	movs	r0, #119	; 0x77
 8001140:	f7ff ff0d 	bl	8000f5e <SD_SendCmd>
 8001144:	4603      	mov	r3, r0
 8001146:	2b01      	cmp	r3, #1
 8001148:	d80e      	bhi.n	8001168 <SD_disk_initialize+0x160>
 800114a:	2100      	movs	r1, #0
 800114c:	2069      	movs	r0, #105	; 0x69
 800114e:	f7ff ff06 	bl	8000f5e <SD_SendCmd>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d107      	bne.n	8001168 <SD_disk_initialize+0x160>
 8001158:	e00c      	b.n	8001174 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800115a:	2100      	movs	r1, #0
 800115c:	2041      	movs	r0, #65	; 0x41
 800115e:	f7ff fefe 	bl	8000f5e <SD_SendCmd>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <SD_disk_initialize+0x1c4>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1e2      	bne.n	8001136 <SD_disk_initialize+0x12e>
 8001170:	e000      	b.n	8001174 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001172:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <SD_disk_initialize+0x1c4>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <SD_disk_initialize+0x184>
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	2050      	movs	r0, #80	; 0x50
 8001182:	f7ff feec 	bl	8000f5e <SD_SendCmd>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SD_disk_initialize+0x188>
 800118c:	2300      	movs	r3, #0
 800118e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001190:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <SD_disk_initialize+0x1c8>)
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001196:	f7ff fd91 	bl	8000cbc <DESELECT>
	SPI_RxByte();
 800119a:	f7ff fdd1 	bl	8000d40 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800119e:	7bbb      	ldrb	r3, [r7, #14]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <SD_disk_initialize+0x1c0>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SD_disk_initialize+0x1c0>)
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	e001      	b.n	80011ba <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80011b6:	f7ff fe49 	bl	8000e4c <SD_PowerOff>
	}

	return Stat;
 80011ba:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <SD_disk_initialize+0x1c0>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20004b7e 	.word	0x20004b7e
 80011d0:	200000d0 	.word	0x200000d0

080011d4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SD_disk_status+0x14>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e002      	b.n	80011ee <SD_disk_status+0x1a>
	return Stat;
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SD_disk_status+0x28>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000000 	.word	0x20000000

08001200 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <SD_disk_read+0x1c>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <SD_disk_read+0x20>
 800121c:	2304      	movs	r3, #4
 800121e:	e051      	b.n	80012c4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <SD_disk_read+0xcc>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SD_disk_read+0x32>
 800122e:	2303      	movs	r3, #3
 8001230:	e048      	b.n	80012c4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001232:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <SD_disk_read+0xd0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <SD_disk_read+0x44>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	607b      	str	r3, [r7, #4]

	SELECT();
 8001244:	f7ff fd2c 	bl	8000ca0 <SELECT>

	if (count == 1)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d111      	bne.n	8001272 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	2051      	movs	r0, #81	; 0x51
 8001252:	f7ff fe84 	bl	8000f5e <SD_SendCmd>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d129      	bne.n	80012b0 <SD_disk_read+0xb0>
 800125c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f7ff fe0b 	bl	8000e7c <SD_RxDataBlock>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d021      	beq.n	80012b0 <SD_disk_read+0xb0>
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	e01e      	b.n	80012b0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	2052      	movs	r0, #82	; 0x52
 8001276:	f7ff fe72 	bl	8000f5e <SD_SendCmd>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d117      	bne.n	80012b0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001280:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001284:	68b8      	ldr	r0, [r7, #8]
 8001286:	f7ff fdf9 	bl	8000e7c <SD_RxDataBlock>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00a      	beq.n	80012a6 <SD_disk_read+0xa6>
				buff += 512;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001296:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ed      	bne.n	8001280 <SD_disk_read+0x80>
 80012a4:	e000      	b.n	80012a8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80012a6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	204c      	movs	r0, #76	; 0x4c
 80012ac:	f7ff fe57 	bl	8000f5e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80012b0:	f7ff fd04 	bl	8000cbc <DESELECT>
	SPI_RxByte();
 80012b4:	f7ff fd44 	bl	8000d40 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	200000d0 	.word	0x200000d0

080012d4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <SD_disk_write+0x1c>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <SD_disk_write+0x20>
 80012f0:	2304      	movs	r3, #4
 80012f2:	e06b      	b.n	80013cc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012f4:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <SD_disk_write+0x100>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SD_disk_write+0x32>
 8001302:	2303      	movs	r3, #3
 8001304:	e062      	b.n	80013cc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <SD_disk_write+0x100>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SD_disk_write+0x44>
 8001314:	2302      	movs	r3, #2
 8001316:	e059      	b.n	80013cc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <SD_disk_write+0x104>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <SD_disk_write+0x56>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	025b      	lsls	r3, r3, #9
 8001328:	607b      	str	r3, [r7, #4]

	SELECT();
 800132a:	f7ff fcb9 	bl	8000ca0 <SELECT>

	if (count == 1)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d110      	bne.n	8001356 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	2058      	movs	r0, #88	; 0x58
 8001338:	f7ff fe11 	bl	8000f5e <SD_SendCmd>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d13a      	bne.n	80013b8 <SD_disk_write+0xe4>
 8001342:	21fe      	movs	r1, #254	; 0xfe
 8001344:	68b8      	ldr	r0, [r7, #8]
 8001346:	f7ff fdc7 	bl	8000ed8 <SD_TxDataBlock>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d033      	beq.n	80013b8 <SD_disk_write+0xe4>
			count = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	e030      	b.n	80013b8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <SD_disk_write+0x104>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001362:	2100      	movs	r1, #0
 8001364:	2077      	movs	r0, #119	; 0x77
 8001366:	f7ff fdfa 	bl	8000f5e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	2057      	movs	r0, #87	; 0x57
 800136e:	f7ff fdf6 	bl	8000f5e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	2059      	movs	r0, #89	; 0x59
 8001376:	f7ff fdf2 	bl	8000f5e <SD_SendCmd>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d11b      	bne.n	80013b8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001380:	21fc      	movs	r1, #252	; 0xfc
 8001382:	68b8      	ldr	r0, [r7, #8]
 8001384:	f7ff fda8 	bl	8000ed8 <SD_TxDataBlock>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <SD_disk_write+0xd0>
				buff += 512;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001394:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1ee      	bne.n	8001380 <SD_disk_write+0xac>
 80013a2:	e000      	b.n	80013a6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013a4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80013a6:	21fd      	movs	r1, #253	; 0xfd
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fd95 	bl	8000ed8 <SD_TxDataBlock>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <SD_disk_write+0xe4>
			{
				count = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80013b8:	f7ff fc80 	bl	8000cbc <DESELECT>
	SPI_RxByte();
 80013bc:	f7ff fcc0 	bl	8000d40 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bf14      	ite	ne
 80013c6:	2301      	movne	r3, #1
 80013c8:	2300      	moveq	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	200000d0 	.word	0x200000d0

080013dc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b08b      	sub	sp, #44	; 0x2c
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	603a      	str	r2, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	460b      	mov	r3, r1
 80013ea:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SD_disk_ioctl+0x1e>
 80013f6:	2304      	movs	r3, #4
 80013f8:	e118      	b.n	800162c <SD_disk_ioctl+0x250>
	res = RES_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d124      	bne.n	8001450 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d012      	beq.n	8001434 <SD_disk_ioctl+0x58>
 800140e:	2b02      	cmp	r3, #2
 8001410:	dc1a      	bgt.n	8001448 <SD_disk_ioctl+0x6c>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <SD_disk_ioctl+0x40>
 8001416:	2b01      	cmp	r3, #1
 8001418:	d006      	beq.n	8001428 <SD_disk_ioctl+0x4c>
 800141a:	e015      	b.n	8001448 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800141c:	f7ff fd16 	bl	8000e4c <SD_PowerOff>
			res = RES_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001426:	e0ff      	b.n	8001628 <SD_disk_ioctl+0x24c>
		case 1:
			SD_PowerOn();		/* Power On */
 8001428:	f7ff fcce 	bl	8000dc8 <SD_PowerOn>
			res = RES_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001432:	e0f9      	b.n	8001628 <SD_disk_ioctl+0x24c>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	1c5c      	adds	r4, r3, #1
 8001438:	f7ff fd14 	bl	8000e64 <SD_CheckPower>
 800143c:	4603      	mov	r3, r0
 800143e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001446:	e0ef      	b.n	8001628 <SD_disk_ioctl+0x24c>
		default:
			res = RES_PARERR;
 8001448:	2304      	movs	r3, #4
 800144a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800144e:	e0eb      	b.n	8001628 <SD_disk_ioctl+0x24c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001450:	4b78      	ldr	r3, [pc, #480]	; (8001634 <SD_disk_ioctl+0x258>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SD_disk_ioctl+0x86>
 800145e:	2303      	movs	r3, #3
 8001460:	e0e4      	b.n	800162c <SD_disk_ioctl+0x250>

		SELECT();
 8001462:	f7ff fc1d 	bl	8000ca0 <SELECT>

		switch (ctrl)
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	2b0d      	cmp	r3, #13
 800146a:	f200 80cc 	bhi.w	8001606 <SD_disk_ioctl+0x22a>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <SD_disk_ioctl+0x98>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	0800156f 	.word	0x0800156f
 8001478:	080014ad 	.word	0x080014ad
 800147c:	0800155f 	.word	0x0800155f
 8001480:	08001607 	.word	0x08001607
 8001484:	08001607 	.word	0x08001607
 8001488:	08001607 	.word	0x08001607
 800148c:	08001607 	.word	0x08001607
 8001490:	08001607 	.word	0x08001607
 8001494:	08001607 	.word	0x08001607
 8001498:	08001607 	.word	0x08001607
 800149c:	08001607 	.word	0x08001607
 80014a0:	08001581 	.word	0x08001581
 80014a4:	080015a5 	.word	0x080015a5
 80014a8:	080015c9 	.word	0x080015c9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80014ac:	2100      	movs	r1, #0
 80014ae:	2049      	movs	r0, #73	; 0x49
 80014b0:	f7ff fd55 	bl	8000f5e <SD_SendCmd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f040 80a9 	bne.w	800160e <SD_disk_ioctl+0x232>
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2110      	movs	r1, #16
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fcda 	bl	8000e7c <SD_RxDataBlock>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 809f 	beq.w	800160e <SD_disk_ioctl+0x232>
			{
				if ((csd[0] >> 6) == 1)
 80014d0:	7b3b      	ldrb	r3, [r7, #12]
 80014d2:	099b      	lsrs	r3, r3, #6
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d10e      	bne.n	80014f8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80014da:	7d7b      	ldrb	r3, [r7, #21]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	7d3b      	ldrb	r3, [r7, #20]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80014ee:	8bfb      	ldrh	r3, [r7, #30]
 80014f0:	029a      	lsls	r2, r3, #10
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e02e      	b.n	8001556 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80014f8:	7c7b      	ldrb	r3, [r7, #17]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	7dbb      	ldrb	r3, [r7, #22]
 8001502:	09db      	lsrs	r3, r3, #7
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4413      	add	r3, r2
 8001508:	b2da      	uxtb	r2, r3
 800150a:	7d7b      	ldrb	r3, [r7, #21]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f003 0306 	and.w	r3, r3, #6
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4413      	add	r3, r2
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3302      	adds	r3, #2
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001520:	7d3b      	ldrb	r3, [r7, #20]
 8001522:	099b      	lsrs	r3, r3, #6
 8001524:	b2db      	uxtb	r3, r3
 8001526:	b29a      	uxth	r2, r3
 8001528:	7cfb      	ldrb	r3, [r7, #19]
 800152a:	b29b      	uxth	r3, r3
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	b29b      	uxth	r3, r3
 8001530:	4413      	add	r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	7cbb      	ldrb	r3, [r7, #18]
 8001536:	029b      	lsls	r3, r3, #10
 8001538:	b29b      	uxth	r3, r3
 800153a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800153e:	b29b      	uxth	r3, r3
 8001540:	4413      	add	r3, r2
 8001542:	b29b      	uxth	r3, r3
 8001544:	3301      	adds	r3, #1
 8001546:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001548:	8bfa      	ldrh	r2, [r7, #30]
 800154a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800154e:	3b09      	subs	r3, #9
 8001550:	409a      	lsls	r2, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800155c:	e057      	b.n	800160e <SD_disk_ioctl+0x232>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001564:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800156c:	e058      	b.n	8001620 <SD_disk_ioctl+0x244>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800156e:	f7ff fc11 	bl	8000d94 <SD_ReadyWait>
 8001572:	4603      	mov	r3, r0
 8001574:	2bff      	cmp	r3, #255	; 0xff
 8001576:	d14c      	bne.n	8001612 <SD_disk_ioctl+0x236>
 8001578:	2300      	movs	r3, #0
 800157a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800157e:	e048      	b.n	8001612 <SD_disk_ioctl+0x236>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001580:	2100      	movs	r1, #0
 8001582:	2049      	movs	r0, #73	; 0x49
 8001584:	f7ff fceb 	bl	8000f5e <SD_SendCmd>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d143      	bne.n	8001616 <SD_disk_ioctl+0x23a>
 800158e:	2110      	movs	r1, #16
 8001590:	6a38      	ldr	r0, [r7, #32]
 8001592:	f7ff fc73 	bl	8000e7c <SD_RxDataBlock>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d03c      	beq.n	8001616 <SD_disk_ioctl+0x23a>
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015a2:	e038      	b.n	8001616 <SD_disk_ioctl+0x23a>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015a4:	2100      	movs	r1, #0
 80015a6:	204a      	movs	r0, #74	; 0x4a
 80015a8:	f7ff fcd9 	bl	8000f5e <SD_SendCmd>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d133      	bne.n	800161a <SD_disk_ioctl+0x23e>
 80015b2:	2110      	movs	r1, #16
 80015b4:	6a38      	ldr	r0, [r7, #32]
 80015b6:	f7ff fc61 	bl	8000e7c <SD_RxDataBlock>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d02c      	beq.n	800161a <SD_disk_ioctl+0x23e>
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015c6:	e028      	b.n	800161a <SD_disk_ioctl+0x23e>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80015c8:	2100      	movs	r1, #0
 80015ca:	207a      	movs	r0, #122	; 0x7a
 80015cc:	f7ff fcc7 	bl	8000f5e <SD_SendCmd>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d123      	bne.n	800161e <SD_disk_ioctl+0x242>
			{
				for (n = 0; n < 4; n++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015dc:	e00b      	b.n	80015f6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80015de:	6a3c      	ldr	r4, [r7, #32]
 80015e0:	1c63      	adds	r3, r4, #1
 80015e2:	623b      	str	r3, [r7, #32]
 80015e4:	f7ff fbac 	bl	8000d40 <SPI_RxByte>
 80015e8:	4603      	mov	r3, r0
 80015ea:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80015ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f0:	3301      	adds	r3, #1
 80015f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d9ef      	bls.n	80015de <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break ;
 8001604:	e00b      	b.n	800161e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001606:	2304      	movs	r3, #4
 8001608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800160c:	e008      	b.n	8001620 <SD_disk_ioctl+0x244>
			break;
 800160e:	bf00      	nop
 8001610:	e006      	b.n	8001620 <SD_disk_ioctl+0x244>
			break;
 8001612:	bf00      	nop
 8001614:	e004      	b.n	8001620 <SD_disk_ioctl+0x244>
			break;
 8001616:	bf00      	nop
 8001618:	e002      	b.n	8001620 <SD_disk_ioctl+0x244>
			break;
 800161a:	bf00      	nop
 800161c:	e000      	b.n	8001620 <SD_disk_ioctl+0x244>
			break ;
 800161e:	bf00      	nop
		}

		DESELECT();
 8001620:	f7ff fb4c 	bl	8000cbc <DESELECT>
		SPI_RxByte();
 8001624:	f7ff fb8c 	bl	8000d40 <SPI_RxByte>
	}

	return res;
 8001628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800162c:	4618      	mov	r0, r3
 800162e:	372c      	adds	r7, #44	; 0x2c
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	20000000 	.word	0x20000000

08001638 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <MX_FREERTOS_Init+0x18>)
 800163e:	2100      	movs	r1, #0
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_FREERTOS_Init+0x1c>)
 8001642:	f007 fef7 	bl	8009434 <osThreadNew>
 8001646:	4603      	mov	r3, r0
 8001648:	4a03      	ldr	r2, [pc, #12]	; (8001658 <MX_FREERTOS_Init+0x20>)
 800164a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	0800e598 	.word	0x0800e598
 8001654:	0800165d 	.word	0x0800165d
 8001658:	20004b80 	.word	0x20004b80

0800165c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001664:	2001      	movs	r0, #1
 8001666:	f007 ff77 	bl	8009558 <osDelay>
 800166a:	e7fb      	b.n	8001664 <StartDefaultTask+0x8>

0800166c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <MX_GPIO_Init+0x98>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <MX_GPIO_Init+0x98>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_GPIO_Init+0x98>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_GPIO_Init+0x98>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <MX_GPIO_Init+0x98>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_GPIO_Init+0x98>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_GPIO_Init+0x98>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <MX_GPIO_Init+0x98>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_GPIO_Init+0x98>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2110      	movs	r1, #16
 80016da:	480b      	ldr	r0, [pc, #44]	; (8001708 <MX_GPIO_Init+0x9c>)
 80016dc:	f001 ff0c 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016e0:	2310      	movs	r3, #16
 80016e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4619      	mov	r1, r3
 80016f6:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_GPIO_Init+0x9c>)
 80016f8:	f001 fd52 	bl	80031a0 <HAL_GPIO_Init>

}
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <FirstInitializationProcess>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* this function hold all pre initialization step */
void FirstInitializationProcess(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
	  TxMessage.DLC = 8;
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <FirstInitializationProcess+0x184>)
 8001714:	2208      	movs	r2, #8
 8001716:	611a      	str	r2, [r3, #16]
	  TxMessage.ExtId =0;
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <FirstInitializationProcess+0x184>)
 800171a:	2200      	movs	r2, #0
 800171c:	605a      	str	r2, [r3, #4]
	  TxMessage.IDE = CAN_ID_STD;
 800171e:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <FirstInitializationProcess+0x184>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
	  TxMessage.RTR =0;
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <FirstInitializationProcess+0x184>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
	  TxMessage.StdId = 0x123;
 800172a:	4b59      	ldr	r3, [pc, #356]	; (8001890 <FirstInitializationProcess+0x184>)
 800172c:	f240 1223 	movw	r2, #291	; 0x123
 8001730:	601a      	str	r2, [r3, #0]
	  RetargetInit(&huart1);
 8001732:	4858      	ldr	r0, [pc, #352]	; (8001894 <FirstInitializationProcess+0x188>)
 8001734:	f000 fadc 	bl	8001cf0 <RetargetInit>
	  HAL_Delay(500);
 8001738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800173c:	f000 fe36 	bl	80023ac <HAL_Delay>

	  	if( f_mount(&FATFS_Struct, "", 0) == FR_OK) {
 8001740:	2200      	movs	r2, #0
 8001742:	4955      	ldr	r1, [pc, #340]	; (8001898 <FirstInitializationProcess+0x18c>)
 8001744:	4855      	ldr	r0, [pc, #340]	; (800189c <FirstInitializationProcess+0x190>)
 8001746:	f006 fc19 	bl	8007f7c <f_mount>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d103      	bne.n	8001758 <FirstInitializationProcess+0x4c>
	  		printf("Micro SD card is mounted successfully!\n");
 8001750:	4853      	ldr	r0, [pc, #332]	; (80018a0 <FirstInitializationProcess+0x194>)
 8001752:	f00b fc5b 	bl	800d00c <puts>
 8001756:	e002      	b.n	800175e <FirstInitializationProcess+0x52>
	  	} else {
	  		printf("Micro SD card's mount error!\n");
 8001758:	4852      	ldr	r0, [pc, #328]	; (80018a4 <FirstInitializationProcess+0x198>)
 800175a:	f00b fc57 	bl	800d00c <puts>
	  	}

		if ( f_getfree("", &fre_clust, &pfs)== FR_OK) {
 800175e:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <FirstInitializationProcess+0x19c>)
 8001760:	4952      	ldr	r1, [pc, #328]	; (80018ac <FirstInitializationProcess+0x1a0>)
 8001762:	484d      	ldr	r0, [pc, #308]	; (8001898 <FirstInitializationProcess+0x18c>)
 8001764:	f007 fada 	bl	8008d1c <f_getfree>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d13f      	bne.n	80017ee <FirstInitializationProcess+0xe2>
	  	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800176e:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <FirstInitializationProcess+0x19c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	3b02      	subs	r3, #2
 8001776:	4a4c      	ldr	r2, [pc, #304]	; (80018a8 <FirstInitializationProcess+0x19c>)
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	8952      	ldrh	r2, [r2, #10]
 800177c:	fb02 f303 	mul.w	r3, r2, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fff1 	bl	8000768 <__aeabi_ui2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <FirstInitializationProcess+0x1a4>)
 800178c:	f7fe fd80 	bl	8000290 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f860 	bl	800085c <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	4a45      	ldr	r2, [pc, #276]	; (80018b4 <FirstInitializationProcess+0x1a8>)
 80017a0:	6013      	str	r3, [r2, #0]
	  	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <FirstInitializationProcess+0x19c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	895b      	ldrh	r3, [r3, #10]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <FirstInitializationProcess+0x1a0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fb03 f302 	mul.w	r3, r3, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe ffd8 	bl	8000768 <__aeabi_ui2d>
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <FirstInitializationProcess+0x1a4>)
 80017be:	f7fe fd67 	bl	8000290 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f847 	bl	800085c <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a39      	ldr	r2, [pc, #228]	; (80018b8 <FirstInitializationProcess+0x1ac>)
 80017d2:	6013      	str	r3, [r2, #0]
	  	char mSz[12];
	  	sprintf(mSz, "%lu", freeSpace);
 80017d4:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <FirstInitializationProcess+0x1ac>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4938      	ldr	r1, [pc, #224]	; (80018bc <FirstInitializationProcess+0x1b0>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f00b fd5d 	bl	800d29c <siprintf>
	  	printf("The free space is: %s \n",mSz);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	4836      	ldr	r0, [pc, #216]	; (80018c0 <FirstInitializationProcess+0x1b4>)
 80017e8:	f00b fb8a 	bl	800cf00 <iprintf>
 80017ec:	e002      	b.n	80017f4 <FirstInitializationProcess+0xe8>
	  	} else {
	  		printf("The free space could not be determined!\n");
 80017ee:	4835      	ldr	r0, [pc, #212]	; (80018c4 <FirstInitializationProcess+0x1b8>)
 80017f0:	f00b fc0c 	bl	800d00c <puts>
	  	}

	  	/* Open file to read */

	  	printf("The SDcard is successfully mounted  \n");
 80017f4:	4834      	ldr	r0, [pc, #208]	; (80018c8 <FirstInitializationProcess+0x1bc>)
 80017f6:	f00b fc09 	bl	800d00c <puts>


	  	if ( f_open(&File_Struct, "file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ)== FR_OK) {
 80017fa:	2233      	movs	r2, #51	; 0x33
 80017fc:	4933      	ldr	r1, [pc, #204]	; (80018cc <FirstInitializationProcess+0x1c0>)
 80017fe:	4834      	ldr	r0, [pc, #208]	; (80018d0 <FirstInitializationProcess+0x1c4>)
 8001800:	f006 fc20 	bl	8008044 <f_open>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d103      	bne.n	8001812 <FirstInitializationProcess+0x106>
	  		printf("File opened for reading and checking the free space.\n");
 800180a:	4832      	ldr	r0, [pc, #200]	; (80018d4 <FirstInitializationProcess+0x1c8>)
 800180c:	f00b fbfe 	bl	800d00c <puts>
 8001810:	e002      	b.n	8001818 <FirstInitializationProcess+0x10c>
	  	} else  {
	  		printf("File was not opened for reading and checking the free space!\n");
 8001812:	4831      	ldr	r0, [pc, #196]	; (80018d8 <FirstInitializationProcess+0x1cc>)
 8001814:	f00b fbfa 	bl	800d00c <puts>
	  	}



	printf("their is only two available commands \n press 1 : to read all logged data \n press 2 : to flush file \n");
 8001818:	4830      	ldr	r0, [pc, #192]	; (80018dc <FirstInitializationProcess+0x1d0>)
 800181a:	f00b fbf7 	bl	800d00c <puts>



	  FilterInit.FilterActivation = CAN_FILTER_ENABLE ;
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <FirstInitializationProcess+0x1d4>)
 8001820:	2201      	movs	r2, #1
 8001822:	621a      	str	r2, [r3, #32]
	  FilterInit.FilterBank = 2;
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <FirstInitializationProcess+0x1d4>)
 8001826:	2202      	movs	r2, #2
 8001828:	615a      	str	r2, [r3, #20]
	  FilterInit.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800182a:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <FirstInitializationProcess+0x1d4>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
	  FilterInit.FilterIdHigh = 0x123<<5;
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <FirstInitializationProcess+0x1d4>)
 8001832:	f242 4260 	movw	r2, #9312	; 0x2460
 8001836:	601a      	str	r2, [r3, #0]
	  FilterInit.FilterIdLow = 0;
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <FirstInitializationProcess+0x1d4>)
 800183a:	2200      	movs	r2, #0
 800183c:	605a      	str	r2, [r3, #4]
	  FilterInit.FilterMaskIdHigh = 0x00;
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <FirstInitializationProcess+0x1d4>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]

	  FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <FirstInitializationProcess+0x1d4>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
	  FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <FirstInitializationProcess+0x1d4>)
 800184c:	2201      	movs	r2, #1
 800184e:	61da      	str	r2, [r3, #28]
	  HAL_CAN_ConfigFilter(&hcan1,&FilterInit);
 8001850:	4923      	ldr	r1, [pc, #140]	; (80018e0 <FirstInitializationProcess+0x1d4>)
 8001852:	4824      	ldr	r0, [pc, #144]	; (80018e4 <FirstInitializationProcess+0x1d8>)
 8001854:	f000 feca 	bl	80025ec <HAL_CAN_ConfigFilter>

	  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <FirstInitializationProcess+0x188>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <FirstInitializationProcess+0x188>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0220 	orr.w	r2, r2, #32
 8001866:	60da      	str	r2, [r3, #12]
	  HAL_UART_Receive_IT(&huart1, &Command, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	491f      	ldr	r1, [pc, #124]	; (80018e8 <FirstInitializationProcess+0x1dc>)
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <FirstInitializationProcess+0x188>)
 800186e:	f003 fb64 	bl	8004f3a <HAL_UART_Receive_IT>

	  __HAL_CAN_ENABLE_IT(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <FirstInitializationProcess+0x1d8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <FirstInitializationProcess+0x1d8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0202 	orr.w	r2, r2, #2
 8001880:	615a      	str	r2, [r3, #20]
	  HAL_CAN_Start(&hcan1);
 8001882:	4818      	ldr	r0, [pc, #96]	; (80018e4 <FirstInitializationProcess+0x1d8>)
 8001884:	f000 ff92 	bl	80027ac <HAL_CAN_Start>


}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20006cc4 	.word	0x20006cc4
 8001894:	20006d80 	.word	0x20006d80
 8001898:	0800e270 	.word	0x0800e270
 800189c:	20004c30 	.word	0x20004c30
 80018a0:	0800e274 	.word	0x0800e274
 80018a4:	0800e29c 	.word	0x0800e29c
 80018a8:	20005c70 	.word	0x20005c70
 80018ac:	20004b84 	.word	0x20004b84
 80018b0:	3fe00000 	.word	0x3fe00000
 80018b4:	20004bbc 	.word	0x20004bbc
 80018b8:	20005c6c 	.word	0x20005c6c
 80018bc:	0800e2bc 	.word	0x0800e2bc
 80018c0:	0800e2c0 	.word	0x0800e2c0
 80018c4:	0800e2d8 	.word	0x0800e2d8
 80018c8:	0800e300 	.word	0x0800e300
 80018cc:	0800e328 	.word	0x0800e328
 80018d0:	20005c74 	.word	0x20005c74
 80018d4:	0800e334 	.word	0x0800e334
 80018d8:	0800e36c 	.word	0x0800e36c
 80018dc:	0800e3ac 	.word	0x0800e3ac
 80018e0:	20004b8c 	.word	0x20004b8c
 80018e4:	20004b54 	.word	0x20004b54
 80018e8:	200000f8 	.word	0x200000f8

080018ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f0:	f000 fd1a 	bl	8002328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f4:	f000 f86c 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f8:	f7ff feb8 	bl	800166c <MX_GPIO_Init>
  MX_SPI1_Init();
 80018fc:	f000 fabe 	bl	8001e7c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001900:	f004 f8a4 	bl	8005a4c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8001904:	f000 fc6c 	bl	80021e0 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8001908:	f7ff f944 	bl	8000b94 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  FirstInitializationProcess();
 800190c:	f7ff fefe 	bl	800170c <FirstInitializationProcess>


  SemWaitCommandHandle = osSemaphoreNew(1, 1, &SemWaitCommand_attributes);
 8001910:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <main+0xa4>)
 8001912:	2101      	movs	r1, #1
 8001914:	2001      	movs	r0, #1
 8001916:	f007 fe3a 	bl	800958e <osSemaphoreNew>
 800191a:	4603      	mov	r3, r0
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <main+0xa8>)
 800191e:	6013      	str	r3, [r2, #0]


QueueCANReceiveHandle = osMessageQueueNew (8, sizeof(CAN_RxHeaderTypeDef), &QueueCANReceive_attributes);
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <main+0xac>)
 8001922:	211c      	movs	r1, #28
 8001924:	2008      	movs	r0, #8
 8001926:	f007 ff75 	bl	8009814 <osMessageQueueNew>
 800192a:	4603      	mov	r3, r0
 800192c:	4a1b      	ldr	r2, [pc, #108]	; (800199c <main+0xb0>)
 800192e:	6013      	str	r3, [r2, #0]

  /* creation of ReadFileTask */
  ReadFileTaskHandle = osThreadNew(ReadFile_Fun, NULL, &ReadFileTask_attributes);
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <main+0xb4>)
 8001932:	2100      	movs	r1, #0
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <main+0xb8>)
 8001936:	f007 fd7d 	bl	8009434 <osThreadNew>
 800193a:	4603      	mov	r3, r0
 800193c:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <main+0xbc>)
 800193e:	6013      	str	r3, [r2, #0]

  /* creation of ParseCommandTas */
 ParseCommandTasHandle = osThreadNew(ParseCommand_Fun, NULL, &ParseCommandTas_attributes);
 8001940:	4a1a      	ldr	r2, [pc, #104]	; (80019ac <main+0xc0>)
 8001942:	2100      	movs	r1, #0
 8001944:	481a      	ldr	r0, [pc, #104]	; (80019b0 <main+0xc4>)
 8001946:	f007 fd75 	bl	8009434 <osThreadNew>
 800194a:	4603      	mov	r3, r0
 800194c:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <main+0xc8>)
 800194e:	6013      	str	r3, [r2, #0]

  /* creation of StoreMessageTas */
  StoreMessageTasHandle = osThreadNew(StoreMessage_Fun, NULL, &StoreMessageTas_attributes);
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <main+0xcc>)
 8001952:	2100      	movs	r1, #0
 8001954:	4819      	ldr	r0, [pc, #100]	; (80019bc <main+0xd0>)
 8001956:	f007 fd6d 	bl	8009434 <osThreadNew>
 800195a:	4603      	mov	r3, r0
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <main+0xd4>)
 800195e:	6013      	str	r3, [r2, #0]

 QueueCommandHandle = osMessageQueueNew(2,sizeof( uint8_t), &QueueCommand_attributes);
 8001960:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <main+0xd8>)
 8001962:	2101      	movs	r1, #1
 8001964:	2002      	movs	r0, #2
 8001966:	f007 ff55 	bl	8009814 <osMessageQueueNew>
 800196a:	4603      	mov	r3, r0
 800196c:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <main+0xdc>)
 800196e:	6013      	str	r3, [r2, #0]


  CANMessQueue= xQueueCreate( 7, sizeof(CANMesg_t));
 8001970:	2200      	movs	r2, #0
 8001972:	2124      	movs	r1, #36	; 0x24
 8001974:	2007      	movs	r0, #7
 8001976:	f008 fa47 	bl	8009e08 <xQueueGenericCreate>
 800197a:	4603      	mov	r3, r0
 800197c:	4a13      	ldr	r2, [pc, #76]	; (80019cc <main+0xe0>)
 800197e:	6013      	str	r3, [r2, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001980:	f007 fd0e 	bl	80093a0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001984:	f7ff fe58 	bl	8001638 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001988:	f007 fd2e 	bl	80093e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800198c:	e7fe      	b.n	800198c <main+0xa0>
 800198e:	bf00      	nop
 8001990:	0800e658 	.word	0x0800e658
 8001994:	20004bb8 	.word	0x20004bb8
 8001998:	0800e628 	.word	0x0800e628
 800199c:	20004c24 	.word	0x20004c24
 80019a0:	0800e5bc 	.word	0x0800e5bc
 80019a4:	08001aa5 	.word	0x08001aa5
 80019a8:	20004bb4 	.word	0x20004bb4
 80019ac:	0800e5e0 	.word	0x0800e5e0
 80019b0:	08001b41 	.word	0x08001b41
 80019b4:	20004b88 	.word	0x20004b88
 80019b8:	0800e604 	.word	0x0800e604
 80019bc:	08001b51 	.word	0x08001b51
 80019c0:	20006ca4 	.word	0x20006ca4
 80019c4:	0800e640 	.word	0x0800e640
 80019c8:	20004c2c 	.word	0x20004c2c
 80019cc:	20004c28 	.word	0x20004c28

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	; 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f00b fa2c 	bl	800ce3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a36:	2302      	movs	r3, #2
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a40:	2304      	movs	r3, #4
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a44:	23a8      	movs	r3, #168	; 0xa8
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fd69 	bl	800352c <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a60:	f000 f940 	bl	8001ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2105      	movs	r1, #5
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 ffca 	bl	8003a1c <HAL_RCC_ClockConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a8e:	f000 f929 	bl	8001ce4 <Error_Handler>
  }
}
 8001a92:	bf00      	nop
 8001a94:	3750      	adds	r7, #80	; 0x50
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <ReadFile_Fun>:

/* USER CODE BEGIN 4 */
//
void ReadFile_Fun(void *argument)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
//  /* Infinite loop */
	uint8_t C =0 ;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
for(;;)
{

	  	osMessageQueueGet(QueueCommandHandle, &C, 0,osWaitForever);
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <ReadFile_Fun+0x7c>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	f107 010f 	add.w	r1, r7, #15
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	2200      	movs	r2, #0
 8001abe:	f007 ff7d 	bl	80099bc <osMessageQueueGet>



	switch(C)
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b31      	cmp	r3, #49	; 0x31
 8001ac6:	d002      	beq.n	8001ace <ReadFile_Fun+0x2a>
 8001ac8:	2b32      	cmp	r3, #50	; 0x32
 8001aca:	d020      	beq.n	8001b0e <ReadFile_Fun+0x6a>

		break ;

		default :

		break ;
 8001acc:	e026      	b.n	8001b1c <ReadFile_Fun+0x78>
			f_close(&File_Struct); /* close file after each write to be safe  */
 8001ace:	4815      	ldr	r0, [pc, #84]	; (8001b24 <ReadFile_Fun+0x80>)
 8001ad0:	f007 f8f5 	bl	8008cbe <f_close>
			if(f_open(&File_Struct, "DataLogger.txt",FA_READ) == FR_OK) /* check if there is an insufficient spaces */
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4914      	ldr	r1, [pc, #80]	; (8001b28 <ReadFile_Fun+0x84>)
 8001ad8:	4812      	ldr	r0, [pc, #72]	; (8001b24 <ReadFile_Fun+0x80>)
 8001ada:	f006 fab3 	bl	8008044 <f_open>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d103      	bne.n	8001aec <ReadFile_Fun+0x48>
					printf("Data logger file is opened as read file successfully   \n");
 8001ae4:	4811      	ldr	r0, [pc, #68]	; (8001b2c <ReadFile_Fun+0x88>)
 8001ae6:	f00b fa91 	bl	800d00c <puts>
 8001aea:	e007      	b.n	8001afc <ReadFile_Fun+0x58>
					printf("error in Data logger file  !!!!!!!!!!  \n");
 8001aec:	4810      	ldr	r0, [pc, #64]	; (8001b30 <ReadFile_Fun+0x8c>)
 8001aee:	f00b fa8d 	bl	800d00c <puts>
			while (f_gets(FileBuffer, sizeof(FileBuffer), &File_Struct)) {
 8001af2:	e003      	b.n	8001afc <ReadFile_Fun+0x58>
			printf("%s " ,FileBuffer);
 8001af4:	490f      	ldr	r1, [pc, #60]	; (8001b34 <ReadFile_Fun+0x90>)
 8001af6:	4810      	ldr	r0, [pc, #64]	; (8001b38 <ReadFile_Fun+0x94>)
 8001af8:	f00b fa02 	bl	800cf00 <iprintf>
			while (f_gets(FileBuffer, sizeof(FileBuffer), &File_Struct)) {
 8001afc:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <ReadFile_Fun+0x80>)
 8001afe:	2164      	movs	r1, #100	; 0x64
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <ReadFile_Fun+0x90>)
 8001b02:	f007 f9c7 	bl	8008e94 <f_gets>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f3      	bne.n	8001af4 <ReadFile_Fun+0x50>
		break ;
 8001b0c:	e006      	b.n	8001b1c <ReadFile_Fun+0x78>
			printf("closing the file \n");
 8001b0e:	480b      	ldr	r0, [pc, #44]	; (8001b3c <ReadFile_Fun+0x98>)
 8001b10:	f00b fa7c 	bl	800d00c <puts>
			f_close(&File_Struct); /* close file after each write to be safe  */
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <ReadFile_Fun+0x80>)
 8001b16:	f007 f8d2 	bl	8008cbe <f_close>
		break ;
 8001b1a:	bf00      	nop
	  	osMessageQueueGet(QueueCommandHandle, &C, 0,osWaitForever);
 8001b1c:	e7c8      	b.n	8001ab0 <ReadFile_Fun+0xc>
 8001b1e:	bf00      	nop
 8001b20:	20004c2c 	.word	0x20004c2c
 8001b24:	20005c74 	.word	0x20005c74
 8001b28:	0800e410 	.word	0x0800e410
 8001b2c:	0800e420 	.word	0x0800e420
 8001b30:	0800e458 	.word	0x0800e458
 8001b34:	20004bc0 	.word	0x20004bc0
 8001b38:	0800e480 	.word	0x0800e480
 8001b3c:	0800e484 	.word	0x0800e484

08001b40 <ParseCommand_Fun>:
  }
}


void ParseCommand_Fun(void *argument)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f007 fd05 	bl	8009558 <osDelay>
 8001b4e:	e7fb      	b.n	8001b48 <ParseCommand_Fun+0x8>

08001b50 <StoreMessage_Fun>:

}


void StoreMessage_Fun(void *argument)
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b08b      	sub	sp, #44	; 0x2c
 8001b54:	af08      	add	r7, sp, #32
 8001b56:	6078      	str	r0, [r7, #4]

  for(;;)
 {


	memset(FileBuffer ,0 , sizeof(	FileBuffer));
 8001b58:	2264      	movs	r2, #100	; 0x64
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	483c      	ldr	r0, [pc, #240]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001b5e:	f00b f96d 	bl	800ce3c <memset>
	xQueueReceive(CANMessQueue,&CanMessReceived ,-1);
 8001b62:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <StoreMessage_Fun+0x104>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6a:	493b      	ldr	r1, [pc, #236]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f008 fc39 	bl	800a3e4 <xQueueReceive>
	if(CanMessReceived.CANHeader.IDE == CAN_ID_STD)
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <StoreMessage_Fun+0x3a>
	sprintf(FileBuffer,"%s  %x \n",CANMessID ,CanMessReceived.CANHeader.StdId );
 8001b7a:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a37      	ldr	r2, [pc, #220]	; (8001c5c <StoreMessage_Fun+0x10c>)
 8001b80:	4937      	ldr	r1, [pc, #220]	; (8001c60 <StoreMessage_Fun+0x110>)
 8001b82:	4833      	ldr	r0, [pc, #204]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001b84:	f00b fb8a 	bl	800d29c <siprintf>
 8001b88:	e006      	b.n	8001b98 <StoreMessage_Fun+0x48>
	else
		sprintf(FileBuffer,"%s  %x \n",CANMessID ,CanMessReceived.CANHeader.ExtId );
 8001b8a:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a33      	ldr	r2, [pc, #204]	; (8001c5c <StoreMessage_Fun+0x10c>)
 8001b90:	4933      	ldr	r1, [pc, #204]	; (8001c60 <StoreMessage_Fun+0x110>)
 8001b92:	482f      	ldr	r0, [pc, #188]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001b94:	f00b fb82 	bl	800d29c <siprintf>

		f_puts(FileBuffer, &File_Struct);
 8001b98:	4932      	ldr	r1, [pc, #200]	; (8001c64 <StoreMessage_Fun+0x114>)
 8001b9a:	482d      	ldr	r0, [pc, #180]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001b9c:	f007 fa2e 	bl	8008ffc <f_puts>
		memset(FileBuffer ,0 , sizeof(	FileBuffer));
 8001ba0:	2264      	movs	r2, #100	; 0x64
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	482a      	ldr	r0, [pc, #168]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001ba6:	f00b f949 	bl	800ce3c <memset>

		if(CanMessReceived.CANHeader.RTR == CAN_RTR_DATA)
 8001baa:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d13f      	bne.n	8001c32 <StoreMessage_Fun+0xe2>
		{
			sprintf(FileBuffer,"%s %s\n",CAN_RTR ,"false" );
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <StoreMessage_Fun+0x118>)
 8001bb4:	4a2d      	ldr	r2, [pc, #180]	; (8001c6c <StoreMessage_Fun+0x11c>)
 8001bb6:	492e      	ldr	r1, [pc, #184]	; (8001c70 <StoreMessage_Fun+0x120>)
 8001bb8:	4825      	ldr	r0, [pc, #148]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001bba:	f00b fb6f 	bl	800d29c <siprintf>
			f_puts(FileBuffer, &File_Struct);
 8001bbe:	4929      	ldr	r1, [pc, #164]	; (8001c64 <StoreMessage_Fun+0x114>)
 8001bc0:	4823      	ldr	r0, [pc, #140]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001bc2:	f007 fa1b 	bl	8008ffc <f_puts>
			memset(FileBuffer ,0 , sizeof(	FileBuffer));
 8001bc6:	2264      	movs	r2, #100	; 0x64
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4821      	ldr	r0, [pc, #132]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001bcc:	f00b f936 	bl	800ce3c <memset>
		sprintf(FileBuffer,"%s %x %x %x %x %x %x %x %x \n","CAN DATA :",CanMessReceived.MesgData[0], CanMessReceived.MesgData[1], \
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001bd2:	7f1b      	ldrb	r3, [r3, #28]
 8001bd4:	469c      	mov	ip, r3
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001bd8:	7f5b      	ldrb	r3, [r3, #29]
 8001bda:	461a      	mov	r2, r3
																			CanMessReceived.MesgData[2], CanMessReceived.MesgData[3],  \
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001bde:	7f9b      	ldrb	r3, [r3, #30]
		sprintf(FileBuffer,"%s %x %x %x %x %x %x %x %x \n","CAN DATA :",CanMessReceived.MesgData[0], CanMessReceived.MesgData[1], \
 8001be0:	4619      	mov	r1, r3
																			CanMessReceived.MesgData[2], CanMessReceived.MesgData[3],  \
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001be4:	7fdb      	ldrb	r3, [r3, #31]
		sprintf(FileBuffer,"%s %x %x %x %x %x %x %x %x \n","CAN DATA :",CanMessReceived.MesgData[0], CanMessReceived.MesgData[1], \
 8001be6:	4618      	mov	r0, r3
																			CanMessReceived.MesgData[4], CanMessReceived.MesgData[5],  \
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
		sprintf(FileBuffer,"%s %x %x %x %x %x %x %x %x \n","CAN DATA :",CanMessReceived.MesgData[0], CanMessReceived.MesgData[1], \
 8001bee:	461c      	mov	r4, r3
																			CanMessReceived.MesgData[4], CanMessReceived.MesgData[5],  \
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		sprintf(FileBuffer,"%s %x %x %x %x %x %x %x %x \n","CAN DATA :",CanMessReceived.MesgData[0], CanMessReceived.MesgData[1], \
 8001bf6:	461d      	mov	r5, r3
																	        CanMessReceived.MesgData[6], CanMessReceived.MesgData[7]);
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001bfa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		sprintf(FileBuffer,"%s %x %x %x %x %x %x %x %x \n","CAN DATA :",CanMessReceived.MesgData[0], CanMessReceived.MesgData[1], \
 8001bfe:	461e      	mov	r6, r3
																	        CanMessReceived.MesgData[6], CanMessReceived.MesgData[7]);
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <StoreMessage_Fun+0x108>)
 8001c02:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		sprintf(FileBuffer,"%s %x %x %x %x %x %x %x %x \n","CAN DATA :",CanMessReceived.MesgData[0], CanMessReceived.MesgData[1], \
 8001c06:	9306      	str	r3, [sp, #24]
 8001c08:	9605      	str	r6, [sp, #20]
 8001c0a:	9504      	str	r5, [sp, #16]
 8001c0c:	9403      	str	r4, [sp, #12]
 8001c0e:	9002      	str	r0, [sp, #8]
 8001c10:	9101      	str	r1, [sp, #4]
 8001c12:	9200      	str	r2, [sp, #0]
 8001c14:	4663      	mov	r3, ip
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <StoreMessage_Fun+0x124>)
 8001c18:	4917      	ldr	r1, [pc, #92]	; (8001c78 <StoreMessage_Fun+0x128>)
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001c1c:	f00b fb3e 	bl	800d29c <siprintf>
			f_puts(FileBuffer, &File_Struct);
 8001c20:	4910      	ldr	r1, [pc, #64]	; (8001c64 <StoreMessage_Fun+0x114>)
 8001c22:	480b      	ldr	r0, [pc, #44]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001c24:	f007 f9ea 	bl	8008ffc <f_puts>
			printf("%s",FileBuffer);
 8001c28:	4909      	ldr	r1, [pc, #36]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001c2a:	4814      	ldr	r0, [pc, #80]	; (8001c7c <StoreMessage_Fun+0x12c>)
 8001c2c:	f00b f968 	bl	800cf00 <iprintf>
 8001c30:	e792      	b.n	8001b58 <StoreMessage_Fun+0x8>

		}else{
			sprintf(FileBuffer,"%s %s\n",CAN_RTR ,"true ,no data " );
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <StoreMessage_Fun+0x130>)
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <StoreMessage_Fun+0x11c>)
 8001c36:	490e      	ldr	r1, [pc, #56]	; (8001c70 <StoreMessage_Fun+0x120>)
 8001c38:	4805      	ldr	r0, [pc, #20]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001c3a:	f00b fb2f 	bl	800d29c <siprintf>
			f_puts(FileBuffer, &File_Struct);
 8001c3e:	4909      	ldr	r1, [pc, #36]	; (8001c64 <StoreMessage_Fun+0x114>)
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001c42:	f007 f9db 	bl	8008ffc <f_puts>

			sprintf(FileBuffer,"\n ***************************************************************\n");
 8001c46:	490f      	ldr	r1, [pc, #60]	; (8001c84 <StoreMessage_Fun+0x134>)
 8001c48:	4801      	ldr	r0, [pc, #4]	; (8001c50 <StoreMessage_Fun+0x100>)
 8001c4a:	f00b fb27 	bl	800d29c <siprintf>
	memset(FileBuffer ,0 , sizeof(	FileBuffer));
 8001c4e:	e783      	b.n	8001b58 <StoreMessage_Fun+0x8>
 8001c50:	20004bc0 	.word	0x20004bc0
 8001c54:	20004c28 	.word	0x20004c28
 8001c58:	200000d4 	.word	0x200000d4
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	0800e498 	.word	0x0800e498
 8001c64:	20005c74 	.word	0x20005c74
 8001c68:	0800e4a4 	.word	0x0800e4a4
 8001c6c:	20000014 	.word	0x20000014
 8001c70:	0800e4ac 	.word	0x0800e4ac
 8001c74:	0800e4b4 	.word	0x0800e4b4
 8001c78:	0800e4c0 	.word	0x0800e4c0
 8001c7c:	0800e4e0 	.word	0x0800e4e0
 8001c80:	0800e4e4 	.word	0x0800e4e4
 8001c84:	0800e4f4 	.word	0x0800e4f4

08001c88 <HAL_UART_RxCpltCallback>:
 }
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) /* check uart instance first */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <HAL_UART_RxCpltCallback+0x2c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d106      	bne.n	8001caa <HAL_UART_RxCpltCallback+0x22>
	{
		osMessageQueuePut(QueueCommandHandle, &Command, 0 ,0);
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_UART_RxCpltCallback+0x30>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4905      	ldr	r1, [pc, #20]	; (8001cbc <HAL_UART_RxCpltCallback+0x34>)
 8001ca6:	f007 fe29 	bl	80098fc <osMessageQueuePut>

	}



}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20006d80 	.word	0x20006d80
 8001cb8:	20004c2c 	.word	0x20004c2c
 8001cbc:	200000f8 	.word	0x200000f8

08001cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cd2:	f000 fb4b 	bl	800236c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40001000 	.word	0x40001000

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce8:	b672      	cpsid	i
}
 8001cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cec:	e7fe      	b.n	8001cec <Error_Handler+0x8>
	...

08001cf0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <RetargetInit+0x28>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <RetargetInit+0x2c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6898      	ldr	r0, [r3, #8]
 8001d04:	2300      	movs	r3, #0
 8001d06:	2202      	movs	r2, #2
 8001d08:	2100      	movs	r1, #0
 8001d0a:	f00b fa01 	bl	800d110 <setvbuf>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20006cdc 	.word	0x20006cdc
 8001d1c:	20000050 	.word	0x20000050

08001d20 <_isatty>:

int _isatty(int fd) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db04      	blt.n	8001d38 <_isatty+0x18>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	dc01      	bgt.n	8001d38 <_isatty+0x18>
    return 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e005      	b.n	8001d44 <_isatty+0x24>

  errno = EBADF;
 8001d38:	f00a ff40 	bl	800cbbc <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2209      	movs	r2, #9
 8001d40:	601a      	str	r2, [r3, #0]
  return 0;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_write>:

int _write(int fd, char* ptr, int len) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d002      	beq.n	8001d64 <_write+0x18>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d111      	bne.n	8001d88 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <_write+0x54>)
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	f002 ffae 	bl	8004cd2 <HAL_UART_Transmit>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <_write+0x38>
      return len;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	e008      	b.n	8001d96 <_write+0x4a>
    else
      return EIO;
 8001d84:	2305      	movs	r3, #5
 8001d86:	e006      	b.n	8001d96 <_write+0x4a>
  }
  errno = EBADF;
 8001d88:	f00a ff18 	bl	800cbbc <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2209      	movs	r2, #9
 8001d90:	601a      	str	r2, [r3, #0]
  return -1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20006cdc 	.word	0x20006cdc

08001da4 <_close>:

int _close(int fd) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db04      	blt.n	8001dbc <_close+0x18>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	dc01      	bgt.n	8001dbc <_close+0x18>
    return 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e006      	b.n	8001dca <_close+0x26>

  errno = EBADF;
 8001dbc:	f00a fefe 	bl	800cbbc <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2209      	movs	r2, #9
 8001dc4:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001dde:	f00a feed 	bl	800cbbc <__errno>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2209      	movs	r2, #9
 8001de6:	601a      	str	r2, [r3, #0]
  return -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_read>:

int _read(int fd, char* ptr, int len) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d110      	bne.n	8001e28 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <_read+0x4c>)
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	2201      	movs	r2, #1
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	f002 fff0 	bl	8004df6 <HAL_UART_Receive>
 8001e16:	4603      	mov	r3, r0
 8001e18:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <_read+0x30>
      return 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e008      	b.n	8001e36 <_read+0x42>
    else
      return EIO;
 8001e24:	2305      	movs	r3, #5
 8001e26:	e006      	b.n	8001e36 <_read+0x42>
  }
  errno = EBADF;
 8001e28:	f00a fec8 	bl	800cbbc <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2209      	movs	r2, #9
 8001e30:	601a      	str	r2, [r3, #0]
  return -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20006cdc 	.word	0x20006cdc

08001e44 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db08      	blt.n	8001e66 <_fstat+0x22>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	dc05      	bgt.n	8001e66 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e60:	605a      	str	r2, [r3, #4]
    return 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e005      	b.n	8001e72 <_fstat+0x2e>
  }

  errno = EBADF;
 8001e66:	f00a fea9 	bl	800cbbc <__errno>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2209      	movs	r2, #9
 8001e6e:	601a      	str	r2, [r3, #0]
  return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001eb0:	2238      	movs	r2, #56	; 0x38
 8001eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ec8:	220a      	movs	r2, #10
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ecc:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ece:	f001 ffd3 	bl	8003e78 <HAL_SPI_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ed8:	f7ff ff04 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20006ce0 	.word	0x20006ce0
 8001ee4:	40013000 	.word	0x40013000

08001ee8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_SPI_MspInit+0x84>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d12b      	bne.n	8001f62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f42:	23e0      	movs	r3, #224	; 0xe0
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f52:	2305      	movs	r3, #5
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	; (8001f74 <HAL_SPI_MspInit+0x8c>)
 8001f5e:	f001 f91f 	bl	80031a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40013000 	.word	0x40013000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000

08001f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_MspInit+0x54>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_MspInit+0x54>)
 8001f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_MspInit+0x54>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_MspInit+0x54>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_MspInit+0x54>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_MspInit+0x54>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	210f      	movs	r1, #15
 8001fba:	f06f 0001 	mvn.w	r0, #1
 8001fbe:	f001 f833 	bl	8003028 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	; 0x30
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	2036      	movs	r0, #54	; 0x36
 8001fe6:	f001 f81f 	bl	8003028 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fea:	2036      	movs	r0, #54	; 0x36
 8001fec:	f001 f838 	bl	8003060 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_InitTick+0xa4>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_InitTick+0xa4>)
 8001ffa:	f043 0310 	orr.w	r3, r3, #16
 8001ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_InitTick+0xa4>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800200c:	f107 0210 	add.w	r2, r7, #16
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f001 fefc 	bl	8003e14 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800201c:	f001 fed2 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8002020:	4603      	mov	r3, r0
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_InitTick+0xa8>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	3b01      	subs	r3, #1
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_InitTick+0xac>)
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_InitTick+0xb0>)
 8002038:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_InitTick+0xac>)
 800203c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002040:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_InitTick+0xac>)
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_InitTick+0xac>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_InitTick+0xac>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002054:	4809      	ldr	r0, [pc, #36]	; (800207c <HAL_InitTick+0xac>)
 8002056:	f002 fb41 	bl	80046dc <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d104      	bne.n	800206a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002060:	4806      	ldr	r0, [pc, #24]	; (800207c <HAL_InitTick+0xac>)
 8002062:	f002 fb95 	bl	8004790 <HAL_TIM_Base_Start_IT>
 8002066:	4603      	mov	r3, r0
 8002068:	e000      	b.n	800206c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3730      	adds	r7, #48	; 0x30
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	431bde83 	.word	0x431bde83
 800207c:	20006d38 	.word	0x20006d38
 8002080:	40001000 	.word	0x40001000

08002084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <NMI_Handler+0x4>

0800208a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <HardFault_Handler+0x4>

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <MemManage_Handler+0x4>

08002096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <BusFault_Handler+0x4>

0800209c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <UsageFault_Handler+0x4>

080020a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <CAN1_RX0_IRQHandler+0x10>)
 80020b6:	f000 fccf 	bl	8002a58 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20004b54 	.word	0x20004b54

080020c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <USART1_IRQHandler+0x10>)
 80020ca:	f002 ff67 	bl	8004f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20006d80 	.word	0x20006d80

080020d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <TIM6_DAC_IRQHandler+0x10>)
 80020de:	f002 fbc7 	bl	8004870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20006d38 	.word	0x20006d38

080020ec <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020ec:	b5b0      	push	{r4, r5, r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(hcan);
 HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RecievedMessage, PayLoadBuffer);
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80020f6:	4a11      	ldr	r2, [pc, #68]	; (800213c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80020f8:	2100      	movs	r1, #0
 80020fa:	4811      	ldr	r0, [pc, #68]	; (8002140 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80020fc:	f000 fb9a 	bl	8002834 <HAL_CAN_GetRxMessage>
 CanMessReceived.CANHeader = RecievedMessage ;
 8002100:	4a10      	ldr	r2, [pc, #64]	; (8002144 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002104:	4614      	mov	r4, r2
 8002106:	461d      	mov	r5, r3
 8002108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800210a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800210c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 memccpy(CanMessReceived.MesgData,PayLoadBuffer,0,8);
 8002114:	2308      	movs	r3, #8
 8002116:	2200      	movs	r2, #0
 8002118:	4907      	ldr	r1, [pc, #28]	; (8002138 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800211c:	f00a fe71 	bl	800ce02 <memccpy>
// //osMessageQueuePut(QueueCANReceiveHandle, &CanMessReceived , 0 ,0 );
 xQueueSendFromISR(CANMessQueue, &CanMessReceived, NULL);
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	2300      	movs	r3, #0
 8002126:	2200      	movs	r2, #0
 8002128:	4906      	ldr	r1, [pc, #24]	; (8002144 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800212a:	f008 f833 	bl	800a194 <xQueueGenericSendFromISR>
 /* NOTE : This function Should not be modified, when the callback is needed,
           the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
           user file
  */
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bdb0      	pop	{r4, r5, r7, pc}
 8002136:	bf00      	nop
 8002138:	2000013c 	.word	0x2000013c
 800213c:	20000120 	.word	0x20000120
 8002140:	20004b54 	.word	0x20004b54
 8002144:	200000fc 	.word	0x200000fc
 8002148:	20000118 	.word	0x20000118
 800214c:	20004c28 	.word	0x20004c28

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f00a fd1c 	bl	800cbbc <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20030000 	.word	0x20030000
 80021b0:	00000aaa 	.word	0x00000aaa
 80021b4:	20000144 	.word	0x20000144
 80021b8:	20008e90 	.word	0x20008e90

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_USART1_UART_Init+0x4c>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <MX_USART1_UART_Init+0x50>)
 80021e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <MX_USART1_UART_Init+0x4c>)
 80021ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <MX_USART1_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <MX_USART1_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <MX_USART1_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <MX_USART1_UART_Init+0x4c>)
 8002206:	220c      	movs	r2, #12
 8002208:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <MX_USART1_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <MX_USART1_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_USART1_UART_Init+0x4c>)
 8002218:	f002 fd0e 	bl	8004c38 <HAL_UART_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002222:	f7ff fd5f 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20006d80 	.word	0x20006d80
 8002230:	40011000 	.word	0x40011000

08002234 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_UART_MspInit+0x94>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d134      	bne.n	80022c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_UART_MspInit+0x98>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_UART_MspInit+0x98>)
 8002260:	f043 0310 	orr.w	r3, r3, #16
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_UART_MspInit+0x98>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_UART_MspInit+0x98>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_UART_MspInit+0x98>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_UART_MspInit+0x98>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800228e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022a0:	2307      	movs	r3, #7
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4809      	ldr	r0, [pc, #36]	; (80022d0 <HAL_UART_MspInit+0x9c>)
 80022ac:	f000 ff78 	bl	80031a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2105      	movs	r1, #5
 80022b4:	2025      	movs	r0, #37	; 0x25
 80022b6:	f000 feb7 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ba:	2025      	movs	r0, #37	; 0x25
 80022bc:	f000 fed0 	bl	8003060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022c0:	bf00      	nop
 80022c2:	3728      	adds	r7, #40	; 0x28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020000 	.word	0x40020000

080022d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80022d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800230c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022da:	490e      	ldr	r1, [pc, #56]	; (8002314 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022dc:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0b      	ldr	r2, [pc, #44]	; (800231c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022f0:	4c0b      	ldr	r4, [pc, #44]	; (8002320 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022fe:	f7ff ff5d 	bl	80021bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002302:	f00a fd57 	bl	800cdb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002306:	f7ff faf1 	bl	80018ec <main>
  bx  lr    
 800230a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800230c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002314:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002318:	0800eb68 	.word	0x0800eb68
  ldr r2, =_sbss
 800231c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002320:	20008e8c 	.word	0x20008e8c

08002324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC_IRQHandler>
	...

08002328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800232c:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_Init+0x40>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <HAL_Init+0x40>)
 8002332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002336:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_Init+0x40>)
 800233e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002342:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a07      	ldr	r2, [pc, #28]	; (8002368 <HAL_Init+0x40>)
 800234a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002350:	2003      	movs	r0, #3
 8002352:	f000 fe5e 	bl	8003012 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff fe3a 	bl	8001fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800235c:	f7ff fe0c 	bl	8001f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023c00 	.word	0x40023c00

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000034 	.word	0x20000034
 8002390:	20006dc4 	.word	0x20006dc4

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20006dc4 	.word	0x20006dc4

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000034 	.word	0x20000034

080023f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0ed      	b.n	80025e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fbf4 	bl	8000c00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0202 	bic.w	r2, r2, #2
 8002426:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002428:	f7ff ffb4 	bl	8002394 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800242e:	e012      	b.n	8002456 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002430:	f7ff ffb0 	bl	8002394 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b0a      	cmp	r3, #10
 800243c:	d90b      	bls.n	8002456 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2205      	movs	r2, #5
 800244e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0c5      	b.n	80025e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e5      	bne.n	8002430 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002474:	f7ff ff8e 	bl	8002394 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800247a:	e012      	b.n	80024a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800247c:	f7ff ff8a 	bl	8002394 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b0a      	cmp	r3, #10
 8002488:	d90b      	bls.n	80024a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2205      	movs	r2, #5
 800249a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e09f      	b.n	80025e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0e5      	beq.n	800247c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7e1b      	ldrb	r3, [r3, #24]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d108      	bne.n	80024ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e007      	b.n	80024da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7e5b      	ldrb	r3, [r3, #25]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e007      	b.n	8002504 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7e9b      	ldrb	r3, [r3, #26]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d108      	bne.n	800251e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e007      	b.n	800252e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0220 	bic.w	r2, r2, #32
 800252c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7edb      	ldrb	r3, [r3, #27]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d108      	bne.n	8002548 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0210 	bic.w	r2, r2, #16
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e007      	b.n	8002558 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0210 	orr.w	r2, r2, #16
 8002556:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7f1b      	ldrb	r3, [r3, #28]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d108      	bne.n	8002572 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0208 	orr.w	r2, r2, #8
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e007      	b.n	8002582 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0208 	bic.w	r2, r2, #8
 8002580:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	7f5b      	ldrb	r3, [r3, #29]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d108      	bne.n	800259c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0204 	orr.w	r2, r2, #4
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e007      	b.n	80025ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0204 	bic.w	r2, r2, #4
 80025aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	ea42 0103 	orr.w	r1, r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002602:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d003      	beq.n	8002612 <HAL_CAN_ConfigFilter+0x26>
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	2b02      	cmp	r3, #2
 800260e:	f040 80be 	bne.w	800278e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002614:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800262c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	431a      	orrs	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2201      	movs	r2, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	401a      	ands	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d123      	bne.n	80026bc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002696:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3248      	adds	r2, #72	; 0x48
 800269c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026b2:	6979      	ldr	r1, [r7, #20]
 80026b4:	3348      	adds	r3, #72	; 0x48
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d122      	bne.n	800270a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	431a      	orrs	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3248      	adds	r2, #72	; 0x48
 80026ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002700:	6979      	ldr	r1, [r7, #20]
 8002702:	3348      	adds	r3, #72	; 0x48
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	401a      	ands	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002724:	e007      	b.n	8002736 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	431a      	orrs	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	43db      	mvns	r3, r3
 8002748:	401a      	ands	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002750:	e007      	b.n	8002762 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	431a      	orrs	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	431a      	orrs	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002780:	f023 0201 	bic.w	r2, r3, #1
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e006      	b.n	800279c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40006400 	.word	0x40006400

080027ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d12e      	bne.n	800281e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027d8:	f7ff fddc 	bl	8002394 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027de:	e012      	b.n	8002806 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027e0:	f7ff fdd8 	bl	8002394 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b0a      	cmp	r3, #10
 80027ec:	d90b      	bls.n	8002806 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2205      	movs	r2, #5
 80027fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e012      	b.n	800282c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e5      	bne.n	80027e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e006      	b.n	800282c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002848:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d003      	beq.n	8002858 <HAL_CAN_GetRxMessage+0x24>
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b02      	cmp	r3, #2
 8002854:	f040 80f3 	bne.w	8002a3e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10e      	bne.n	800287c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d116      	bne.n	800289a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0e7      	b.n	8002a4c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0d8      	b.n	8002a4c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	331b      	adds	r3, #27
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	4413      	add	r3, r2
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0204 	and.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	331b      	adds	r3, #27
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	4413      	add	r3, r2
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	0d5b      	lsrs	r3, r3, #21
 80028c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e00b      	b.n	80028ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	331b      	adds	r3, #27
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	331b      	adds	r3, #27
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0202 	and.w	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	331b      	adds	r3, #27
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	3304      	adds	r3, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	331b      	adds	r3, #27
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	b2da      	uxtb	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	331b      	adds	r3, #27
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	4413      	add	r3, r2
 800293c:	3304      	adds	r3, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	4413      	add	r3, r2
 8002952:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	4413      	add	r3, r2
 8002968:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0a1a      	lsrs	r2, r3, #8
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4413      	add	r3, r2
 8002982:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0c1a      	lsrs	r2, r3, #16
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	3302      	adds	r3, #2
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	4413      	add	r3, r2
 800299c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0e1a      	lsrs	r2, r3, #24
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	3303      	adds	r3, #3
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	3304      	adds	r3, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0a1a      	lsrs	r2, r3, #8
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	3305      	adds	r3, #5
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0c1a      	lsrs	r2, r3, #16
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	3306      	adds	r3, #6
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e1a      	lsrs	r2, r3, #24
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	3307      	adds	r3, #7
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d108      	bne.n	8002a2a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	e007      	b.n	8002a3a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0220 	orr.w	r2, r2, #32
 8002a38:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e006      	b.n	8002a4c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d07c      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2201      	movs	r2, #1
 8002aae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f983 	bl	8002dc6 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ac0:	e016      	b.n	8002af0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e00c      	b.n	8002af0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	e002      	b.n	8002af0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f989 	bl	8002e02 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d024      	beq.n	8002b44 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f963 	bl	8002dda <HAL_CAN_TxMailbox1CompleteCallback>
 8002b14:	e016      	b.n	8002b44 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
 8002b28:	e00c      	b.n	8002b44 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d004      	beq.n	8002b3e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3c:	e002      	b.n	8002b44 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f969 	bl	8002e16 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d024      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f943 	bl	8002dee <HAL_CAN_TxMailbox2CompleteCallback>
 8002b68:	e016      	b.n	8002b98 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	e00c      	b.n	8002b98 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	e002      	b.n	8002b98 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f949 	bl	8002e2a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d006      	beq.n	8002bde <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f930 	bl	8002e3e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fa78 	bl	80020ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00c      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2208      	movs	r2, #8
 8002c3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f912 	bl	8002e66 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8f9 	bl	8002e52 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2210      	movs	r2, #16
 8002c7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f8fc 	bl	8002e7a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8f5 	bl	8002e8e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d07b      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d072      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	f043 0302 	orr.w	r3, r3, #2
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d043      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d03e      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d26:	2b60      	cmp	r3, #96	; 0x60
 8002d28:	d02b      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x32a>
 8002d2a:	2b60      	cmp	r3, #96	; 0x60
 8002d2c:	d82e      	bhi.n	8002d8c <HAL_CAN_IRQHandler+0x334>
 8002d2e:	2b50      	cmp	r3, #80	; 0x50
 8002d30:	d022      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x320>
 8002d32:	2b50      	cmp	r3, #80	; 0x50
 8002d34:	d82a      	bhi.n	8002d8c <HAL_CAN_IRQHandler+0x334>
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d019      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x316>
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d826      	bhi.n	8002d8c <HAL_CAN_IRQHandler+0x334>
 8002d3e:	2b30      	cmp	r3, #48	; 0x30
 8002d40:	d010      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x30c>
 8002d42:	2b30      	cmp	r3, #48	; 0x30
 8002d44:	d822      	bhi.n	8002d8c <HAL_CAN_IRQHandler+0x334>
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d002      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x2f8>
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d005      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d4e:	e01d      	b.n	8002d8c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	f043 0308 	orr.w	r3, r3, #8
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d58:	e019      	b.n	8002d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f043 0310 	orr.w	r3, r3, #16
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d62:	e014      	b.n	8002d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f043 0320 	orr.w	r3, r3, #32
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d6c:	e00f      	b.n	8002d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d76:	e00a      	b.n	8002d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d80:	e005      	b.n	8002d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d8a:	e000      	b.n	8002d8e <HAL_CAN_IRQHandler+0x336>
            break;
 8002d8c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d9c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2204      	movs	r2, #4
 8002da4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f872 	bl	8002ea2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eea:	4a04      	ldr	r2, [pc, #16]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	60d3      	str	r3, [r2, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <__NVIC_GetPriorityGrouping+0x18>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 0307 	and.w	r3, r3, #7
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4907      	ldr	r1, [pc, #28]	; (8002f54 <__NVIC_EnableIRQ+0x38>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	db0a      	blt.n	8002f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	490c      	ldr	r1, [pc, #48]	; (8002fa4 <__NVIC_SetPriority+0x4c>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	0112      	lsls	r2, r2, #4
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f80:	e00a      	b.n	8002f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4908      	ldr	r1, [pc, #32]	; (8002fa8 <__NVIC_SetPriority+0x50>)
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	3b04      	subs	r3, #4
 8002f90:	0112      	lsls	r2, r2, #4
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	440b      	add	r3, r1
 8002f96:	761a      	strb	r2, [r3, #24]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000e100 	.word	0xe000e100
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	; 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f1c3 0307 	rsb	r3, r3, #7
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	bf28      	it	cs
 8002fca:	2304      	movcs	r3, #4
 8002fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d902      	bls.n	8002fdc <NVIC_EncodePriority+0x30>
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3b03      	subs	r3, #3
 8002fda:	e000      	b.n	8002fde <NVIC_EncodePriority+0x32>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	401a      	ands	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	43d9      	mvns	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	4313      	orrs	r3, r2
         );
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff4c 	bl	8002eb8 <__NVIC_SetPriorityGrouping>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800303a:	f7ff ff61 	bl	8002f00 <__NVIC_GetPriorityGrouping>
 800303e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f7ff ffb1 	bl	8002fac <NVIC_EncodePriority>
 800304a:	4602      	mov	r2, r0
 800304c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff80 	bl	8002f58 <__NVIC_SetPriority>
}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff54 	bl	8002f1c <__NVIC_EnableIRQ>
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800308a:	f7ff f983 	bl	8002394 <HAL_GetTick>
 800308e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d008      	beq.n	80030ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e052      	b.n	8003154 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0216 	bic.w	r2, r2, #22
 80030bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_DMA_Abort+0x62>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0208 	bic.w	r2, r2, #8
 80030ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030fe:	e013      	b.n	8003128 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003100:	f7ff f948 	bl	8002394 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b05      	cmp	r3, #5
 800310c:	d90c      	bls.n	8003128 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2203      	movs	r2, #3
 8003120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e015      	b.n	8003154 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e4      	bne.n	8003100 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	223f      	movs	r2, #63	; 0x3f
 800313c:	409a      	lsls	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00c      	b.n	8003194 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2205      	movs	r2, #5
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e177      	b.n	80034ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f040 8166 	bne.w	80034a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d005      	beq.n	80031f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d130      	bne.n	8003254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b03      	cmp	r3, #3
 800325e:	d017      	beq.n	8003290 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d123      	bne.n	80032e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	08da      	lsrs	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3208      	adds	r2, #8
 80032a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	08da      	lsrs	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3208      	adds	r2, #8
 80032de:	69b9      	ldr	r1, [r7, #24]
 80032e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80c0 	beq.w	80034a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b66      	ldr	r3, [pc, #408]	; (80034c4 <HAL_GPIO_Init+0x324>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	4a65      	ldr	r2, [pc, #404]	; (80034c4 <HAL_GPIO_Init+0x324>)
 8003330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003334:	6453      	str	r3, [r2, #68]	; 0x44
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_GPIO_Init+0x324>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003342:	4a61      	ldr	r2, [pc, #388]	; (80034c8 <HAL_GPIO_Init+0x328>)
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	3302      	adds	r3, #2
 800334a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	220f      	movs	r2, #15
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a58      	ldr	r2, [pc, #352]	; (80034cc <HAL_GPIO_Init+0x32c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d037      	beq.n	80033de <HAL_GPIO_Init+0x23e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a57      	ldr	r2, [pc, #348]	; (80034d0 <HAL_GPIO_Init+0x330>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d031      	beq.n	80033da <HAL_GPIO_Init+0x23a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a56      	ldr	r2, [pc, #344]	; (80034d4 <HAL_GPIO_Init+0x334>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d02b      	beq.n	80033d6 <HAL_GPIO_Init+0x236>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a55      	ldr	r2, [pc, #340]	; (80034d8 <HAL_GPIO_Init+0x338>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d025      	beq.n	80033d2 <HAL_GPIO_Init+0x232>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a54      	ldr	r2, [pc, #336]	; (80034dc <HAL_GPIO_Init+0x33c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01f      	beq.n	80033ce <HAL_GPIO_Init+0x22e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a53      	ldr	r2, [pc, #332]	; (80034e0 <HAL_GPIO_Init+0x340>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d019      	beq.n	80033ca <HAL_GPIO_Init+0x22a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_GPIO_Init+0x344>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_GPIO_Init+0x226>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a51      	ldr	r2, [pc, #324]	; (80034e8 <HAL_GPIO_Init+0x348>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00d      	beq.n	80033c2 <HAL_GPIO_Init+0x222>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a50      	ldr	r2, [pc, #320]	; (80034ec <HAL_GPIO_Init+0x34c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d007      	beq.n	80033be <HAL_GPIO_Init+0x21e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a4f      	ldr	r2, [pc, #316]	; (80034f0 <HAL_GPIO_Init+0x350>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_GPIO_Init+0x21a>
 80033b6:	2309      	movs	r3, #9
 80033b8:	e012      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033ba:	230a      	movs	r3, #10
 80033bc:	e010      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033be:	2308      	movs	r3, #8
 80033c0:	e00e      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033c2:	2307      	movs	r3, #7
 80033c4:	e00c      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033c6:	2306      	movs	r3, #6
 80033c8:	e00a      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033ca:	2305      	movs	r3, #5
 80033cc:	e008      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033ce:	2304      	movs	r3, #4
 80033d0:	e006      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033d2:	2303      	movs	r3, #3
 80033d4:	e004      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e002      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_GPIO_Init+0x240>
 80033de:	2300      	movs	r3, #0
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	f002 0203 	and.w	r2, r2, #3
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	4093      	lsls	r3, r2
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f0:	4935      	ldr	r1, [pc, #212]	; (80034c8 <HAL_GPIO_Init+0x328>)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_GPIO_Init+0x354>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003422:	4a34      	ldr	r2, [pc, #208]	; (80034f4 <HAL_GPIO_Init+0x354>)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003428:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <HAL_GPIO_Init+0x354>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800344c:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <HAL_GPIO_Init+0x354>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_GPIO_Init+0x354>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003476:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_GPIO_Init+0x354>)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_GPIO_Init+0x354>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <HAL_GPIO_Init+0x354>)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3301      	adds	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b0f      	cmp	r3, #15
 80034b0:	f67f ae84 	bls.w	80031bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40013800 	.word	0x40013800
 80034cc:	40020000 	.word	0x40020000
 80034d0:	40020400 	.word	0x40020400
 80034d4:	40020800 	.word	0x40020800
 80034d8:	40020c00 	.word	0x40020c00
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40021400 	.word	0x40021400
 80034e4:	40021800 	.word	0x40021800
 80034e8:	40021c00 	.word	0x40021c00
 80034ec:	40022000 	.word	0x40022000
 80034f0:	40022400 	.word	0x40022400
 80034f4:	40013c00 	.word	0x40013c00

080034f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
 8003504:	4613      	mov	r3, r2
 8003506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003508:	787b      	ldrb	r3, [r7, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003514:	e003      	b.n	800351e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	041a      	lsls	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	619a      	str	r2, [r3, #24]
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e264      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d075      	beq.n	8003636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354a:	4ba3      	ldr	r3, [pc, #652]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b04      	cmp	r3, #4
 8003554:	d00c      	beq.n	8003570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003556:	4ba0      	ldr	r3, [pc, #640]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355e:	2b08      	cmp	r3, #8
 8003560:	d112      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003562:	4b9d      	ldr	r3, [pc, #628]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800356e:	d10b      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	4b99      	ldr	r3, [pc, #612]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05b      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d157      	bne.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e23f      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x74>
 8003592:	4b91      	ldr	r3, [pc, #580]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a90      	ldr	r2, [pc, #576]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e01d      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x98>
 80035aa:	4b8b      	ldr	r3, [pc, #556]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a8a      	ldr	r2, [pc, #552]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a87      	ldr	r2, [pc, #540]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035c4:	4b84      	ldr	r3, [pc, #528]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a83      	ldr	r2, [pc, #524]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a80      	ldr	r2, [pc, #512]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fed6 	bl	8002394 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe fed2 	bl	8002394 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e204      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xc0>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe fec2 	bl	8002394 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe febe 	bl	8002394 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1f0      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d063      	beq.n	800370a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003642:	4b65      	ldr	r3, [pc, #404]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b62      	ldr	r3, [pc, #392]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003656:	2b08      	cmp	r3, #8
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b5c      	ldr	r3, [pc, #368]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1c4      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b56      	ldr	r3, [pc, #344]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4952      	ldr	r1, [pc, #328]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b4f      	ldr	r3, [pc, #316]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe fe77 	bl	8002394 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fe73 	bl	8002394 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1a5      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b46      	ldr	r3, [pc, #280]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b43      	ldr	r3, [pc, #268]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4940      	ldr	r1, [pc, #256]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fe56 	bl	8002394 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fe fe52 	bl	8002394 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e184      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d030      	beq.n	8003778 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b30      	ldr	r3, [pc, #192]	; (80037e0 <HAL_RCC_OscConfig+0x2b4>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fe36 	bl	8002394 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fe32 	bl	8002394 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e164      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x200>
 800374a:	e015      	b.n	8003778 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_OscConfig+0x2b4>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fe fe1f 	bl	8002394 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375a:	f7fe fe1b 	bl	8002394 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e14d      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 800376e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a0 	beq.w	80038c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b2:	2301      	movs	r3, #1
 80037b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_OscConfig+0x2b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d121      	bne.n	8003806 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c2:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_RCC_OscConfig+0x2b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <HAL_RCC_OscConfig+0x2b8>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ce:	f7fe fde1 	bl	8002394 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	e011      	b.n	80037fa <HAL_RCC_OscConfig+0x2ce>
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800
 80037dc:	42470000 	.word	0x42470000
 80037e0:	42470e80 	.word	0x42470e80
 80037e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e8:	f7fe fdd4 	bl	8002394 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e106      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fa:	4b85      	ldr	r3, [pc, #532]	; (8003a10 <HAL_RCC_OscConfig+0x4e4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x2f0>
 800380e:	4b81      	ldr	r3, [pc, #516]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a80      	ldr	r2, [pc, #512]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	e01c      	b.n	8003856 <HAL_RCC_OscConfig+0x32a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b05      	cmp	r3, #5
 8003822:	d10c      	bne.n	800383e <HAL_RCC_OscConfig+0x312>
 8003824:	4b7b      	ldr	r3, [pc, #492]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a7a      	ldr	r2, [pc, #488]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 800382a:	f043 0304 	orr.w	r3, r3, #4
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	4b78      	ldr	r3, [pc, #480]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a77      	ldr	r2, [pc, #476]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
 800383c:	e00b      	b.n	8003856 <HAL_RCC_OscConfig+0x32a>
 800383e:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4a74      	ldr	r2, [pc, #464]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	6713      	str	r3, [r2, #112]	; 0x70
 800384a:	4b72      	ldr	r3, [pc, #456]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a71      	ldr	r2, [pc, #452]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d015      	beq.n	800388a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fe fd99 	bl	8002394 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fe fd95 	bl	8002394 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	; 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e0c5      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387c:	4b65      	ldr	r3, [pc, #404]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0ee      	beq.n	8003866 <HAL_RCC_OscConfig+0x33a>
 8003888:	e014      	b.n	80038b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388a:	f7fe fd83 	bl	8002394 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fe fd7f 	bl	8002394 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0af      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a8:	4b5a      	ldr	r3, [pc, #360]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ee      	bne.n	8003892 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ba:	4b56      	ldr	r3, [pc, #344]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 80038c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 809b 	beq.w	8003a06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d05c      	beq.n	8003996 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d141      	bne.n	8003968 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e4:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <HAL_RCC_OscConfig+0x4ec>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fe fd53 	bl	8002394 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fe fd4f 	bl	8002394 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e081      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003904:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	019b      	lsls	r3, r3, #6
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	3b01      	subs	r3, #1
 800392a:	041b      	lsls	r3, r3, #16
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	061b      	lsls	r3, r3, #24
 8003934:	4937      	ldr	r1, [pc, #220]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <HAL_RCC_OscConfig+0x4ec>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe fd28 	bl	8002394 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fd24 	bl	8002394 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e056      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395a:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x41c>
 8003966:	e04e      	b.n	8003a06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_OscConfig+0x4ec>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7fe fd11 	bl	8002394 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003976:	f7fe fd0d 	bl	8002394 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e03f      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003988:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f0      	bne.n	8003976 <HAL_RCC_OscConfig+0x44a>
 8003994:	e037      	b.n	8003a06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e032      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <HAL_RCC_OscConfig+0x4e8>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d028      	beq.n	8003a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d121      	bne.n	8003a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d11a      	bne.n	8003a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d2:	4013      	ands	r3, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039da:	4293      	cmp	r3, r2
 80039dc:	d111      	bne.n	8003a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	3b01      	subs	r3, #1
 80039ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40007000 	.word	0x40007000
 8003a14:	40023800 	.word	0x40023800
 8003a18:	42470060 	.word	0x42470060

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0cc      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b68      	ldr	r3, [pc, #416]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d90c      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b63      	ldr	r3, [pc, #396]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b8      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a70:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a88:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b50      	ldr	r3, [pc, #320]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	494d      	ldr	r1, [pc, #308]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d044      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d119      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e067      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4934      	ldr	r1, [pc, #208]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fc42 	bl	8002394 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe fc3e 	bl	8002394 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e04f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d20c      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e032      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4916      	ldr	r1, [pc, #88]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ba2:	f000 f821 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490a      	ldr	r1, [pc, #40]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fa04 	bl	8001fd0 <HAL_InitTick>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	0800e668 	.word	0x0800e668
 8003be0:	2000002c 	.word	0x2000002c
 8003be4:	20000030 	.word	0x20000030

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c00:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d00d      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x40>
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	f200 80bd 	bhi.w	8003d8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x34>
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1a:	e0b7      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b61      	ldr	r3, [pc, #388]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c1e:	60bb      	str	r3, [r7, #8]
       break;
 8003c20:	e0b7      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c22:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c24:	60bb      	str	r3, [r7, #8]
      break;
 8003c26:	e0b4      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c28:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c32:	4b5b      	ldr	r3, [pc, #364]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d04d      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3e:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	461a      	mov	r2, r3
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	ea02 0800 	and.w	r8, r2, r0
 8003c56:	ea03 0901 	and.w	r9, r3, r1
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	014b      	lsls	r3, r1, #5
 8003c68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c6c:	0142      	lsls	r2, r0, #5
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	ebb0 0008 	subs.w	r0, r0, r8
 8003c76:	eb61 0109 	sbc.w	r1, r1, r9
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	018b      	lsls	r3, r1, #6
 8003c84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c88:	0182      	lsls	r2, r0, #6
 8003c8a:	1a12      	subs	r2, r2, r0
 8003c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c90:	f04f 0000 	mov.w	r0, #0
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	00d9      	lsls	r1, r3, #3
 8003c9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c9e:	00d0      	lsls	r0, r2, #3
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	eb12 0208 	adds.w	r2, r2, r8
 8003ca8:	eb43 0309 	adc.w	r3, r3, r9
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	0259      	lsls	r1, r3, #9
 8003cb6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003cba:	0250      	lsls	r0, r2, #9
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	f7fc fde6 	bl	800089c <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	e04a      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cda:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	099b      	lsrs	r3, r3, #6
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cea:	f04f 0100 	mov.w	r1, #0
 8003cee:	ea02 0400 	and.w	r4, r2, r0
 8003cf2:	ea03 0501 	and.w	r5, r3, r1
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	014b      	lsls	r3, r1, #5
 8003d04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d08:	0142      	lsls	r2, r0, #5
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	1b00      	subs	r0, r0, r4
 8003d10:	eb61 0105 	sbc.w	r1, r1, r5
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	018b      	lsls	r3, r1, #6
 8003d1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d22:	0182      	lsls	r2, r0, #6
 8003d24:	1a12      	subs	r2, r2, r0
 8003d26:	eb63 0301 	sbc.w	r3, r3, r1
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	00d9      	lsls	r1, r3, #3
 8003d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d38:	00d0      	lsls	r0, r2, #3
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	1912      	adds	r2, r2, r4
 8003d40:	eb45 0303 	adc.w	r3, r5, r3
 8003d44:	f04f 0000 	mov.w	r0, #0
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	0299      	lsls	r1, r3, #10
 8003d4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d52:	0290      	lsls	r0, r2, #10
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	f7fc fd9a 	bl	800089c <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	60bb      	str	r3, [r7, #8]
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d8e:	60bb      	str	r3, [r7, #8]
      break;
 8003d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d92:	68bb      	ldr	r3, [r7, #8]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	007a1200 	.word	0x007a1200

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	2000002c 	.word	0x2000002c

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	0800e678 	.word	0x0800e678

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff ffdc 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	0800e678 	.word	0x0800e678

08003e14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	220f      	movs	r2, #15
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RCC_GetClockConfig+0x60>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 020f 	and.w	r2, r3, #15
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40023c00 	.word	0x40023c00

08003e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07b      	b.n	8003f82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9a:	d009      	beq.n	8003eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	61da      	str	r2, [r3, #28]
 8003ea2:	e005      	b.n	8003eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fe f80c 	bl	8001ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	ea42 0103 	orr.w	r1, r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	f003 0104 	and.w	r1, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	f003 0210 	and.w	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b088      	sub	sp, #32
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_SPI_Transmit+0x22>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e126      	b.n	80041fa <HAL_SPI_Transmit+0x270>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb4:	f7fe f9ee 	bl	8002394 <HAL_GetTick>
 8003fb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fce:	e10b      	b.n	80041e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_SPI_Transmit+0x52>
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fe0:	e102      	b.n	80041e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d10f      	bne.n	800404a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004048:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d007      	beq.n	8004068 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004066:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004070:	d14b      	bne.n	800410a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_SPI_Transmit+0xf6>
 800407a:	8afb      	ldrh	r3, [r7, #22]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d13e      	bne.n	80040fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	881a      	ldrh	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	1c9a      	adds	r2, r3, #2
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040a4:	e02b      	b.n	80040fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d112      	bne.n	80040da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	881a      	ldrh	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	1c9a      	adds	r2, r3, #2
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80040d8:	e011      	b.n	80040fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040da:	f7fe f95b 	bl	8002394 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d803      	bhi.n	80040f2 <HAL_SPI_Transmit+0x168>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d102      	bne.n	80040f8 <HAL_SPI_Transmit+0x16e>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040fc:	e074      	b.n	80041e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1ce      	bne.n	80040a6 <HAL_SPI_Transmit+0x11c>
 8004108:	e04c      	b.n	80041a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_SPI_Transmit+0x18e>
 8004112:	8afb      	ldrh	r3, [r7, #22]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d140      	bne.n	800419a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800413e:	e02c      	b.n	800419a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d113      	bne.n	8004176 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	7812      	ldrb	r2, [r2, #0]
 800415a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	86da      	strh	r2, [r3, #54]	; 0x36
 8004174:	e011      	b.n	800419a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004176:	f7fe f90d 	bl	8002394 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d803      	bhi.n	800418e <HAL_SPI_Transmit+0x204>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d102      	bne.n	8004194 <HAL_SPI_Transmit+0x20a>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004198:	e026      	b.n	80041e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1cd      	bne.n	8004140 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	6839      	ldr	r1, [r7, #0]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fa55 	bl	8004658 <SPI_EndRxTxTransaction>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e000      	b.n	80041e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b08c      	sub	sp, #48	; 0x30
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004210:	2301      	movs	r3, #1
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x26>
 8004224:	2302      	movs	r3, #2
 8004226:	e18a      	b.n	800453e <HAL_SPI_TransmitReceive+0x33c>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004230:	f7fe f8b0 	bl	8002394 <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800423c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800424a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800424e:	2b01      	cmp	r3, #1
 8004250:	d00f      	beq.n	8004272 <HAL_SPI_TransmitReceive+0x70>
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004258:	d107      	bne.n	800426a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <HAL_SPI_TransmitReceive+0x68>
 8004262:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004266:	2b04      	cmp	r3, #4
 8004268:	d003      	beq.n	8004272 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800426a:	2302      	movs	r3, #2
 800426c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004270:	e15b      	b.n	800452a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x82>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x82>
 800427e:	887b      	ldrh	r3, [r7, #2]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800428a:	e14e      	b.n	800452a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b04      	cmp	r3, #4
 8004296:	d003      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2205      	movs	r2, #5
 800429c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	887a      	ldrh	r2, [r7, #2]
 80042b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	887a      	ldrh	r2, [r7, #2]
 80042c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d007      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fc:	d178      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_SPI_TransmitReceive+0x10a>
 8004306:	8b7b      	ldrh	r3, [r7, #26]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d166      	bne.n	80043da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	881a      	ldrh	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	1c9a      	adds	r2, r3, #2
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004330:	e053      	b.n	80043da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d11b      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x176>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_SPI_TransmitReceive+0x176>
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d113      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	881a      	ldrh	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	1c9a      	adds	r2, r3, #2
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d119      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x1b8>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d014      	beq.n	80043ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	b292      	uxth	r2, r2
 800439c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	1c9a      	adds	r2, r3, #2
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043b6:	2301      	movs	r3, #1
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043ba:	f7fd ffeb 	bl	8002394 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d807      	bhi.n	80043da <HAL_SPI_TransmitReceive+0x1d8>
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d003      	beq.n	80043da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043d8:	e0a7      	b.n	800452a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1a6      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x130>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1a1      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x130>
 80043ee:	e07c      	b.n	80044ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x1fc>
 80043f8:	8b7b      	ldrh	r3, [r7, #26]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d16b      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004424:	e057      	b.n	80044d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b02      	cmp	r3, #2
 8004432:	d11c      	bne.n	800446e <HAL_SPI_TransmitReceive+0x26c>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d017      	beq.n	800446e <HAL_SPI_TransmitReceive+0x26c>
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d114      	bne.n	800446e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d119      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x2ae>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d014      	beq.n	80044b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ac:	2301      	movs	r3, #1
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044b0:	f7fd ff70 	bl	8002394 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044bc:	429a      	cmp	r2, r3
 80044be:	d803      	bhi.n	80044c8 <HAL_SPI_TransmitReceive+0x2c6>
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d102      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x2cc>
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044d4:	e029      	b.n	800452a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1a2      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x224>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d19d      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f8b2 	bl	8004658 <SPI_EndRxTxTransaction>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004506:	e010      	b.n	800452a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	e000      	b.n	800452a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004528:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800453a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800453e:	4618      	mov	r0, r3
 8004540:	3730      	adds	r7, #48	; 0x30
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004558:	f7fd ff1c 	bl	8002394 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4413      	add	r3, r2
 8004566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004568:	f7fd ff14 	bl	8002394 <HAL_GetTick>
 800456c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800456e:	4b39      	ldr	r3, [pc, #228]	; (8004654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	015b      	lsls	r3, r3, #5
 8004574:	0d1b      	lsrs	r3, r3, #20
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800457e:	e054      	b.n	800462a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d050      	beq.n	800462a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004588:	f7fd ff04 	bl	8002394 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	429a      	cmp	r2, r3
 8004596:	d902      	bls.n	800459e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d13d      	bne.n	800461a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b6:	d111      	bne.n	80045dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c0:	d004      	beq.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d107      	bne.n	80045dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e4:	d10f      	bne.n	8004606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e017      	b.n	800464a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	3b01      	subs	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	429a      	cmp	r2, r3
 8004646:	d19b      	bne.n	8004580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	2000002c 	.word	0x2000002c

08004658 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <SPI_EndRxTxTransaction+0x7c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <SPI_EndRxTxTransaction+0x80>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	0d5b      	lsrs	r3, r3, #21
 8004670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004682:	d112      	bne.n	80046aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2200      	movs	r2, #0
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff ff5a 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e00f      	b.n	80046ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d0f2      	beq.n	80046aa <SPI_EndRxTxTransaction+0x52>
 80046c4:	e000      	b.n	80046c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80046c6:	bf00      	nop
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2000002c 	.word	0x2000002c
 80046d8:	165e9f81 	.word	0x165e9f81

080046dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e041      	b.n	8004772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f839 	bl	800477a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f000 f9d8 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e04e      	b.n	8004846 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a23      	ldr	r2, [pc, #140]	; (8004854 <HAL_TIM_Base_Start_IT+0xc4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d01d      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1f      	ldr	r2, [pc, #124]	; (8004858 <HAL_TIM_Base_Start_IT+0xc8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1e      	ldr	r2, [pc, #120]	; (800485c <HAL_TIM_Base_Start_IT+0xcc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <HAL_TIM_Base_Start_IT+0xd0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1b      	ldr	r2, [pc, #108]	; (8004864 <HAL_TIM_Base_Start_IT+0xd4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <HAL_TIM_Base_Start_IT+0xd8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a18      	ldr	r2, [pc, #96]	; (800486c <HAL_TIM_Base_Start_IT+0xdc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d010      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	e007      	b.n	8004844 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40010400 	.word	0x40010400
 8004868:	40014000 	.word	0x40014000
 800486c:	40001800 	.word	0x40001800

08004870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d122      	bne.n	80048cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b02      	cmp	r3, #2
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0202 	mvn.w	r2, #2
 800489c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8ee 	bl	8004a94 <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8e0 	bl	8004a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8f1 	bl	8004aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d122      	bne.n	8004920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0204 	mvn.w	r2, #4
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8c4 	bl	8004a94 <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8b6 	bl	8004a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f8c7 	bl	8004aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b08      	cmp	r3, #8
 800492c:	d122      	bne.n	8004974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b08      	cmp	r3, #8
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0208 	mvn.w	r2, #8
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2204      	movs	r2, #4
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f89a 	bl	8004a94 <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f88c 	bl	8004a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f89d 	bl	8004aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b10      	cmp	r3, #16
 8004980:	d122      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b10      	cmp	r3, #16
 800498e:	d11b      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0210 	mvn.w	r2, #16
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2208      	movs	r2, #8
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f870 	bl	8004a94 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f862 	bl	8004a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f873 	bl	8004aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0201 	mvn.w	r2, #1
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd f966 	bl	8001cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d10e      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0c:	2b80      	cmp	r3, #128	; 0x80
 8004a0e:	d107      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f902 	bl	8004c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d10e      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d107      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f838 	bl	8004abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d10e      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d107      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0220 	mvn.w	r2, #32
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8cc 	bl	8004c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a40      	ldr	r2, [pc, #256]	; (8004be4 <TIM_Base_SetConfig+0x114>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d013      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d00f      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a3d      	ldr	r2, [pc, #244]	; (8004be8 <TIM_Base_SetConfig+0x118>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3c      	ldr	r2, [pc, #240]	; (8004bec <TIM_Base_SetConfig+0x11c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3b      	ldr	r2, [pc, #236]	; (8004bf0 <TIM_Base_SetConfig+0x120>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3a      	ldr	r2, [pc, #232]	; (8004bf4 <TIM_Base_SetConfig+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d108      	bne.n	8004b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <TIM_Base_SetConfig+0x114>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d02b      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d027      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a2c      	ldr	r2, [pc, #176]	; (8004be8 <TIM_Base_SetConfig+0x118>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d023      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2b      	ldr	r2, [pc, #172]	; (8004bec <TIM_Base_SetConfig+0x11c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01f      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <TIM_Base_SetConfig+0x120>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01b      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a29      	ldr	r2, [pc, #164]	; (8004bf4 <TIM_Base_SetConfig+0x124>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d017      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <TIM_Base_SetConfig+0x128>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <TIM_Base_SetConfig+0x12c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00f      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a26      	ldr	r2, [pc, #152]	; (8004c00 <TIM_Base_SetConfig+0x130>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <TIM_Base_SetConfig+0x134>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <TIM_Base_SetConfig+0x138>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a23      	ldr	r2, [pc, #140]	; (8004c0c <TIM_Base_SetConfig+0x13c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d108      	bne.n	8004b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <TIM_Base_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_Base_SetConfig+0xf8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <TIM_Base_SetConfig+0x124>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d103      	bne.n	8004bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	615a      	str	r2, [r3, #20]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40010400 	.word	0x40010400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	40001800 	.word	0x40001800
 8004c08:	40001c00 	.word	0x40001c00
 8004c0c:	40002000 	.word	0x40002000

08004c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e03f      	b.n	8004cca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd fae8 	bl	8002234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2224      	movs	r2, #36	; 0x24
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fd1d 	bl	80056bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08a      	sub	sp, #40	; 0x28
 8004cd6:	af02      	add	r7, sp, #8
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d17c      	bne.n	8004dec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_UART_Transmit+0x2c>
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e075      	b.n	8004dee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Transmit+0x3e>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e06e      	b.n	8004dee <HAL_UART_Transmit+0x11c>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2221      	movs	r2, #33	; 0x21
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d26:	f7fd fb35 	bl	8002394 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d40:	d108      	bne.n	8004d54 <HAL_UART_Transmit+0x82>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e003      	b.n	8004d5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d64:	e02a      	b.n	8004dbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fadf 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e036      	b.n	8004dee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	3302      	adds	r3, #2
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e007      	b.n	8004dae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	3301      	adds	r3, #1
 8004dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1cf      	bne.n	8004d66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2140      	movs	r1, #64	; 0x40
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 faaf 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e006      	b.n	8004dee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	; 0x28
 8004dfa:	af02      	add	r7, sp, #8
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	f040 808c 	bne.w	8004f30 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_UART_Receive+0x2e>
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e084      	b.n	8004f32 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Receive+0x40>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e07d      	b.n	8004f32 <HAL_UART_Receive+0x13c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2222      	movs	r2, #34	; 0x22
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e52:	f7fd fa9f 	bl	8002394 <HAL_GetTick>
 8004e56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6c:	d108      	bne.n	8004e80 <HAL_UART_Receive+0x8a>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d104      	bne.n	8004e80 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	e003      	b.n	8004e88 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e90:	e043      	b.n	8004f1a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fa49 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e042      	b.n	8004f32 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	e01f      	b.n	8004f0c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d007      	beq.n	8004ee6 <HAL_UART_Receive+0xf0>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <HAL_UART_Receive+0xfe>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e008      	b.n	8004f06 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1b6      	bne.n	8004e92 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	4613      	mov	r3, r2
 8004f46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d11d      	bne.n	8004f90 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_UART_Receive_IT+0x26>
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e016      	b.n	8004f92 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Receive_IT+0x38>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e00f      	b.n	8004f92 <HAL_UART_Receive_IT+0x58>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	461a      	mov	r2, r3
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 fa1e 	bl	80053c8 <UART_Start_Receive_IT>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	e000      	b.n	8004f92 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10d      	bne.n	8004fee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_UART_IRQHandler+0x52>
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fad1 	bl	800558e <UART_Receive_IT>
      return;
 8004fec:	e17c      	b.n	80052e8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80b1 	beq.w	8005158 <HAL_UART_IRQHandler+0x1bc>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d105      	bne.n	800500c <HAL_UART_IRQHandler+0x70>
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80a6 	beq.w	8005158 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_UART_IRQHandler+0x90>
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_UART_IRQHandler+0xb0>
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f043 0202 	orr.w	r2, r3, #2
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_UART_IRQHandler+0xd0>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	f043 0204 	orr.w	r2, r3, #4
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00f      	beq.n	8005096 <HAL_UART_IRQHandler+0xfa>
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_UART_IRQHandler+0xee>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0208 	orr.w	r2, r3, #8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 811f 	beq.w	80052de <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_UART_IRQHandler+0x11e>
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fa6a 	bl	800558e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <HAL_UART_IRQHandler+0x146>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d031      	beq.n	8005146 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f9aa 	bl	800543c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b40      	cmp	r3, #64	; 0x40
 80050f4:	d123      	bne.n	800513e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005104:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	2b00      	cmp	r3, #0
 800510c:	d013      	beq.n	8005136 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	4a77      	ldr	r2, [pc, #476]	; (80052f0 <HAL_UART_IRQHandler+0x354>)
 8005114:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe f81e 	bl	800315c <HAL_DMA_Abort_IT>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005134:	e00e      	b.n	8005154 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8e6 	bl	8005308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	e00a      	b.n	8005154 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8e2 	bl	8005308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	e006      	b.n	8005154 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8de 	bl	8005308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005152:	e0c4      	b.n	80052de <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	bf00      	nop
    return;
 8005156:	e0c2      	b.n	80052de <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	2b01      	cmp	r3, #1
 800515e:	f040 80a2 	bne.w	80052a6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 809c 	beq.w	80052a6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8096 	beq.w	80052a6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d14f      	bne.n	800523e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80051a8:	8a3b      	ldrh	r3, [r7, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8099 	beq.w	80052e2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051b4:	8a3a      	ldrh	r2, [r7, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	f080 8093 	bcs.w	80052e2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8a3a      	ldrh	r2, [r7, #16]
 80051c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051cc:	d02b      	beq.n	8005226 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051dc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0210 	bic.w	r2, r2, #16
 800521a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	4618      	mov	r0, r3
 8005222:	f7fd ff2b 	bl	800307c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800522e:	b29b      	uxth	r3, r3
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	b29b      	uxth	r3, r3
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f870 	bl	800531c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800523c:	e051      	b.n	80052e2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005246:	b29b      	uxth	r3, r3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d047      	beq.n	80052e6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005256:	8a7b      	ldrh	r3, [r7, #18]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d044      	beq.n	80052e6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800526a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0210 	bic.w	r2, r2, #16
 8005298:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800529a:	8a7b      	ldrh	r3, [r7, #18]
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f83c 	bl	800531c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80052a4:	e01f      	b.n	80052e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_UART_IRQHandler+0x326>
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8ff 	bl	80054be <UART_Transmit_IT>
    return;
 80052c0:	e012      	b.n	80052e8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <HAL_UART_IRQHandler+0x34c>
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f941 	bl	800555e <UART_EndTransmit_IT>
    return;
 80052dc:	e004      	b.n	80052e8 <HAL_UART_IRQHandler+0x34c>
    return;
 80052de:	bf00      	nop
 80052e0:	e002      	b.n	80052e8 <HAL_UART_IRQHandler+0x34c>
      return;
 80052e2:	bf00      	nop
 80052e4:	e000      	b.n	80052e8 <HAL_UART_IRQHandler+0x34c>
      return;
 80052e6:	bf00      	nop
  }
}
 80052e8:	3728      	adds	r7, #40	; 0x28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	08005497 	.word	0x08005497

080052f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005344:	e02c      	b.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d028      	beq.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <UART_WaitOnFlagUntilTimeout+0x30>
 8005354:	f7fd f81e 	bl	8002394 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	429a      	cmp	r2, r3
 8005362:	d21d      	bcs.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005372:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e00f      	b.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4013      	ands	r3, r2
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d0c3      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	4613      	mov	r3, r2
 80053d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	88fa      	ldrh	r2, [r7, #6]
 80053e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2222      	movs	r2, #34	; 0x22
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800540c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0201 	orr.w	r2, r2, #1
 800541c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0220 	orr.w	r2, r2, #32
 800542c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005452:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	2b01      	cmp	r3, #1
 800546a:	d107      	bne.n	800547c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0210 	bic.w	r2, r2, #16
 800547a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f7ff ff29 	bl	8005308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b21      	cmp	r3, #33	; 0x21
 80054d0:	d13e      	bne.n	8005550 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	d114      	bne.n	8005506 <UART_Transmit_IT+0x48>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d110      	bne.n	8005506 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	1c9a      	adds	r2, r3, #2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	621a      	str	r2, [r3, #32]
 8005504:	e008      	b.n	8005518 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	1c59      	adds	r1, r3, #1
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6211      	str	r1, [r2, #32]
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4619      	mov	r1, r3
 8005526:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10f      	bne.n	800554c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800553a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800554a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	e000      	b.n	8005552 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005550:	2302      	movs	r3, #2
  }
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005574:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff feb8 	bl	80052f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b22      	cmp	r3, #34	; 0x22
 80055a0:	f040 8087 	bne.w	80056b2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ac:	d117      	bne.n	80055de <UART_Receive_IT+0x50>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d113      	bne.n	80055de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	1c9a      	adds	r2, r3, #2
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	629a      	str	r2, [r3, #40]	; 0x28
 80055dc:	e026      	b.n	800562c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f0:	d007      	beq.n	8005602 <UART_Receive_IT+0x74>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <UART_Receive_IT+0x82>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e008      	b.n	8005622 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29b      	uxth	r3, r3
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4619      	mov	r1, r3
 800563a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800563c:	2b00      	cmp	r3, #0
 800563e:	d136      	bne.n	80056ae <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0220 	bic.w	r2, r2, #32
 800564e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800565e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695a      	ldr	r2, [r3, #20]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	2b01      	cmp	r3, #1
 800567e:	d10e      	bne.n	800569e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0210 	bic.w	r2, r2, #16
 800568e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fe40 	bl	800531c <HAL_UARTEx_RxEventCallback>
 800569c:	e002      	b.n	80056a4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fc faf2 	bl	8001c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e002      	b.n	80056b4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
  }
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c0:	b09f      	sub	sp, #124	; 0x7c
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d2:	68d9      	ldr	r1, [r3, #12]
 80056d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	ea40 0301 	orr.w	r3, r0, r1
 80056dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80056f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005700:	f021 010c 	bic.w	r1, r1, #12
 8005704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800570a:	430b      	orrs	r3, r1
 800570c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571a:	6999      	ldr	r1, [r3, #24]
 800571c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	ea40 0301 	orr.w	r3, r0, r1
 8005724:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4bc5      	ldr	r3, [pc, #788]	; (8005a40 <UART_SetConfig+0x384>)
 800572c:	429a      	cmp	r2, r3
 800572e:	d004      	beq.n	800573a <UART_SetConfig+0x7e>
 8005730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4bc3      	ldr	r3, [pc, #780]	; (8005a44 <UART_SetConfig+0x388>)
 8005736:	429a      	cmp	r2, r3
 8005738:	d103      	bne.n	8005742 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800573a:	f7fe fb57 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 800573e:	6778      	str	r0, [r7, #116]	; 0x74
 8005740:	e002      	b.n	8005748 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005742:	f7fe fb3f 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8005746:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005750:	f040 80b6 	bne.w	80058c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005756:	461c      	mov	r4, r3
 8005758:	f04f 0500 	mov.w	r5, #0
 800575c:	4622      	mov	r2, r4
 800575e:	462b      	mov	r3, r5
 8005760:	1891      	adds	r1, r2, r2
 8005762:	6439      	str	r1, [r7, #64]	; 0x40
 8005764:	415b      	adcs	r3, r3
 8005766:	647b      	str	r3, [r7, #68]	; 0x44
 8005768:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800576c:	1912      	adds	r2, r2, r4
 800576e:	eb45 0303 	adc.w	r3, r5, r3
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f04f 0100 	mov.w	r1, #0
 800577a:	00d9      	lsls	r1, r3, #3
 800577c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005780:	00d0      	lsls	r0, r2, #3
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	1911      	adds	r1, r2, r4
 8005788:	6639      	str	r1, [r7, #96]	; 0x60
 800578a:	416b      	adcs	r3, r5
 800578c:	667b      	str	r3, [r7, #100]	; 0x64
 800578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	461a      	mov	r2, r3
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	1891      	adds	r1, r2, r2
 800579a:	63b9      	str	r1, [r7, #56]	; 0x38
 800579c:	415b      	adcs	r3, r3
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80057a8:	f7fb f878 	bl	800089c <__aeabi_uldivmod>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4ba5      	ldr	r3, [pc, #660]	; (8005a48 <UART_SetConfig+0x38c>)
 80057b2:	fba3 2302 	umull	r2, r3, r3, r2
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	011e      	lsls	r6, r3, #4
 80057ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057bc:	461c      	mov	r4, r3
 80057be:	f04f 0500 	mov.w	r5, #0
 80057c2:	4622      	mov	r2, r4
 80057c4:	462b      	mov	r3, r5
 80057c6:	1891      	adds	r1, r2, r2
 80057c8:	6339      	str	r1, [r7, #48]	; 0x30
 80057ca:	415b      	adcs	r3, r3
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
 80057ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057d2:	1912      	adds	r2, r2, r4
 80057d4:	eb45 0303 	adc.w	r3, r5, r3
 80057d8:	f04f 0000 	mov.w	r0, #0
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	00d9      	lsls	r1, r3, #3
 80057e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057e6:	00d0      	lsls	r0, r2, #3
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	1911      	adds	r1, r2, r4
 80057ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80057f0:	416b      	adcs	r3, r5
 80057f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	461a      	mov	r2, r3
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	1891      	adds	r1, r2, r2
 8005800:	62b9      	str	r1, [r7, #40]	; 0x28
 8005802:	415b      	adcs	r3, r3
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800580a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800580e:	f7fb f845 	bl	800089c <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4b8c      	ldr	r3, [pc, #560]	; (8005a48 <UART_SetConfig+0x38c>)
 8005818:	fba3 1302 	umull	r1, r3, r3, r2
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	2164      	movs	r1, #100	; 0x64
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	3332      	adds	r3, #50	; 0x32
 800582a:	4a87      	ldr	r2, [pc, #540]	; (8005a48 <UART_SetConfig+0x38c>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005838:	441e      	add	r6, r3
 800583a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583c:	4618      	mov	r0, r3
 800583e:	f04f 0100 	mov.w	r1, #0
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	1894      	adds	r4, r2, r2
 8005848:	623c      	str	r4, [r7, #32]
 800584a:	415b      	adcs	r3, r3
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005852:	1812      	adds	r2, r2, r0
 8005854:	eb41 0303 	adc.w	r3, r1, r3
 8005858:	f04f 0400 	mov.w	r4, #0
 800585c:	f04f 0500 	mov.w	r5, #0
 8005860:	00dd      	lsls	r5, r3, #3
 8005862:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005866:	00d4      	lsls	r4, r2, #3
 8005868:	4622      	mov	r2, r4
 800586a:	462b      	mov	r3, r5
 800586c:	1814      	adds	r4, r2, r0
 800586e:	653c      	str	r4, [r7, #80]	; 0x50
 8005870:	414b      	adcs	r3, r1
 8005872:	657b      	str	r3, [r7, #84]	; 0x54
 8005874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	461a      	mov	r2, r3
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	1891      	adds	r1, r2, r2
 8005880:	61b9      	str	r1, [r7, #24]
 8005882:	415b      	adcs	r3, r3
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800588a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800588e:	f7fb f805 	bl	800089c <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4b6c      	ldr	r3, [pc, #432]	; (8005a48 <UART_SetConfig+0x38c>)
 8005898:	fba3 1302 	umull	r1, r3, r3, r2
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	2164      	movs	r1, #100	; 0x64
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	3332      	adds	r3, #50	; 0x32
 80058aa:	4a67      	ldr	r2, [pc, #412]	; (8005a48 <UART_SetConfig+0x38c>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f003 0207 	and.w	r2, r3, #7
 80058b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4432      	add	r2, r6
 80058bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058be:	e0b9      	b.n	8005a34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c2:	461c      	mov	r4, r3
 80058c4:	f04f 0500 	mov.w	r5, #0
 80058c8:	4622      	mov	r2, r4
 80058ca:	462b      	mov	r3, r5
 80058cc:	1891      	adds	r1, r2, r2
 80058ce:	6139      	str	r1, [r7, #16]
 80058d0:	415b      	adcs	r3, r3
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058d8:	1912      	adds	r2, r2, r4
 80058da:	eb45 0303 	adc.w	r3, r5, r3
 80058de:	f04f 0000 	mov.w	r0, #0
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	00d9      	lsls	r1, r3, #3
 80058e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058ec:	00d0      	lsls	r0, r2, #3
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	eb12 0804 	adds.w	r8, r2, r4
 80058f6:	eb43 0905 	adc.w	r9, r3, r5
 80058fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	4618      	mov	r0, r3
 8005900:	f04f 0100 	mov.w	r1, #0
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	008b      	lsls	r3, r1, #2
 800590e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005912:	0082      	lsls	r2, r0, #2
 8005914:	4640      	mov	r0, r8
 8005916:	4649      	mov	r1, r9
 8005918:	f7fa ffc0 	bl	800089c <__aeabi_uldivmod>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4b49      	ldr	r3, [pc, #292]	; (8005a48 <UART_SetConfig+0x38c>)
 8005922:	fba3 2302 	umull	r2, r3, r3, r2
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	011e      	lsls	r6, r3, #4
 800592a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800592c:	4618      	mov	r0, r3
 800592e:	f04f 0100 	mov.w	r1, #0
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	1894      	adds	r4, r2, r2
 8005938:	60bc      	str	r4, [r7, #8]
 800593a:	415b      	adcs	r3, r3
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005942:	1812      	adds	r2, r2, r0
 8005944:	eb41 0303 	adc.w	r3, r1, r3
 8005948:	f04f 0400 	mov.w	r4, #0
 800594c:	f04f 0500 	mov.w	r5, #0
 8005950:	00dd      	lsls	r5, r3, #3
 8005952:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005956:	00d4      	lsls	r4, r2, #3
 8005958:	4622      	mov	r2, r4
 800595a:	462b      	mov	r3, r5
 800595c:	1814      	adds	r4, r2, r0
 800595e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005960:	414b      	adcs	r3, r1
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4618      	mov	r0, r3
 800596a:	f04f 0100 	mov.w	r1, #0
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	008b      	lsls	r3, r1, #2
 8005978:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800597c:	0082      	lsls	r2, r0, #2
 800597e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005982:	f7fa ff8b 	bl	800089c <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <UART_SetConfig+0x38c>)
 800598c:	fba3 1302 	umull	r1, r3, r3, r2
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	2164      	movs	r1, #100	; 0x64
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	3332      	adds	r3, #50	; 0x32
 800599e:	4a2a      	ldr	r2, [pc, #168]	; (8005a48 <UART_SetConfig+0x38c>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059aa:	441e      	add	r6, r3
 80059ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ae:	4618      	mov	r0, r3
 80059b0:	f04f 0100 	mov.w	r1, #0
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	1894      	adds	r4, r2, r2
 80059ba:	603c      	str	r4, [r7, #0]
 80059bc:	415b      	adcs	r3, r3
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c4:	1812      	adds	r2, r2, r0
 80059c6:	eb41 0303 	adc.w	r3, r1, r3
 80059ca:	f04f 0400 	mov.w	r4, #0
 80059ce:	f04f 0500 	mov.w	r5, #0
 80059d2:	00dd      	lsls	r5, r3, #3
 80059d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059d8:	00d4      	lsls	r4, r2, #3
 80059da:	4622      	mov	r2, r4
 80059dc:	462b      	mov	r3, r5
 80059de:	eb12 0a00 	adds.w	sl, r2, r0
 80059e2:	eb43 0b01 	adc.w	fp, r3, r1
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	008b      	lsls	r3, r1, #2
 80059fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059fe:	0082      	lsls	r2, r0, #2
 8005a00:	4650      	mov	r0, sl
 8005a02:	4659      	mov	r1, fp
 8005a04:	f7fa ff4a 	bl	800089c <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4b0e      	ldr	r3, [pc, #56]	; (8005a48 <UART_SetConfig+0x38c>)
 8005a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	2164      	movs	r1, #100	; 0x64
 8005a16:	fb01 f303 	mul.w	r3, r1, r3
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	3332      	adds	r3, #50	; 0x32
 8005a20:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <UART_SetConfig+0x38c>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	f003 020f 	and.w	r2, r3, #15
 8005a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4432      	add	r2, r6
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	377c      	adds	r7, #124	; 0x7c
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3e:	bf00      	nop
 8005a40:	40011000 	.word	0x40011000
 8005a44:	40011400 	.word	0x40011400
 8005a48:	51eb851f 	.word	0x51eb851f

08005a4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005a50:	4904      	ldr	r1, [pc, #16]	; (8005a64 <MX_FATFS_Init+0x18>)
 8005a52:	4805      	ldr	r0, [pc, #20]	; (8005a68 <MX_FATFS_Init+0x1c>)
 8005a54:	f003 fb42 	bl	80090dc <FATFS_LinkDriver>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <MX_FATFS_Init+0x20>)
 8005a5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a60:	bf00      	nop
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20006dc8 	.word	0x20006dc8
 8005a68:	20000038 	.word	0x20000038
 8005a6c:	20006dcc 	.word	0x20006dcc

08005a70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	 return SD_disk_initialize (pdrv);
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fb fabb 	bl	8001008 <SD_disk_initialize>
 8005a92:	4603      	mov	r3, r0
 8005a94:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fb fb92 	bl	80011d4 <SD_disk_status>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005acc:	7bf8      	ldrb	r0, [r7, #15]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	f7fb fb94 	bl	8001200 <SD_disk_read>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	4603      	mov	r3, r0
 8005af2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005af4:	7bf8      	ldrb	r0, [r7, #15]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	f7fb fbea 	bl	80012d4 <SD_disk_write>
 8005b00:	4603      	mov	r3, r0
 8005b02:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	603a      	str	r2, [r7, #0]
 8005b16:	71fb      	strb	r3, [r7, #7]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

	return SD_disk_ioctl(pdrv, cmd, buff);
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	79b9      	ldrb	r1, [r7, #6]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fb fc5a 	bl	80013dc <SD_disk_ioctl>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <disk_status+0x30>)
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	79fa      	ldrb	r2, [r7, #7]
 8005b4c:	4905      	ldr	r1, [pc, #20]	; (8005b64 <disk_status+0x30>)
 8005b4e:	440a      	add	r2, r1
 8005b50:	7a12      	ldrb	r2, [r2, #8]
 8005b52:	4610      	mov	r0, r2
 8005b54:	4798      	blx	r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20000170 	.word	0x20000170

08005b68 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	4a0d      	ldr	r2, [pc, #52]	; (8005bb0 <disk_initialize+0x48>)
 8005b7a:	5cd3      	ldrb	r3, [r2, r3]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d111      	bne.n	8005ba4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	4a0b      	ldr	r2, [pc, #44]	; (8005bb0 <disk_initialize+0x48>)
 8005b84:	2101      	movs	r1, #1
 8005b86:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	4a09      	ldr	r2, [pc, #36]	; (8005bb0 <disk_initialize+0x48>)
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	79fa      	ldrb	r2, [r7, #7]
 8005b96:	4906      	ldr	r1, [pc, #24]	; (8005bb0 <disk_initialize+0x48>)
 8005b98:	440a      	add	r2, r1
 8005b9a:	7a12      	ldrb	r2, [r2, #8]
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000170 	.word	0x20000170

08005bb4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bb4:	b590      	push	{r4, r7, lr}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <disk_read+0x3c>)
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	689c      	ldr	r4, [r3, #8]
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	4a07      	ldr	r2, [pc, #28]	; (8005bf0 <disk_read+0x3c>)
 8005bd4:	4413      	add	r3, r2
 8005bd6:	7a18      	ldrb	r0, [r3, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	47a0      	blx	r4
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd90      	pop	{r4, r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000170 	.word	0x20000170

08005bf4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <disk_write+0x3c>)
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	68dc      	ldr	r4, [r3, #12]
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	4a07      	ldr	r2, [pc, #28]	; (8005c30 <disk_write+0x3c>)
 8005c14:	4413      	add	r3, r2
 8005c16:	7a18      	ldrb	r0, [r3, #8]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	47a0      	blx	r4
 8005c20:	4603      	mov	r3, r0
 8005c22:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000170 	.word	0x20000170

08005c34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	603a      	str	r2, [r7, #0]
 8005c3e:	71fb      	strb	r3, [r7, #7]
 8005c40:	460b      	mov	r3, r1
 8005c42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <disk_ioctl+0x38>)
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	79fa      	ldrb	r2, [r7, #7]
 8005c52:	4906      	ldr	r1, [pc, #24]	; (8005c6c <disk_ioctl+0x38>)
 8005c54:	440a      	add	r2, r1
 8005c56:	7a10      	ldrb	r0, [r2, #8]
 8005c58:	79b9      	ldrb	r1, [r7, #6]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	4798      	blx	r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000170 	.word	0x20000170

08005c70 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c80:	89fb      	ldrh	r3, [r7, #14]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	b21a      	sxth	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	b21b      	sxth	r3, r3
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	b21b      	sxth	r3, r3
 8005c90:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c92:	89fb      	ldrh	r3, [r7, #14]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3303      	adds	r3, #3
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	3202      	adds	r2, #2
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	3201      	adds	r2, #1
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
	return rv;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	887a      	ldrh	r2, [r7, #2]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	887b      	ldrh	r3, [r7, #2]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	887a      	ldrh	r2, [r7, #2]
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	0a1b      	lsrs	r3, r3, #8
 8005d36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	0a1b      	lsrs	r3, r3, #8
 8005d5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	607a      	str	r2, [r7, #4]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	701a      	strb	r2, [r3, #0]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	1c53      	adds	r3, r2, #1
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	1c59      	adds	r1, r3, #1
 8005d98:	6179      	str	r1, [r7, #20]
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f1      	bne.n	8005d8e <mem_cpy+0x1a>
	}
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	617a      	str	r2, [r7, #20]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	607b      	str	r3, [r7, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f3      	bne.n	8005dc6 <mem_set+0x10>
}
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	; 0x24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	61fa      	str	r2, [r7, #28]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	61ba      	str	r2, [r7, #24]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	1acb      	subs	r3, r1, r3
 8005e18:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	607b      	str	r3, [r7, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <mem_cmp+0x40>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0eb      	beq.n	8005e04 <mem_cmp+0x18>

	return r;
 8005e2c:	697b      	ldr	r3, [r7, #20]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3724      	adds	r7, #36	; 0x24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e44:	e002      	b.n	8005e4c <chk_chr+0x12>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <chk_chr+0x26>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d1f2      	bne.n	8005e46 <chk_chr+0xc>
	return *str;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	781b      	ldrb	r3, [r3, #0]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <lock_fs+0x22>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f003 fa27 	bl	80092d6 <ff_req_grant>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <lock_fs+0x22>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <lock_fs+0x24>
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00d      	beq.n	8005eca <unlock_fs+0x2e>
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	d00a      	beq.n	8005eca <unlock_fs+0x2e>
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	2b0b      	cmp	r3, #11
 8005eb8:	d007      	beq.n	8005eca <unlock_fs+0x2e>
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b0f      	cmp	r3, #15
 8005ebe:	d004      	beq.n	8005eca <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f003 fa1b 	bl	8009300 <ff_rel_grant>
	}
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e029      	b.n	8005f3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ee8:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <chk_lock+0xb4>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	4413      	add	r3, r2
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01d      	beq.n	8005f32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ef6:	4a24      	ldr	r2, [pc, #144]	; (8005f88 <chk_lock+0xb4>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	4413      	add	r3, r2
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d116      	bne.n	8005f36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <chk_lock+0xb4>)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	4413      	add	r3, r2
 8005f10:	3304      	adds	r3, #4
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d10c      	bne.n	8005f36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f1c:	4a1a      	ldr	r2, [pc, #104]	; (8005f88 <chk_lock+0xb4>)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	4413      	add	r3, r2
 8005f24:	3308      	adds	r3, #8
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d102      	bne.n	8005f36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f30:	e007      	b.n	8005f42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005f32:	2301      	movs	r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d9d2      	bls.n	8005ee8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d109      	bne.n	8005f5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <chk_lock+0x80>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d101      	bne.n	8005f58 <chk_lock+0x84>
 8005f54:	2300      	movs	r3, #0
 8005f56:	e010      	b.n	8005f7a <chk_lock+0xa6>
 8005f58:	2312      	movs	r3, #18
 8005f5a:	e00e      	b.n	8005f7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <chk_lock+0xa0>
 8005f62:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <chk_lock+0xb4>)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	4413      	add	r3, r2
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f72:	d101      	bne.n	8005f78 <chk_lock+0xa4>
 8005f74:	2310      	movs	r3, #16
 8005f76:	e000      	b.n	8005f7a <chk_lock+0xa6>
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20000150 	.word	0x20000150

08005f8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f92:	2300      	movs	r3, #0
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	e002      	b.n	8005f9e <enq_lock+0x12>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	607b      	str	r3, [r7, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d806      	bhi.n	8005fb2 <enq_lock+0x26>
 8005fa4:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <enq_lock+0x40>)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	4413      	add	r3, r2
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f2      	bne.n	8005f98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	bf14      	ite	ne
 8005fb8:	2301      	movne	r3, #1
 8005fba:	2300      	moveq	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	20000150 	.word	0x20000150

08005fd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e01f      	b.n	8006020 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005fe0:	4a41      	ldr	r2, [pc, #260]	; (80060e8 <inc_lock+0x118>)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	4413      	add	r3, r2
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d113      	bne.n	800601a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005ff2:	4a3d      	ldr	r2, [pc, #244]	; (80060e8 <inc_lock+0x118>)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006002:	429a      	cmp	r2, r3
 8006004:	d109      	bne.n	800601a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006006:	4a38      	ldr	r2, [pc, #224]	; (80060e8 <inc_lock+0x118>)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	4413      	add	r3, r2
 800600e:	3308      	adds	r3, #8
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006016:	429a      	cmp	r2, r3
 8006018:	d006      	beq.n	8006028 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d9dc      	bls.n	8005fe0 <inc_lock+0x10>
 8006026:	e000      	b.n	800602a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006028:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d132      	bne.n	8006096 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e002      	b.n	800603c <inc_lock+0x6c>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3301      	adds	r3, #1
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d806      	bhi.n	8006050 <inc_lock+0x80>
 8006042:	4a29      	ldr	r2, [pc, #164]	; (80060e8 <inc_lock+0x118>)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	4413      	add	r3, r2
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1f2      	bne.n	8006036 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d101      	bne.n	800605a <inc_lock+0x8a>
 8006056:	2300      	movs	r3, #0
 8006058:	e040      	b.n	80060dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4922      	ldr	r1, [pc, #136]	; (80060e8 <inc_lock+0x118>)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	440b      	add	r3, r1
 8006066:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	491e      	ldr	r1, [pc, #120]	; (80060e8 <inc_lock+0x118>)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	440b      	add	r3, r1
 8006074:	3304      	adds	r3, #4
 8006076:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	695a      	ldr	r2, [r3, #20]
 800607c:	491a      	ldr	r1, [pc, #104]	; (80060e8 <inc_lock+0x118>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	440b      	add	r3, r1
 8006084:	3308      	adds	r3, #8
 8006086:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006088:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <inc_lock+0x118>)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	4413      	add	r3, r2
 8006090:	330c      	adds	r3, #12
 8006092:	2200      	movs	r2, #0
 8006094:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d009      	beq.n	80060b0 <inc_lock+0xe0>
 800609c:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <inc_lock+0x118>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	4413      	add	r3, r2
 80060a4:	330c      	adds	r3, #12
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <inc_lock+0xe0>
 80060ac:	2300      	movs	r3, #0
 80060ae:	e015      	b.n	80060dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d108      	bne.n	80060c8 <inc_lock+0xf8>
 80060b6:	4a0c      	ldr	r2, [pc, #48]	; (80060e8 <inc_lock+0x118>)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4413      	add	r3, r2
 80060be:	330c      	adds	r3, #12
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	e001      	b.n	80060cc <inc_lock+0xfc>
 80060c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060cc:	4906      	ldr	r1, [pc, #24]	; (80060e8 <inc_lock+0x118>)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	440b      	add	r3, r1
 80060d4:	330c      	adds	r3, #12
 80060d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3301      	adds	r3, #1
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	20000150 	.word	0x20000150

080060ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d825      	bhi.n	800614c <dec_lock+0x60>
		n = Files[i].ctr;
 8006100:	4a17      	ldr	r2, [pc, #92]	; (8006160 <dec_lock+0x74>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	4413      	add	r3, r2
 8006108:	330c      	adds	r3, #12
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800610e:	89fb      	ldrh	r3, [r7, #14]
 8006110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006114:	d101      	bne.n	800611a <dec_lock+0x2e>
 8006116:	2300      	movs	r3, #0
 8006118:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800611a:	89fb      	ldrh	r3, [r7, #14]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <dec_lock+0x3a>
 8006120:	89fb      	ldrh	r3, [r7, #14]
 8006122:	3b01      	subs	r3, #1
 8006124:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006126:	4a0e      	ldr	r2, [pc, #56]	; (8006160 <dec_lock+0x74>)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	4413      	add	r3, r2
 800612e:	330c      	adds	r3, #12
 8006130:	89fa      	ldrh	r2, [r7, #14]
 8006132:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006134:	89fb      	ldrh	r3, [r7, #14]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d105      	bne.n	8006146 <dec_lock+0x5a>
 800613a:	4a09      	ldr	r2, [pc, #36]	; (8006160 <dec_lock+0x74>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	4413      	add	r3, r2
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	737b      	strb	r3, [r7, #13]
 800614a:	e001      	b.n	8006150 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800614c:	2302      	movs	r3, #2
 800614e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006150:	7b7b      	ldrb	r3, [r7, #13]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20000150 	.word	0x20000150

08006164 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e010      	b.n	8006194 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006172:	4a0d      	ldr	r2, [pc, #52]	; (80061a8 <clear_lock+0x44>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	4413      	add	r3, r2
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	429a      	cmp	r2, r3
 8006180:	d105      	bne.n	800618e <clear_lock+0x2a>
 8006182:	4a09      	ldr	r2, [pc, #36]	; (80061a8 <clear_lock+0x44>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	4413      	add	r3, r2
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3301      	adds	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d9eb      	bls.n	8006172 <clear_lock+0xe>
	}
}
 800619a:	bf00      	nop
 800619c:	bf00      	nop
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	20000150 	.word	0x20000150

080061ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	78db      	ldrb	r3, [r3, #3]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d034      	beq.n	800622a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7858      	ldrb	r0, [r3, #1]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80061d0:	2301      	movs	r3, #1
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	f7ff fd0e 	bl	8005bf4 <disk_write>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80061de:	2301      	movs	r3, #1
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e022      	b.n	800622a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d217      	bcs.n	800622a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	789b      	ldrb	r3, [r3, #2]
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	e010      	b.n	8006224 <sync_window+0x78>
					wsect += fs->fsize;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	7858      	ldrb	r0, [r3, #1]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006216:	2301      	movs	r3, #1
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	f7ff fceb 	bl	8005bf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	3b01      	subs	r3, #1
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d8eb      	bhi.n	8006202 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d01b      	beq.n	8006284 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff ffad 	bl	80061ac <sync_window>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d113      	bne.n	8006284 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	7858      	ldrb	r0, [r3, #1]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006266:	2301      	movs	r3, #1
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	f7ff fca3 	bl	8005bb4 <disk_read>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006274:	f04f 33ff 	mov.w	r3, #4294967295
 8006278:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800627a:	2301      	movs	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff ff87 	bl	80061ac <sync_window>
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d159      	bne.n	800635c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d149      	bne.n	8006344 <sync_fs+0xb4>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	791b      	ldrb	r3, [r3, #4]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d145      	bne.n	8006344 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	899b      	ldrh	r3, [r3, #12]
 80062c2:	461a      	mov	r2, r3
 80062c4:	2100      	movs	r1, #0
 80062c6:	f7ff fd76 	bl	8005db6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	333c      	adds	r3, #60	; 0x3c
 80062ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062d2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fd05 	bl	8005ce6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	333c      	adds	r3, #60	; 0x3c
 80062e0:	4921      	ldr	r1, [pc, #132]	; (8006368 <sync_fs+0xd8>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fd1a 	bl	8005d1c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	333c      	adds	r3, #60	; 0x3c
 80062ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80062f0:	491e      	ldr	r1, [pc, #120]	; (800636c <sync_fs+0xdc>)
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fd12 	bl	8005d1c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	333c      	adds	r3, #60	; 0x3c
 80062fc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f7ff fd08 	bl	8005d1c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	333c      	adds	r3, #60	; 0x3c
 8006310:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	4619      	mov	r1, r3
 800631a:	4610      	mov	r0, r2
 800631c:	f7ff fcfe 	bl	8005d1c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	7858      	ldrb	r0, [r3, #1]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006338:	2301      	movs	r3, #1
 800633a:	f7ff fc5b 	bl	8005bf4 <disk_write>
			fs->fsi_flag = 0;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2200      	movs	r2, #0
 800634a:	2100      	movs	r1, #0
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fc71 	bl	8005c34 <disk_ioctl>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <sync_fs+0xcc>
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	41615252 	.word	0x41615252
 800636c:	61417272 	.word	0x61417272

08006370 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	3b02      	subs	r3, #2
 800637e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	3b02      	subs	r3, #2
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d301      	bcc.n	8006390 <clust2sect+0x20>
 800638c:	2300      	movs	r3, #0
 800638e:	e008      	b.n	80063a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	895b      	ldrh	r3, [r3, #10]
 8006394:	461a      	mov	r2, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	fb03 f202 	mul.w	r2, r3, r2
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a0:	4413      	add	r3, r2
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d904      	bls.n	80063ce <get_fat+0x20>
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d302      	bcc.n	80063d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80063ce:	2301      	movs	r3, #1
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	e0bb      	b.n	800654c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295
 80063d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	f000 8083 	beq.w	80064ea <get_fat+0x13c>
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	f300 80a7 	bgt.w	8006538 <get_fat+0x18a>
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d002      	beq.n	80063f4 <get_fat+0x46>
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d056      	beq.n	80064a0 <get_fat+0xf2>
 80063f2:	e0a1      	b.n	8006538 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	899b      	ldrh	r3, [r3, #12]
 800640a:	4619      	mov	r1, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006412:	4413      	add	r3, r2
 8006414:	4619      	mov	r1, r3
 8006416:	6938      	ldr	r0, [r7, #16]
 8006418:	f7ff ff0c 	bl	8006234 <move_window>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 808d 	bne.w	800653e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	60fa      	str	r2, [r7, #12]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	8992      	ldrh	r2, [r2, #12]
 800642e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006432:	fb02 f201 	mul.w	r2, r2, r1
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006440:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	899b      	ldrh	r3, [r3, #12]
 800644a:	4619      	mov	r1, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006452:	4413      	add	r3, r2
 8006454:	4619      	mov	r1, r3
 8006456:	6938      	ldr	r0, [r7, #16]
 8006458:	f7ff feec 	bl	8006234 <move_window>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d16f      	bne.n	8006542 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	899b      	ldrh	r3, [r3, #12]
 8006466:	461a      	mov	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	fbb3 f1f2 	udiv	r1, r3, r2
 800646e:	fb02 f201 	mul.w	r2, r2, r1
 8006472:	1a9b      	subs	r3, r3, r2
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4413      	add	r3, r2
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	461a      	mov	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4313      	orrs	r3, r2
 8006484:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <get_fat+0xe8>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	091b      	lsrs	r3, r3, #4
 8006494:	e002      	b.n	800649c <get_fat+0xee>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800649c:	617b      	str	r3, [r7, #20]
			break;
 800649e:	e055      	b.n	800654c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	899b      	ldrh	r3, [r3, #12]
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	4619      	mov	r1, r3
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80064b4:	4413      	add	r3, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	6938      	ldr	r0, [r7, #16]
 80064ba:	f7ff febb 	bl	8006234 <move_window>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d140      	bne.n	8006546 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	8992      	ldrh	r2, [r2, #12]
 80064d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80064d6:	fb02 f200 	mul.w	r2, r2, r0
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	440b      	add	r3, r1
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fbc6 	bl	8005c70 <ld_word>
 80064e4:	4603      	mov	r3, r0
 80064e6:	617b      	str	r3, [r7, #20]
			break;
 80064e8:	e030      	b.n	800654c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	899b      	ldrh	r3, [r3, #12]
 80064f2:	089b      	lsrs	r3, r3, #2
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	4619      	mov	r1, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80064fe:	4413      	add	r3, r2
 8006500:	4619      	mov	r1, r3
 8006502:	6938      	ldr	r0, [r7, #16]
 8006504:	f7ff fe96 	bl	8006234 <move_window>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d11d      	bne.n	800654a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	8992      	ldrh	r2, [r2, #12]
 800651c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006520:	fb02 f200 	mul.w	r2, r2, r0
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	440b      	add	r3, r1
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff fbb9 	bl	8005ca0 <ld_dword>
 800652e:	4603      	mov	r3, r0
 8006530:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006534:	617b      	str	r3, [r7, #20]
			break;
 8006536:	e009      	b.n	800654c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e006      	b.n	800654c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800653e:	bf00      	nop
 8006540:	e004      	b.n	800654c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006542:	bf00      	nop
 8006544:	e002      	b.n	800654c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006546:	bf00      	nop
 8006548:	e000      	b.n	800654c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800654a:	bf00      	nop
		}
	}

	return val;
 800654c:	697b      	ldr	r3, [r7, #20]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006556:	b590      	push	{r4, r7, lr}
 8006558:	b089      	sub	sp, #36	; 0x24
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006562:	2302      	movs	r3, #2
 8006564:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b01      	cmp	r3, #1
 800656a:	f240 8102 	bls.w	8006772 <put_fat+0x21c>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	429a      	cmp	r2, r3
 8006576:	f080 80fc 	bcs.w	8006772 <put_fat+0x21c>
		switch (fs->fs_type) {
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b03      	cmp	r3, #3
 8006580:	f000 80b6 	beq.w	80066f0 <put_fat+0x19a>
 8006584:	2b03      	cmp	r3, #3
 8006586:	f300 80fd 	bgt.w	8006784 <put_fat+0x22e>
 800658a:	2b01      	cmp	r3, #1
 800658c:	d003      	beq.n	8006596 <put_fat+0x40>
 800658e:	2b02      	cmp	r3, #2
 8006590:	f000 8083 	beq.w	800669a <put_fat+0x144>
 8006594:	e0f6      	b.n	8006784 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	4413      	add	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	899b      	ldrh	r3, [r3, #12]
 80065ac:	4619      	mov	r1, r3
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80065b4:	4413      	add	r3, r2
 80065b6:	4619      	mov	r1, r3
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7ff fe3b 	bl	8006234 <move_window>
 80065be:	4603      	mov	r3, r0
 80065c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065c2:	7ffb      	ldrb	r3, [r7, #31]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 80d6 	bne.w	8006776 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	61ba      	str	r2, [r7, #24]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	8992      	ldrh	r2, [r2, #12]
 80065da:	fbb3 f0f2 	udiv	r0, r3, r2
 80065de:	fb02 f200 	mul.w	r2, r2, r0
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	440b      	add	r3, r1
 80065e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <put_fat+0xb8>
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	b25b      	sxtb	r3, r3
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	b25a      	sxtb	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	b25b      	sxtb	r3, r3
 8006606:	4313      	orrs	r3, r2
 8006608:	b25b      	sxtb	r3, r3
 800660a:	b2db      	uxtb	r3, r3
 800660c:	e001      	b.n	8006612 <put_fat+0xbc>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	899b      	ldrh	r3, [r3, #12]
 8006624:	4619      	mov	r1, r3
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	fbb3 f3f1 	udiv	r3, r3, r1
 800662c:	4413      	add	r3, r2
 800662e:	4619      	mov	r1, r3
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7ff fdff 	bl	8006234 <move_window>
 8006636:	4603      	mov	r3, r0
 8006638:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800663a:	7ffb      	ldrb	r3, [r7, #31]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 809c 	bne.w	800677a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	899b      	ldrh	r3, [r3, #12]
 800664c:	461a      	mov	r2, r3
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	fbb3 f0f2 	udiv	r0, r3, r2
 8006654:	fb02 f200 	mul.w	r2, r2, r0
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	440b      	add	r3, r1
 800665c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <put_fat+0x11a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	b2db      	uxtb	r3, r3
 800666e:	e00e      	b.n	800668e <put_fat+0x138>
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	b25b      	sxtb	r3, r3
 8006676:	f023 030f 	bic.w	r3, r3, #15
 800667a:	b25a      	sxtb	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	b25b      	sxtb	r3, r3
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	b25b      	sxtb	r3, r3
 8006688:	4313      	orrs	r3, r2
 800668a:	b25b      	sxtb	r3, r3
 800668c:	b2db      	uxtb	r3, r3
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	70da      	strb	r2, [r3, #3]
			break;
 8006698:	e074      	b.n	8006784 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	899b      	ldrh	r3, [r3, #12]
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	4619      	mov	r1, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80066ae:	4413      	add	r3, r2
 80066b0:	4619      	mov	r1, r3
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff fdbe 	bl	8006234 <move_window>
 80066b8:	4603      	mov	r3, r0
 80066ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066bc:	7ffb      	ldrb	r3, [r7, #31]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d15d      	bne.n	800677e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	8992      	ldrh	r2, [r2, #12]
 80066d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80066d4:	fb02 f200 	mul.w	r2, r2, r0
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	440b      	add	r3, r1
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	b292      	uxth	r2, r2
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff faff 	bl	8005ce6 <st_word>
			fs->wflag = 1;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	70da      	strb	r2, [r3, #3]
			break;
 80066ee:	e049      	b.n	8006784 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	899b      	ldrh	r3, [r3, #12]
 80066f8:	089b      	lsrs	r3, r3, #2
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	4619      	mov	r1, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	fbb3 f3f1 	udiv	r3, r3, r1
 8006704:	4413      	add	r3, r2
 8006706:	4619      	mov	r1, r3
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff fd93 	bl	8006234 <move_window>
 800670e:	4603      	mov	r3, r0
 8006710:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006712:	7ffb      	ldrb	r3, [r7, #31]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d134      	bne.n	8006782 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	8992      	ldrh	r2, [r2, #12]
 800672c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006730:	fb02 f200 	mul.w	r2, r2, r0
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	440b      	add	r3, r1
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fab1 	bl	8005ca0 <ld_dword>
 800673e:	4603      	mov	r3, r0
 8006740:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006744:	4323      	orrs	r3, r4
 8006746:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	8992      	ldrh	r2, [r2, #12]
 8006756:	fbb3 f0f2 	udiv	r0, r3, r2
 800675a:	fb02 f200 	mul.w	r2, r2, r0
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	440b      	add	r3, r1
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fad9 	bl	8005d1c <st_dword>
			fs->wflag = 1;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	70da      	strb	r2, [r3, #3]
			break;
 8006770:	e008      	b.n	8006784 <put_fat+0x22e>
		}
	}
 8006772:	bf00      	nop
 8006774:	e006      	b.n	8006784 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006776:	bf00      	nop
 8006778:	e004      	b.n	8006784 <put_fat+0x22e>
			if (res != FR_OK) break;
 800677a:	bf00      	nop
 800677c:	e002      	b.n	8006784 <put_fat+0x22e>
			if (res != FR_OK) break;
 800677e:	bf00      	nop
 8006780:	e000      	b.n	8006784 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006782:	bf00      	nop
	return res;
 8006784:	7ffb      	ldrb	r3, [r7, #31]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3724      	adds	r7, #36	; 0x24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd90      	pop	{r4, r7, pc}

0800678e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b088      	sub	sp, #32
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d904      	bls.n	80067b4 <remove_chain+0x26>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d301      	bcc.n	80067b8 <remove_chain+0x2a>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e04b      	b.n	8006850 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00c      	beq.n	80067d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80067be:	f04f 32ff 	mov.w	r2, #4294967295
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	69b8      	ldr	r0, [r7, #24]
 80067c6:	f7ff fec6 	bl	8006556 <put_fat>
 80067ca:	4603      	mov	r3, r0
 80067cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80067ce:	7ffb      	ldrb	r3, [r7, #31]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <remove_chain+0x4a>
 80067d4:	7ffb      	ldrb	r3, [r7, #31]
 80067d6:	e03b      	b.n	8006850 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff fde7 	bl	80063ae <get_fat>
 80067e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d031      	beq.n	800684c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <remove_chain+0x64>
 80067ee:	2302      	movs	r3, #2
 80067f0:	e02e      	b.n	8006850 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d101      	bne.n	80067fe <remove_chain+0x70>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e028      	b.n	8006850 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80067fe:	2200      	movs	r2, #0
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	69b8      	ldr	r0, [r7, #24]
 8006804:	f7ff fea7 	bl	8006556 <put_fat>
 8006808:	4603      	mov	r3, r0
 800680a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800680c:	7ffb      	ldrb	r3, [r7, #31]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <remove_chain+0x88>
 8006812:	7ffb      	ldrb	r3, [r7, #31]
 8006814:	e01c      	b.n	8006850 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	69da      	ldr	r2, [r3, #28]
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	3b02      	subs	r3, #2
 8006820:	429a      	cmp	r2, r3
 8006822:	d20b      	bcs.n	800683c <remove_chain+0xae>
			fs->free_clst++;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	791b      	ldrb	r3, [r3, #4]
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	b2da      	uxtb	r2, r3
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	d3c6      	bcc.n	80067d8 <remove_chain+0x4a>
 800684a:	e000      	b.n	800684e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800684c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <create_chain+0x2c>
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	429a      	cmp	r2, r3
 8006882:	d31b      	bcc.n	80068bc <create_chain+0x64>
 8006884:	2301      	movs	r3, #1
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	e018      	b.n	80068bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fd8e 	bl	80063ae <get_fat>
 8006892:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d801      	bhi.n	800689e <create_chain+0x46>
 800689a:	2301      	movs	r3, #1
 800689c:	e070      	b.n	8006980 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d101      	bne.n	80068aa <create_chain+0x52>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	e06a      	b.n	8006980 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d201      	bcs.n	80068b8 <create_chain+0x60>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	e063      	b.n	8006980 <create_chain+0x128>
		scl = clst;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	3301      	adds	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d307      	bcc.n	80068e0 <create_chain+0x88>
				ncl = 2;
 80068d0:	2302      	movs	r3, #2
 80068d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80068d4:	69fa      	ldr	r2, [r7, #28]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d901      	bls.n	80068e0 <create_chain+0x88>
 80068dc:	2300      	movs	r3, #0
 80068de:	e04f      	b.n	8006980 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80068e0:	69f9      	ldr	r1, [r7, #28]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fd63 	bl	80063ae <get_fat>
 80068e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00e      	beq.n	800690e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d003      	beq.n	80068fe <create_chain+0xa6>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fc:	d101      	bne.n	8006902 <create_chain+0xaa>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	e03e      	b.n	8006980 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	429a      	cmp	r2, r3
 8006908:	d1da      	bne.n	80068c0 <create_chain+0x68>
 800690a:	2300      	movs	r3, #0
 800690c:	e038      	b.n	8006980 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800690e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	69f9      	ldr	r1, [r7, #28]
 8006916:	6938      	ldr	r0, [r7, #16]
 8006918:	f7ff fe1d 	bl	8006556 <put_fat>
 800691c:	4603      	mov	r3, r0
 800691e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006920:	7dfb      	ldrb	r3, [r7, #23]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <create_chain+0xe2>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d006      	beq.n	800693a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6938      	ldr	r0, [r7, #16]
 8006932:	f7ff fe10 	bl	8006556 <put_fat>
 8006936:	4603      	mov	r3, r0
 8006938:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d116      	bne.n	800696e <create_chain+0x116>
		fs->last_clst = ncl;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	69da      	ldr	r2, [r3, #28]
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	3b02      	subs	r3, #2
 8006950:	429a      	cmp	r2, r3
 8006952:	d804      	bhi.n	800695e <create_chain+0x106>
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	1e5a      	subs	r2, r3, #1
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	791b      	ldrb	r3, [r3, #4]
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	711a      	strb	r2, [r3, #4]
 800696c:	e007      	b.n	800697e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d102      	bne.n	800697a <create_chain+0x122>
 8006974:	f04f 33ff 	mov.w	r3, #4294967295
 8006978:	e000      	b.n	800697c <create_chain+0x124>
 800697a:	2301      	movs	r3, #1
 800697c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800697e:	69fb      	ldr	r3, [r7, #28]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3720      	adds	r7, #32
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	3304      	adds	r3, #4
 800699e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	899b      	ldrh	r3, [r3, #12]
 80069a4:	461a      	mov	r2, r3
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	8952      	ldrh	r2, [r2, #10]
 80069b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	613a      	str	r2, [r7, #16]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <clmt_clust+0x42>
 80069c6:	2300      	movs	r3, #0
 80069c8:	e010      	b.n	80069ec <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d307      	bcc.n	80069e2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	3304      	adds	r3, #4
 80069de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069e0:	e7e9      	b.n	80069b6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80069e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	4413      	add	r3, r2
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a0e:	d204      	bcs.n	8006a1a <dir_sdi+0x22>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <dir_sdi+0x26>
		return FR_INT_ERR;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e071      	b.n	8006b02 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <dir_sdi+0x46>
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d902      	bls.n	8006a3e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10c      	bne.n	8006a5e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	8912      	ldrh	r2, [r2, #8]
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d301      	bcc.n	8006a54 <dir_sdi+0x5c>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e056      	b.n	8006b02 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	61da      	str	r2, [r3, #28]
 8006a5c:	e02d      	b.n	8006aba <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	895b      	ldrh	r3, [r3, #10]
 8006a62:	461a      	mov	r2, r3
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	899b      	ldrh	r3, [r3, #12]
 8006a68:	fb03 f302 	mul.w	r3, r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a6e:	e019      	b.n	8006aa4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6979      	ldr	r1, [r7, #20]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fc9a 	bl	80063ae <get_fat>
 8006a7a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d101      	bne.n	8006a88 <dir_sdi+0x90>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e03c      	b.n	8006b02 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d904      	bls.n	8006a98 <dir_sdi+0xa0>
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d301      	bcc.n	8006a9c <dir_sdi+0xa4>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e032      	b.n	8006b02 <dir_sdi+0x10a>
			ofs -= csz;
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d2e1      	bcs.n	8006a70 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006aac:	6979      	ldr	r1, [r7, #20]
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f7ff fc5e 	bl	8006370 <clust2sect>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <dir_sdi+0xd4>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e01a      	b.n	8006b02 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	899b      	ldrh	r3, [r3, #12]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006adc:	441a      	add	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	899b      	ldrh	r3, [r3, #12]
 8006aec:	461a      	mov	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006af4:	fb02 f200 	mul.w	r2, r2, r0
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	18ca      	adds	r2, r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	3320      	adds	r3, #32
 8006b20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <dir_next+0x28>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b30:	d301      	bcc.n	8006b36 <dir_next+0x2c>
 8006b32:	2304      	movs	r3, #4
 8006b34:	e0bb      	b.n	8006cae <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	899b      	ldrh	r3, [r3, #12]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b42:	fb02 f201 	mul.w	r2, r2, r1
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f040 809d 	bne.w	8006c88 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	095b      	lsrs	r3, r3, #5
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	8912      	ldrh	r2, [r2, #8]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	f0c0 808d 	bcc.w	8006c88 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	61da      	str	r2, [r3, #28]
 8006b74:	2304      	movs	r3, #4
 8006b76:	e09a      	b.n	8006cae <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	899b      	ldrh	r3, [r3, #12]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	8952      	ldrh	r2, [r2, #10]
 8006b88:	3a01      	subs	r2, #1
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d17b      	bne.n	8006c88 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f7ff fc08 	bl	80063ae <get_fat>
 8006b9e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d801      	bhi.n	8006baa <dir_next+0xa0>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e081      	b.n	8006cae <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb0:	d101      	bne.n	8006bb6 <dir_next+0xac>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e07b      	b.n	8006cae <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d359      	bcc.n	8006c74 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	61da      	str	r2, [r3, #28]
 8006bcc:	2304      	movs	r3, #4
 8006bce:	e06e      	b.n	8006cae <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f7ff fe3d 	bl	8006858 <create_chain>
 8006bde:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <dir_next+0xe0>
 8006be6:	2307      	movs	r3, #7
 8006be8:	e061      	b.n	8006cae <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <dir_next+0xea>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e05c      	b.n	8006cae <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfa:	d101      	bne.n	8006c00 <dir_next+0xf6>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e056      	b.n	8006cae <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7ff fad3 	bl	80061ac <sync_window>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <dir_next+0x106>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e04e      	b.n	8006cae <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	899b      	ldrh	r3, [r3, #12]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	f7ff f8ca 	bl	8005db6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c22:	2300      	movs	r3, #0
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	6979      	ldr	r1, [r7, #20]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7ff fba1 	bl	8006370 <clust2sect>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38
 8006c34:	e012      	b.n	8006c5c <dir_next+0x152>
						fs->wflag = 1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff fab5 	bl	80061ac <sync_window>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <dir_next+0x142>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e030      	b.n	8006cae <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	895b      	ldrh	r3, [r3, #10]
 8006c60:	461a      	mov	r2, r3
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d3e6      	bcc.n	8006c36 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006c7a:	6979      	ldr	r1, [r7, #20]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7ff fb77 	bl	8006370 <clust2sect>
 8006c82:	4602      	mov	r2, r0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	899b      	ldrh	r3, [r3, #12]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ca0:	fb02 f200 	mul.w	r2, r2, r0
 8006ca4:	1a9b      	subs	r3, r3, r2
 8006ca6:	18ca      	adds	r2, r1, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b086      	sub	sp, #24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff fe95 	bl	80069f8 <dir_sdi>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d12b      	bne.n	8006d30 <dir_alloc+0x7a>
		n = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff faa6 	bl	8006234 <move_window>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d11d      	bne.n	8006d2e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2be5      	cmp	r3, #229	; 0xe5
 8006cfa:	d004      	beq.n	8006d06 <dir_alloc+0x50>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d107      	bne.n	8006d16 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	613b      	str	r3, [r7, #16]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d102      	bne.n	8006d1a <dir_alloc+0x64>
 8006d14:	e00c      	b.n	8006d30 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff fef4 	bl	8006b0a <dir_next>
 8006d22:	4603      	mov	r3, r0
 8006d24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0d7      	beq.n	8006cdc <dir_alloc+0x26>
 8006d2c:	e000      	b.n	8006d30 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006d2e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d101      	bne.n	8006d3a <dir_alloc+0x84>
 8006d36:	2307      	movs	r3, #7
 8006d38:	75fb      	strb	r3, [r7, #23]
	return res;
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	331a      	adds	r3, #26
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe ff8c 	bl	8005c70 <ld_word>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d109      	bne.n	8006d78 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	3314      	adds	r3, #20
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe ff81 	bl	8005c70 <ld_word>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	041b      	lsls	r3, r3, #16
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006d78:	68fb      	ldr	r3, [r7, #12]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	331a      	adds	r3, #26
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	b292      	uxth	r2, r2
 8006d96:	4611      	mov	r1, r2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe ffa4 	bl	8005ce6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d109      	bne.n	8006dba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f103 0214 	add.w	r2, r3, #20
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	0c1b      	lsrs	r3, r3, #16
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f7fe ff96 	bl	8005ce6 <st_word>
	}
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	331a      	adds	r3, #26
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe ff4c 	bl	8005c70 <ld_word>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <cmp_lfn+0x1e>
 8006dde:	2300      	movs	r3, #0
 8006de0:	e059      	b.n	8006e96 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	4613      	mov	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006df8:	2301      	movs	r3, #1
 8006dfa:	81fb      	strh	r3, [r7, #14]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	e033      	b.n	8006e6a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006e02:	4a27      	ldr	r2, [pc, #156]	; (8006ea0 <cmp_lfn+0xdc>)
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4413      	add	r3, r2
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	4413      	add	r3, r2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fe ff2d 	bl	8005c70 <ld_word>
 8006e16:	4603      	mov	r3, r0
 8006e18:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006e1a:	89fb      	ldrh	r3, [r7, #14]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01a      	beq.n	8006e56 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2bfe      	cmp	r3, #254	; 0xfe
 8006e24:	d812      	bhi.n	8006e4c <cmp_lfn+0x88>
 8006e26:	89bb      	ldrh	r3, [r7, #12]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f002 f9a3 	bl	8009174 <ff_wtoupper>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	461c      	mov	r4, r3
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	617a      	str	r2, [r7, #20]
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f002 f997 	bl	8009174 <ff_wtoupper>
 8006e46:	4603      	mov	r3, r0
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	d001      	beq.n	8006e50 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e022      	b.n	8006e96 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006e50:	89bb      	ldrh	r3, [r7, #12]
 8006e52:	81fb      	strh	r3, [r7, #14]
 8006e54:	e006      	b.n	8006e64 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006e56:	89bb      	ldrh	r3, [r7, #12]
 8006e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d001      	beq.n	8006e64 <cmp_lfn+0xa0>
 8006e60:	2300      	movs	r3, #0
 8006e62:	e018      	b.n	8006e96 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	3301      	adds	r3, #1
 8006e68:	613b      	str	r3, [r7, #16]
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b0c      	cmp	r3, #12
 8006e6e:	d9c8      	bls.n	8006e02 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <cmp_lfn+0xd0>
 8006e7c:	89fb      	ldrh	r3, [r7, #14]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d008      	beq.n	8006e94 <cmp_lfn+0xd0>
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <cmp_lfn+0xd0>
 8006e90:	2300      	movs	r3, #0
 8006e92:	e000      	b.n	8006e96 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006e94:	2301      	movs	r3, #1
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd90      	pop	{r4, r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	0800e700 	.word	0x0800e700

08006ea4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	71fb      	strb	r3, [r7, #7]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	330d      	adds	r3, #13
 8006ebe:	79ba      	ldrb	r2, [r7, #6]
 8006ec0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	330b      	adds	r3, #11
 8006ec6:	220f      	movs	r2, #15
 8006ec8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	2200      	movs	r2, #0
 8006ed0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	331a      	adds	r3, #26
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe ff04 	bl	8005ce6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	82fb      	strh	r3, [r7, #22]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006ef6:	8afb      	ldrh	r3, [r7, #22]
 8006ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d007      	beq.n	8006f10 <put_lfn+0x6c>
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	61fa      	str	r2, [r7, #28]
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006f10:	4a17      	ldr	r2, [pc, #92]	; (8006f70 <put_lfn+0xcc>)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	4413      	add	r3, r2
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	8afa      	ldrh	r2, [r7, #22]
 8006f20:	4611      	mov	r1, r2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe fedf 	bl	8005ce6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006f28:	8afb      	ldrh	r3, [r7, #22]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <put_lfn+0x90>
 8006f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f32:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	3301      	adds	r3, #1
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b0c      	cmp	r3, #12
 8006f3e:	d9da      	bls.n	8006ef6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006f40:	8afb      	ldrh	r3, [r7, #22]
 8006f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d006      	beq.n	8006f58 <put_lfn+0xb4>
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d103      	bne.n	8006f60 <put_lfn+0xbc>
 8006f58:	79fb      	ldrb	r3, [r7, #7]
 8006f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	79fa      	ldrb	r2, [r7, #7]
 8006f64:	701a      	strb	r2, [r3, #0]
}
 8006f66:	bf00      	nop
 8006f68:	3720      	adds	r7, #32
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	0800e700 	.word	0x0800e700

08006f74 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08c      	sub	sp, #48	; 0x30
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006f82:	220b      	movs	r2, #11
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7fe fef4 	bl	8005d74 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	d92b      	bls.n	8006fea <gen_numname+0x76>
		sr = seq;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006f96:	e022      	b.n	8006fde <gen_numname+0x6a>
			wc = *lfn++;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	1c9a      	adds	r2, r3, #2
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa6:	e017      	b.n	8006fd8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	005a      	lsls	r2, r3, #1
 8006fac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	4413      	add	r3, r2
 8006fb4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006fb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fb8:	085b      	lsrs	r3, r3, #1
 8006fba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <gen_numname+0x5e>
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006fcc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006fd0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	2b0f      	cmp	r3, #15
 8006fdc:	d9e4      	bls.n	8006fa8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1d8      	bne.n	8006f98 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006fea:	2307      	movs	r3, #7
 8006fec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	3330      	adds	r3, #48	; 0x30
 8006ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007002:	2b39      	cmp	r3, #57	; 0x39
 8007004:	d904      	bls.n	8007010 <gen_numname+0x9c>
 8007006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800700a:	3307      	adds	r3, #7
 800700c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	1e5a      	subs	r2, r3, #1
 8007014:	62ba      	str	r2, [r7, #40]	; 0x28
 8007016:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800701a:	4413      	add	r3, r2
 800701c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007020:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	091b      	lsrs	r3, r3, #4
 8007028:	603b      	str	r3, [r7, #0]
	} while (seq);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1de      	bne.n	8006fee <gen_numname+0x7a>
	ns[i] = '~';
 8007030:	f107 0214 	add.w	r2, r7, #20
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	4413      	add	r3, r2
 8007038:	227e      	movs	r2, #126	; 0x7e
 800703a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800703c:	2300      	movs	r3, #0
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
 8007040:	e002      	b.n	8007048 <gen_numname+0xd4>
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	3301      	adds	r3, #1
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
 8007048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	429a      	cmp	r2, r3
 800704e:	d205      	bcs.n	800705c <gen_numname+0xe8>
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	4413      	add	r3, r2
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b20      	cmp	r3, #32
 800705a:	d1f2      	bne.n	8007042 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	2b07      	cmp	r3, #7
 8007060:	d808      	bhi.n	8007074 <gen_numname+0x100>
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	62ba      	str	r2, [r7, #40]	; 0x28
 8007068:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800706c:	4413      	add	r3, r2
 800706e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007072:	e000      	b.n	8007076 <gen_numname+0x102>
 8007074:	2120      	movs	r1, #32
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	627a      	str	r2, [r7, #36]	; 0x24
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	460a      	mov	r2, r1
 8007082:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	2b07      	cmp	r3, #7
 8007088:	d9e8      	bls.n	800705c <gen_numname+0xe8>
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	3730      	adds	r7, #48	; 0x30
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80070a0:	230b      	movs	r3, #11
 80070a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	0852      	lsrs	r2, r2, #1
 80070aa:	01db      	lsls	r3, r3, #7
 80070ac:	4313      	orrs	r3, r2
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	1c59      	adds	r1, r3, #1
 80070b4:	6079      	str	r1, [r7, #4]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	4413      	add	r3, r2
 80070ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3b01      	subs	r3, #1
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1ed      	bne.n	80070a4 <sum_sfn+0x10>
	return sum;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b086      	sub	sp, #24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80070e4:	2100      	movs	r1, #0
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fc86 	bl	80069f8 <dir_sdi>
 80070ec:	4603      	mov	r3, r0
 80070ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <dir_find+0x24>
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	e0a9      	b.n	800724e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80070fa:	23ff      	movs	r3, #255	; 0xff
 80070fc:	753b      	strb	r3, [r7, #20]
 80070fe:	7d3b      	ldrb	r3, [r7, #20]
 8007100:	757b      	strb	r3, [r7, #21]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f04f 32ff 	mov.w	r2, #4294967295
 8007108:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	4619      	mov	r1, r3
 8007110:	6938      	ldr	r0, [r7, #16]
 8007112:	f7ff f88f 	bl	8006234 <move_window>
 8007116:	4603      	mov	r3, r0
 8007118:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f040 8090 	bne.w	8007242 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800712a:	7dbb      	ldrb	r3, [r7, #22]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <dir_find+0x60>
 8007130:	2304      	movs	r3, #4
 8007132:	75fb      	strb	r3, [r7, #23]
 8007134:	e08a      	b.n	800724c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	330b      	adds	r3, #11
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007142:	73fb      	strb	r3, [r7, #15]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	7bfa      	ldrb	r2, [r7, #15]
 8007148:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800714a:	7dbb      	ldrb	r3, [r7, #22]
 800714c:	2be5      	cmp	r3, #229	; 0xe5
 800714e:	d007      	beq.n	8007160 <dir_find+0x8a>
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <dir_find+0x98>
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b0f      	cmp	r3, #15
 800715e:	d006      	beq.n	800716e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007160:	23ff      	movs	r3, #255	; 0xff
 8007162:	757b      	strb	r3, [r7, #21]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f04f 32ff 	mov.w	r2, #4294967295
 800716a:	631a      	str	r2, [r3, #48]	; 0x30
 800716c:	e05e      	b.n	800722c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b0f      	cmp	r3, #15
 8007172:	d136      	bne.n	80071e2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d154      	bne.n	800722c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007182:	7dbb      	ldrb	r3, [r7, #22]
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00d      	beq.n	80071a8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	7b5b      	ldrb	r3, [r3, #13]
 8007192:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007194:	7dbb      	ldrb	r3, [r7, #22]
 8007196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719a:	75bb      	strb	r3, [r7, #22]
 800719c:	7dbb      	ldrb	r3, [r7, #22]
 800719e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80071a8:	7dba      	ldrb	r2, [r7, #22]
 80071aa:	7d7b      	ldrb	r3, [r7, #21]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d115      	bne.n	80071dc <dir_find+0x106>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	330d      	adds	r3, #13
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	7d3a      	ldrb	r2, [r7, #20]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d10e      	bne.n	80071dc <dir_find+0x106>
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	4619      	mov	r1, r3
 80071c8:	4610      	mov	r0, r2
 80071ca:	f7ff fdfb 	bl	8006dc4 <cmp_lfn>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <dir_find+0x106>
 80071d4:	7d7b      	ldrb	r3, [r7, #21]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	e000      	b.n	80071de <dir_find+0x108>
 80071dc:	23ff      	movs	r3, #255	; 0xff
 80071de:	757b      	strb	r3, [r7, #21]
 80071e0:	e024      	b.n	800722c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80071e2:	7d7b      	ldrb	r3, [r7, #21]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <dir_find+0x126>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff ff51 	bl	8007094 <sum_sfn>
 80071f2:	4603      	mov	r3, r0
 80071f4:	461a      	mov	r2, r3
 80071f6:	7d3b      	ldrb	r3, [r7, #20]
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d024      	beq.n	8007246 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <dir_find+0x14a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a18      	ldr	r0, [r3, #32]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3324      	adds	r3, #36	; 0x24
 8007212:	220b      	movs	r2, #11
 8007214:	4619      	mov	r1, r3
 8007216:	f7fe fde9 	bl	8005dec <mem_cmp>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d014      	beq.n	800724a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007220:	23ff      	movs	r3, #255	; 0xff
 8007222:	757b      	strb	r3, [r7, #21]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f04f 32ff 	mov.w	r2, #4294967295
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff fc6b 	bl	8006b0a <dir_next>
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f43f af65 	beq.w	800710a <dir_find+0x34>
 8007240:	e004      	b.n	800724c <dir_find+0x176>
		if (res != FR_OK) break;
 8007242:	bf00      	nop
 8007244:	e002      	b.n	800724c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007246:	bf00      	nop
 8007248:	e000      	b.n	800724c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800724a:	bf00      	nop

	return res;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08c      	sub	sp, #48	; 0x30
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800726c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <dir_register+0x20>
 8007274:	2306      	movs	r3, #6
 8007276:	e0e0      	b.n	800743a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007278:	2300      	movs	r3, #0
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
 800727c:	e002      	b.n	8007284 <dir_register+0x2c>
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	3301      	adds	r3, #1
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	4413      	add	r3, r2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f4      	bne.n	800727e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800729a:	f107 030c 	add.w	r3, r7, #12
 800729e:	220c      	movs	r2, #12
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe fd67 	bl	8005d74 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d032      	beq.n	8007316 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2240      	movs	r2, #64	; 0x40
 80072b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80072b8:	2301      	movs	r3, #1
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80072bc:	e016      	b.n	80072ec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	f107 010c 	add.w	r1, r7, #12
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	f7ff fe51 	bl	8006f74 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff feff 	bl	80070d6 <dir_find>
 80072d8:	4603      	mov	r3, r0
 80072da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80072de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	3301      	adds	r3, #1
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	2b63      	cmp	r3, #99	; 0x63
 80072f0:	d9e5      	bls.n	80072be <dir_register+0x66>
 80072f2:	e000      	b.n	80072f6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80072f4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	2b64      	cmp	r3, #100	; 0x64
 80072fa:	d101      	bne.n	8007300 <dir_register+0xa8>
 80072fc:	2307      	movs	r3, #7
 80072fe:	e09c      	b.n	800743a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007304:	2b04      	cmp	r3, #4
 8007306:	d002      	beq.n	800730e <dir_register+0xb6>
 8007308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800730c:	e095      	b.n	800743a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800730e:	7dfa      	ldrb	r2, [r7, #23]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d007      	beq.n	8007330 <dir_register+0xd8>
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	330c      	adds	r3, #12
 8007324:	4a47      	ldr	r2, [pc, #284]	; (8007444 <dir_register+0x1ec>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	089b      	lsrs	r3, r3, #2
 800732c:	3301      	adds	r3, #1
 800732e:	e000      	b.n	8007332 <dir_register+0xda>
 8007330:	2301      	movs	r3, #1
 8007332:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007334:	6a39      	ldr	r1, [r7, #32]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff fcbd 	bl	8006cb6 <dir_alloc>
 800733c:	4603      	mov	r3, r0
 800733e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007346:	2b00      	cmp	r3, #0
 8007348:	d148      	bne.n	80073dc <dir_register+0x184>
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	3b01      	subs	r3, #1
 800734e:	623b      	str	r3, [r7, #32]
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d042      	beq.n	80073dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695a      	ldr	r2, [r3, #20]
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	015b      	lsls	r3, r3, #5
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff fb48 	bl	80069f8 <dir_sdi>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800736e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007372:	2b00      	cmp	r3, #0
 8007374:	d132      	bne.n	80073dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3324      	adds	r3, #36	; 0x24
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff fe8a 	bl	8007094 <sum_sfn>
 8007380:	4603      	mov	r3, r0
 8007382:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	4619      	mov	r1, r3
 800738a:	69f8      	ldr	r0, [r7, #28]
 800738c:	f7fe ff52 	bl	8006234 <move_window>
 8007390:	4603      	mov	r3, r0
 8007392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800739a:	2b00      	cmp	r3, #0
 800739c:	d11d      	bne.n	80073da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	6918      	ldr	r0, [r3, #16]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a19      	ldr	r1, [r3, #32]
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	7efb      	ldrb	r3, [r7, #27]
 80073ac:	f7ff fd7a 	bl	8006ea4 <put_lfn>
				fs->wflag = 1;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2201      	movs	r2, #1
 80073b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80073b6:	2100      	movs	r1, #0
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fba6 	bl	8006b0a <dir_next>
 80073be:	4603      	mov	r3, r0
 80073c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80073c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d107      	bne.n	80073dc <dir_register+0x184>
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	623b      	str	r3, [r7, #32]
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1d5      	bne.n	8007384 <dir_register+0x12c>
 80073d8:	e000      	b.n	80073dc <dir_register+0x184>
				if (res != FR_OK) break;
 80073da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80073dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d128      	bne.n	8007436 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	4619      	mov	r1, r3
 80073ea:	69f8      	ldr	r0, [r7, #28]
 80073ec:	f7fe ff22 	bl	8006234 <move_window>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80073f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d11b      	bne.n	8007436 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	2220      	movs	r2, #32
 8007404:	2100      	movs	r1, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe fcd5 	bl	8005db6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a18      	ldr	r0, [r3, #32]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3324      	adds	r3, #36	; 0x24
 8007414:	220b      	movs	r2, #11
 8007416:	4619      	mov	r1, r3
 8007418:	f7fe fcac 	bl	8005d74 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	330c      	adds	r3, #12
 8007428:	f002 0218 	and.w	r2, r2, #24
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2201      	movs	r2, #1
 8007434:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800743a:	4618      	mov	r0, r3
 800743c:	3730      	adds	r7, #48	; 0x30
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	4ec4ec4f 	.word	0x4ec4ec4f

08007448 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	; 0x28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	2300      	movs	r3, #0
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	61ba      	str	r2, [r7, #24]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007478:	2b1f      	cmp	r3, #31
 800747a:	d940      	bls.n	80074fe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800747c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800747e:	2b2f      	cmp	r3, #47	; 0x2f
 8007480:	d006      	beq.n	8007490 <create_name+0x48>
 8007482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007484:	2b5c      	cmp	r3, #92	; 0x5c
 8007486:	d110      	bne.n	80074aa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007488:	e002      	b.n	8007490 <create_name+0x48>
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	3301      	adds	r3, #1
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	4413      	add	r3, r2
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b2f      	cmp	r3, #47	; 0x2f
 800749a:	d0f6      	beq.n	800748a <create_name+0x42>
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	4413      	add	r3, r2
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b5c      	cmp	r3, #92	; 0x5c
 80074a6:	d0f0      	beq.n	800748a <create_name+0x42>
			break;
 80074a8:	e02a      	b.n	8007500 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2bfe      	cmp	r3, #254	; 0xfe
 80074ae:	d901      	bls.n	80074b4 <create_name+0x6c>
 80074b0:	2306      	movs	r3, #6
 80074b2:	e177      	b.n	80077a4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80074b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80074ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074bc:	2101      	movs	r1, #1
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 fe1c 	bl	80090fc <ff_convert>
 80074c4:	4603      	mov	r3, r0
 80074c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80074c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <create_name+0x8a>
 80074ce:	2306      	movs	r3, #6
 80074d0:	e168      	b.n	80077a4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80074d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d4:	2b7f      	cmp	r3, #127	; 0x7f
 80074d6:	d809      	bhi.n	80074ec <create_name+0xa4>
 80074d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074da:	4619      	mov	r1, r3
 80074dc:	48b3      	ldr	r0, [pc, #716]	; (80077ac <create_name+0x364>)
 80074de:	f7fe fcac 	bl	8005e3a <chk_chr>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <create_name+0xa4>
 80074e8:	2306      	movs	r3, #6
 80074ea:	e15b      	b.n	80077a4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	617a      	str	r2, [r7, #20]
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074fa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80074fc:	e7b4      	b.n	8007468 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80074fe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	441a      	add	r2, r3
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800750a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800750c:	2b1f      	cmp	r3, #31
 800750e:	d801      	bhi.n	8007514 <create_name+0xcc>
 8007510:	2304      	movs	r3, #4
 8007512:	e000      	b.n	8007516 <create_name+0xce>
 8007514:	2300      	movs	r3, #0
 8007516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800751a:	e011      	b.n	8007540 <create_name+0xf8>
		w = lfn[di - 1];
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007522:	3b01      	subs	r3, #1
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800752e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007530:	2b20      	cmp	r3, #32
 8007532:	d002      	beq.n	800753a <create_name+0xf2>
 8007534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007536:	2b2e      	cmp	r3, #46	; 0x2e
 8007538:	d106      	bne.n	8007548 <create_name+0x100>
		di--;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	3b01      	subs	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1ea      	bne.n	800751c <create_name+0xd4>
 8007546:	e000      	b.n	800754a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007548:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	2200      	movs	r2, #0
 8007554:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <create_name+0x118>
 800755c:	2306      	movs	r3, #6
 800755e:	e121      	b.n	80077a4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3324      	adds	r3, #36	; 0x24
 8007564:	220b      	movs	r2, #11
 8007566:	2120      	movs	r1, #32
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe fc24 	bl	8005db6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800756e:	2300      	movs	r3, #0
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	e002      	b.n	800757a <create_name+0x132>
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	3301      	adds	r3, #1
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	2b20      	cmp	r3, #32
 8007586:	d0f5      	beq.n	8007574 <create_name+0x12c>
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	2b2e      	cmp	r3, #46	; 0x2e
 8007594:	d0ee      	beq.n	8007574 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d009      	beq.n	80075b0 <create_name+0x168>
 800759c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a0:	f043 0303 	orr.w	r3, r3, #3
 80075a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80075a8:	e002      	b.n	80075b0 <create_name+0x168>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <create_name+0x182>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	3b01      	subs	r3, #1
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	2b2e      	cmp	r3, #46	; 0x2e
 80075c8:	d1ef      	bne.n	80075aa <create_name+0x162>

	i = b = 0; ni = 8;
 80075ca:	2300      	movs	r3, #0
 80075cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80075d0:	2300      	movs	r3, #0
 80075d2:	623b      	str	r3, [r7, #32]
 80075d4:	2308      	movs	r3, #8
 80075d6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	61ba      	str	r2, [r7, #24]
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80075e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8090 	beq.w	8007710 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80075f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	d006      	beq.n	8007604 <create_name+0x1bc>
 80075f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f8:	2b2e      	cmp	r3, #46	; 0x2e
 80075fa:	d10a      	bne.n	8007612 <create_name+0x1ca>
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	429a      	cmp	r2, r3
 8007602:	d006      	beq.n	8007612 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007608:	f043 0303 	orr.w	r3, r3, #3
 800760c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007610:	e07d      	b.n	800770e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007612:	6a3a      	ldr	r2, [r7, #32]
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	429a      	cmp	r2, r3
 8007618:	d203      	bcs.n	8007622 <create_name+0x1da>
 800761a:	69ba      	ldr	r2, [r7, #24]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	429a      	cmp	r2, r3
 8007620:	d123      	bne.n	800766a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	2b0b      	cmp	r3, #11
 8007626:	d106      	bne.n	8007636 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800762c:	f043 0303 	orr.w	r3, r3, #3
 8007630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007634:	e06f      	b.n	8007716 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	429a      	cmp	r2, r3
 800763c:	d005      	beq.n	800764a <create_name+0x202>
 800763e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007642:	f043 0303 	orr.w	r3, r3, #3
 8007646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	429a      	cmp	r2, r3
 8007650:	d860      	bhi.n	8007714 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	2308      	movs	r3, #8
 8007658:	623b      	str	r3, [r7, #32]
 800765a:	230b      	movs	r3, #11
 800765c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800765e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007668:	e051      	b.n	800770e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800766a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800766c:	2b7f      	cmp	r3, #127	; 0x7f
 800766e:	d914      	bls.n	800769a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007672:	2100      	movs	r1, #0
 8007674:	4618      	mov	r0, r3
 8007676:	f001 fd41 	bl	80090fc <ff_convert>
 800767a:	4603      	mov	r3, r0
 800767c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800767e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007680:	2b00      	cmp	r3, #0
 8007682:	d004      	beq.n	800768e <create_name+0x246>
 8007684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007686:	3b80      	subs	r3, #128	; 0x80
 8007688:	4a49      	ldr	r2, [pc, #292]	; (80077b0 <create_name+0x368>)
 800768a:	5cd3      	ldrb	r3, [r2, r3]
 800768c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800768e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007692:	f043 0302 	orr.w	r3, r3, #2
 8007696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800769a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	d007      	beq.n	80076b0 <create_name+0x268>
 80076a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076a2:	4619      	mov	r1, r3
 80076a4:	4843      	ldr	r0, [pc, #268]	; (80077b4 <create_name+0x36c>)
 80076a6:	f7fe fbc8 	bl	8005e3a <chk_chr>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d008      	beq.n	80076c2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80076b0:	235f      	movs	r3, #95	; 0x5f
 80076b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b8:	f043 0303 	orr.w	r3, r3, #3
 80076bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076c0:	e01b      	b.n	80076fa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80076c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076c4:	2b40      	cmp	r3, #64	; 0x40
 80076c6:	d909      	bls.n	80076dc <create_name+0x294>
 80076c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076ca:	2b5a      	cmp	r3, #90	; 0x5a
 80076cc:	d806      	bhi.n	80076dc <create_name+0x294>
					b |= 2;
 80076ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076d2:	f043 0302 	orr.w	r3, r3, #2
 80076d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80076da:	e00e      	b.n	80076fa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80076dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076de:	2b60      	cmp	r3, #96	; 0x60
 80076e0:	d90b      	bls.n	80076fa <create_name+0x2b2>
 80076e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076e4:	2b7a      	cmp	r3, #122	; 0x7a
 80076e6:	d808      	bhi.n	80076fa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80076e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80076f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076f6:	3b20      	subs	r3, #32
 80076f8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	623a      	str	r2, [r7, #32]
 8007700:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007702:	b2d1      	uxtb	r1, r2
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	4413      	add	r3, r2
 8007708:	460a      	mov	r2, r1
 800770a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800770e:	e763      	b.n	80075d8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007710:	bf00      	nop
 8007712:	e000      	b.n	8007716 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007714:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800771c:	2be5      	cmp	r3, #229	; 0xe5
 800771e:	d103      	bne.n	8007728 <create_name+0x2e0>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2205      	movs	r2, #5
 8007724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b08      	cmp	r3, #8
 800772c:	d104      	bne.n	8007738 <create_name+0x2f0>
 800772e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800773c:	f003 030c 	and.w	r3, r3, #12
 8007740:	2b0c      	cmp	r3, #12
 8007742:	d005      	beq.n	8007750 <create_name+0x308>
 8007744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007748:	f003 0303 	and.w	r3, r3, #3
 800774c:	2b03      	cmp	r3, #3
 800774e:	d105      	bne.n	800775c <create_name+0x314>
 8007750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007754:	f043 0302 	orr.w	r3, r3, #2
 8007758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800775c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d117      	bne.n	8007798 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007768:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	2b01      	cmp	r3, #1
 8007772:	d105      	bne.n	8007780 <create_name+0x338>
 8007774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007778:	f043 0310 	orr.w	r3, r3, #16
 800777c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007780:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007784:	f003 030c 	and.w	r3, r3, #12
 8007788:	2b04      	cmp	r3, #4
 800778a:	d105      	bne.n	8007798 <create_name+0x350>
 800778c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007790:	f043 0308 	orr.w	r3, r3, #8
 8007794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800779e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80077a2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3728      	adds	r7, #40	; 0x28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	0800e538 	.word	0x0800e538
 80077b0:	0800e680 	.word	0x0800e680
 80077b4:	0800e544 	.word	0x0800e544

080077b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80077cc:	e002      	b.n	80077d4 <follow_path+0x1c>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b2f      	cmp	r3, #47	; 0x2f
 80077da:	d0f8      	beq.n	80077ce <follow_path+0x16>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b5c      	cmp	r3, #92	; 0x5c
 80077e2:	d0f4      	beq.n	80077ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2200      	movs	r2, #0
 80077e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b1f      	cmp	r3, #31
 80077f0:	d80a      	bhi.n	8007808 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2280      	movs	r2, #128	; 0x80
 80077f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80077fa:	2100      	movs	r1, #0
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff f8fb 	bl	80069f8 <dir_sdi>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]
 8007806:	e048      	b.n	800789a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007808:	463b      	mov	r3, r7
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff fe1b 	bl	8007448 <create_name>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d139      	bne.n	8007890 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff fc5a 	bl	80070d6 <dir_find>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800782c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00a      	beq.n	800784a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	2b04      	cmp	r3, #4
 8007838:	d12c      	bne.n	8007894 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800783a:	7afb      	ldrb	r3, [r7, #11]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d127      	bne.n	8007894 <follow_path+0xdc>
 8007844:	2305      	movs	r3, #5
 8007846:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007848:	e024      	b.n	8007894 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d121      	bne.n	8007898 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	799b      	ldrb	r3, [r3, #6]
 8007858:	f003 0310 	and.w	r3, r3, #16
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007860:	2305      	movs	r3, #5
 8007862:	75fb      	strb	r3, [r7, #23]
 8007864:	e019      	b.n	800789a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	8992      	ldrh	r2, [r2, #12]
 8007874:	fbb3 f0f2 	udiv	r0, r3, r2
 8007878:	fb02 f200 	mul.w	r2, r2, r0
 800787c:	1a9b      	subs	r3, r3, r2
 800787e:	440b      	add	r3, r1
 8007880:	4619      	mov	r1, r3
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f7ff fa5e 	bl	8006d44 <ld_clust>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800788e:	e7bb      	b.n	8007808 <follow_path+0x50>
			if (res != FR_OK) break;
 8007890:	bf00      	nop
 8007892:	e002      	b.n	800789a <follow_path+0xe2>
				break;
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007898:	bf00      	nop
			}
		}
	}

	return res;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80078ac:	f04f 33ff 	mov.w	r3, #4294967295
 80078b0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d031      	beq.n	800791e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	e002      	b.n	80078c8 <get_ldnumber+0x24>
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	3301      	adds	r3, #1
 80078c6:	617b      	str	r3, [r7, #20]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b1f      	cmp	r3, #31
 80078ce:	d903      	bls.n	80078d8 <get_ldnumber+0x34>
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2b3a      	cmp	r3, #58	; 0x3a
 80078d6:	d1f4      	bne.n	80078c2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b3a      	cmp	r3, #58	; 0x3a
 80078de:	d11c      	bne.n	800791a <get_ldnumber+0x76>
			tp = *path;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	60fa      	str	r2, [r7, #12]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	3b30      	subs	r3, #48	; 0x30
 80078f0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b09      	cmp	r3, #9
 80078f6:	d80e      	bhi.n	8007916 <get_ldnumber+0x72>
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d10a      	bne.n	8007916 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d107      	bne.n	8007916 <get_ldnumber+0x72>
					vol = (int)i;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	3301      	adds	r3, #1
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	e002      	b.n	8007920 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800791a:	2300      	movs	r3, #0
 800791c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800791e:	693b      	ldr	r3, [r7, #16]
}
 8007920:	4618      	mov	r0, r3
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	70da      	strb	r2, [r3, #3]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f04f 32ff 	mov.w	r2, #4294967295
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fe fc74 	bl	8006234 <move_window>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <check_fs+0x2a>
 8007952:	2304      	movs	r3, #4
 8007954:	e038      	b.n	80079c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	333c      	adds	r3, #60	; 0x3c
 800795a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe f986 	bl	8005c70 <ld_word>
 8007964:	4603      	mov	r3, r0
 8007966:	461a      	mov	r2, r3
 8007968:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800796c:	429a      	cmp	r2, r3
 800796e:	d001      	beq.n	8007974 <check_fs+0x48>
 8007970:	2303      	movs	r3, #3
 8007972:	e029      	b.n	80079c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797a:	2be9      	cmp	r3, #233	; 0xe9
 800797c:	d009      	beq.n	8007992 <check_fs+0x66>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007984:	2beb      	cmp	r3, #235	; 0xeb
 8007986:	d11e      	bne.n	80079c6 <check_fs+0x9a>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800798e:	2b90      	cmp	r3, #144	; 0x90
 8007990:	d119      	bne.n	80079c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	333c      	adds	r3, #60	; 0x3c
 8007996:	3336      	adds	r3, #54	; 0x36
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe f981 	bl	8005ca0 <ld_dword>
 800799e:	4603      	mov	r3, r0
 80079a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80079a4:	4a0a      	ldr	r2, [pc, #40]	; (80079d0 <check_fs+0xa4>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d101      	bne.n	80079ae <check_fs+0x82>
 80079aa:	2300      	movs	r3, #0
 80079ac:	e00c      	b.n	80079c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	333c      	adds	r3, #60	; 0x3c
 80079b2:	3352      	adds	r3, #82	; 0x52
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe f973 	bl	8005ca0 <ld_dword>
 80079ba:	4603      	mov	r3, r0
 80079bc:	4a05      	ldr	r2, [pc, #20]	; (80079d4 <check_fs+0xa8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d101      	bne.n	80079c6 <check_fs+0x9a>
 80079c2:	2300      	movs	r3, #0
 80079c4:	e000      	b.n	80079c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80079c6:	2302      	movs	r3, #2
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	00544146 	.word	0x00544146
 80079d4:	33544146 	.word	0x33544146

080079d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b096      	sub	sp, #88	; 0x58
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f7ff ff59 	bl	80078a4 <get_ldnumber>
 80079f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80079f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da01      	bge.n	80079fe <find_volume+0x26>
 80079fa:	230b      	movs	r3, #11
 80079fc:	e26c      	b.n	8007ed8 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80079fe:	4aa4      	ldr	r2, [pc, #656]	; (8007c90 <find_volume+0x2b8>)
 8007a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <find_volume+0x3a>
 8007a0e:	230c      	movs	r3, #12
 8007a10:	e262      	b.n	8007ed8 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8007a12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a14:	f7fe fa2c 	bl	8005e70 <lock_fs>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <find_volume+0x4a>
 8007a1e:	230f      	movs	r3, #15
 8007a20:	e25a      	b.n	8007ed8 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	f023 0301 	bic.w	r3, r3, #1
 8007a2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01a      	beq.n	8007a6e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fe f879 	bl	8005b34 <disk_status>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10c      	bne.n	8007a6e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d007      	beq.n	8007a6a <find_volume+0x92>
 8007a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007a66:	230a      	movs	r3, #10
 8007a68:	e236      	b.n	8007ed8 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e234      	b.n	8007ed8 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	2200      	movs	r2, #0
 8007a72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fe f871 	bl	8005b68 <disk_initialize>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e21d      	b.n	8007ed8 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d007      	beq.n	8007ab2 <find_volume+0xda>
 8007aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007aae:	230a      	movs	r3, #10
 8007ab0:	e212      	b.n	8007ed8 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	7858      	ldrb	r0, [r3, #1]
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	330c      	adds	r3, #12
 8007aba:	461a      	mov	r2, r3
 8007abc:	2102      	movs	r1, #2
 8007abe:	f7fe f8b9 	bl	8005c34 <disk_ioctl>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <find_volume+0xf4>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e205      	b.n	8007ed8 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	899b      	ldrh	r3, [r3, #12]
 8007ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad4:	d80d      	bhi.n	8007af2 <find_volume+0x11a>
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	899b      	ldrh	r3, [r3, #12]
 8007ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ade:	d308      	bcc.n	8007af2 <find_volume+0x11a>
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	899b      	ldrh	r3, [r3, #12]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	899b      	ldrh	r3, [r3, #12]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4013      	ands	r3, r2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <find_volume+0x11e>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e1f0      	b.n	8007ed8 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007afa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007afe:	f7ff ff15 	bl	800792c <check_fs>
 8007b02:	4603      	mov	r3, r0
 8007b04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d14b      	bne.n	8007ba8 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b10:	2300      	movs	r3, #0
 8007b12:	643b      	str	r3, [r7, #64]	; 0x40
 8007b14:	e01f      	b.n	8007b56 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b24:	4413      	add	r3, r2
 8007b26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d006      	beq.n	8007b40 <find_volume+0x168>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	3308      	adds	r3, #8
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe f8b2 	bl	8005ca0 <ld_dword>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	e000      	b.n	8007b42 <find_volume+0x16a>
 8007b40:	2200      	movs	r2, #0
 8007b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007b4a:	440b      	add	r3, r1
 8007b4c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b52:	3301      	adds	r3, #1
 8007b54:	643b      	str	r3, [r7, #64]	; 0x40
 8007b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d9dc      	bls.n	8007b16 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <find_volume+0x194>
 8007b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007b74:	4413      	add	r3, r2
 8007b76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007b7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <find_volume+0x1b6>
 8007b82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b86:	f7ff fed1 	bl	800792c <check_fs>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	e000      	b.n	8007b90 <find_volume+0x1b8>
 8007b8e:	2303      	movs	r3, #3
 8007b90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d905      	bls.n	8007ba8 <find_volume+0x1d0>
 8007b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d9e1      	bls.n	8007b6c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d101      	bne.n	8007bb4 <find_volume+0x1dc>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e191      	b.n	8007ed8 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d901      	bls.n	8007bc0 <find_volume+0x1e8>
 8007bbc:	230d      	movs	r3, #13
 8007bbe:	e18b      	b.n	8007ed8 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	333c      	adds	r3, #60	; 0x3c
 8007bc4:	330b      	adds	r3, #11
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe f852 	bl	8005c70 <ld_word>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	899b      	ldrh	r3, [r3, #12]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d001      	beq.n	8007bdc <find_volume+0x204>
 8007bd8:	230d      	movs	r3, #13
 8007bda:	e17d      	b.n	8007ed8 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	333c      	adds	r3, #60	; 0x3c
 8007be0:	3316      	adds	r3, #22
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe f844 	bl	8005c70 <ld_word>
 8007be8:	4603      	mov	r3, r0
 8007bea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d106      	bne.n	8007c00 <find_volume+0x228>
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	333c      	adds	r3, #60	; 0x3c
 8007bf6:	3324      	adds	r3, #36	; 0x24
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe f851 	bl	8005ca0 <ld_dword>
 8007bfe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c04:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	789b      	ldrb	r3, [r3, #2]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d005      	beq.n	8007c24 <find_volume+0x24c>
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	789b      	ldrb	r3, [r3, #2]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d001      	beq.n	8007c24 <find_volume+0x24c>
 8007c20:	230d      	movs	r3, #13
 8007c22:	e159      	b.n	8007ed8 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	789b      	ldrb	r3, [r3, #2]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	895b      	ldrh	r3, [r3, #10]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <find_volume+0x280>
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	895b      	ldrh	r3, [r3, #10]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	895b      	ldrh	r3, [r3, #10]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <find_volume+0x284>
 8007c58:	230d      	movs	r3, #13
 8007c5a:	e13d      	b.n	8007ed8 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5e:	333c      	adds	r3, #60	; 0x3c
 8007c60:	3311      	adds	r3, #17
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe f804 	bl	8005c70 <ld_word>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	891b      	ldrh	r3, [r3, #8]
 8007c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c76:	8992      	ldrh	r2, [r2, #12]
 8007c78:	0952      	lsrs	r2, r2, #5
 8007c7a:	b292      	uxth	r2, r2
 8007c7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c80:	fb02 f201 	mul.w	r2, r2, r1
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <find_volume+0x2bc>
 8007c8c:	230d      	movs	r3, #13
 8007c8e:	e123      	b.n	8007ed8 <find_volume+0x500>
 8007c90:	20000148 	.word	0x20000148

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	333c      	adds	r3, #60	; 0x3c
 8007c98:	3313      	adds	r3, #19
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fd ffe8 	bl	8005c70 <ld_word>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <find_volume+0x2e0>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	333c      	adds	r3, #60	; 0x3c
 8007cae:	3320      	adds	r3, #32
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fd fff5 	bl	8005ca0 <ld_dword>
 8007cb6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	333c      	adds	r3, #60	; 0x3c
 8007cbc:	330e      	adds	r3, #14
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fd ffd6 	bl	8005c70 <ld_word>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007cc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <find_volume+0x2fa>
 8007cce:	230d      	movs	r3, #13
 8007cd0:	e102      	b.n	8007ed8 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007cd2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd6:	4413      	add	r3, r2
 8007cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cda:	8911      	ldrh	r1, [r2, #8]
 8007cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cde:	8992      	ldrh	r2, [r2, #12]
 8007ce0:	0952      	lsrs	r2, r2, #5
 8007ce2:	b292      	uxth	r2, r2
 8007ce4:	fbb1 f2f2 	udiv	r2, r1, r2
 8007ce8:	b292      	uxth	r2, r2
 8007cea:	4413      	add	r3, r2
 8007cec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d201      	bcs.n	8007cfa <find_volume+0x322>
 8007cf6:	230d      	movs	r3, #13
 8007cf8:	e0ee      	b.n	8007ed8 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d02:	8952      	ldrh	r2, [r2, #10]
 8007d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <find_volume+0x33c>
 8007d10:	230d      	movs	r3, #13
 8007d12:	e0e1      	b.n	8007ed8 <find_volume+0x500>
		fmt = FS_FAT32;
 8007d14:	2303      	movs	r3, #3
 8007d16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d802      	bhi.n	8007d2a <find_volume+0x352>
 8007d24:	2302      	movs	r3, #2
 8007d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d802      	bhi.n	8007d3a <find_volume+0x362>
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	1c9a      	adds	r2, r3, #2
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d46:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007d48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d4c:	441a      	add	r2, r3
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8007d52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	441a      	add	r2, r3
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8007d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d11e      	bne.n	8007da2 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	333c      	adds	r3, #60	; 0x3c
 8007d68:	332a      	adds	r3, #42	; 0x2a
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fd ff80 	bl	8005c70 <ld_word>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <find_volume+0x3a2>
 8007d76:	230d      	movs	r3, #13
 8007d78:	e0ae      	b.n	8007ed8 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	891b      	ldrh	r3, [r3, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <find_volume+0x3ae>
 8007d82:	230d      	movs	r3, #13
 8007d84:	e0a8      	b.n	8007ed8 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	333c      	adds	r3, #60	; 0x3c
 8007d8a:	332c      	adds	r3, #44	; 0x2c
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fd ff87 	bl	8005ca0 <ld_dword>
 8007d92:	4602      	mov	r2, r0
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8007da0:	e01f      	b.n	8007de2 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	891b      	ldrh	r3, [r3, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <find_volume+0x3d6>
 8007daa:	230d      	movs	r3, #13
 8007dac:	e094      	b.n	8007ed8 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db4:	441a      	add	r2, r3
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d103      	bne.n	8007dca <find_volume+0x3f2>
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	e00a      	b.n	8007de0 <find_volume+0x408>
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	4413      	add	r3, r2
 8007dd4:	085a      	lsrs	r2, r3, #1
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007de0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	899b      	ldrh	r3, [r3, #12]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dee:	440b      	add	r3, r1
 8007df0:	3b01      	subs	r3, #1
 8007df2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007df4:	8989      	ldrh	r1, [r1, #12]
 8007df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d201      	bcs.n	8007e02 <find_volume+0x42a>
 8007dfe:	230d      	movs	r3, #13
 8007e00:	e06a      	b.n	8007ed8 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295
 8007e08:	61da      	str	r2, [r3, #28]
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	69da      	ldr	r2, [r3, #28]
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d149      	bne.n	8007eb4 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	333c      	adds	r3, #60	; 0x3c
 8007e24:	3330      	adds	r3, #48	; 0x30
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fd ff22 	bl	8005c70 <ld_word>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d140      	bne.n	8007eb4 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e34:	3301      	adds	r3, #1
 8007e36:	4619      	mov	r1, r3
 8007e38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e3a:	f7fe f9fb 	bl	8006234 <move_window>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d137      	bne.n	8007eb4 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	2200      	movs	r2, #0
 8007e48:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	333c      	adds	r3, #60	; 0x3c
 8007e4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fd ff0c 	bl	8005c70 <ld_word>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d127      	bne.n	8007eb4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	333c      	adds	r3, #60	; 0x3c
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fd ff19 	bl	8005ca0 <ld_dword>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <find_volume+0x508>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d11e      	bne.n	8007eb4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	333c      	adds	r3, #60	; 0x3c
 8007e7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fd ff0e 	bl	8005ca0 <ld_dword>
 8007e84:	4603      	mov	r3, r0
 8007e86:	4a17      	ldr	r2, [pc, #92]	; (8007ee4 <find_volume+0x50c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d113      	bne.n	8007eb4 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	333c      	adds	r3, #60	; 0x3c
 8007e90:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fd ff03 	bl	8005ca0 <ld_dword>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	333c      	adds	r3, #60	; 0x3c
 8007ea4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fd fef9 	bl	8005ca0 <ld_dword>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007eba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <find_volume+0x510>)
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <find_volume+0x510>)
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <find_volume+0x510>)
 8007eca:	881a      	ldrh	r2, [r3, #0]
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007ed0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ed2:	f7fe f947 	bl	8006164 <clear_lock>
#endif
	return FR_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3758      	adds	r7, #88	; 0x58
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	41615252 	.word	0x41615252
 8007ee4:	61417272 	.word	0x61417272
 8007ee8:	2000014c 	.word	0x2000014c

08007eec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007ef6:	2309      	movs	r3, #9
 8007ef8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d02e      	beq.n	8007f5e <validate+0x72>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d02a      	beq.n	8007f5e <validate+0x72>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d025      	beq.n	8007f5e <validate+0x72>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	889a      	ldrh	r2, [r3, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	88db      	ldrh	r3, [r3, #6]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d11e      	bne.n	8007f5e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fd ffa3 	bl	8005e70 <lock_fs>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d014      	beq.n	8007f5a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	785b      	ldrb	r3, [r3, #1]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fd fdfc 	bl	8005b34 <disk_status>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <validate+0x60>
				res = FR_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]
 8007f4a:	e008      	b.n	8007f5e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2100      	movs	r1, #0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fd ffa2 	bl	8005e9c <unlock_fs>
 8007f58:	e001      	b.n	8007f5e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007f5a:	230f      	movs	r3, #15
 8007f5c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d102      	bne.n	8007f6a <validate+0x7e>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	e000      	b.n	8007f6c <validate+0x80>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	6013      	str	r3, [r2, #0]
	return res;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007f8e:	f107 0310 	add.w	r3, r7, #16
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff fc86 	bl	80078a4 <get_ldnumber>
 8007f98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	da01      	bge.n	8007fa4 <f_mount+0x28>
 8007fa0:	230b      	movs	r3, #11
 8007fa2:	e048      	b.n	8008036 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fa4:	4a26      	ldr	r2, [pc, #152]	; (8008040 <f_mount+0xc4>)
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00f      	beq.n	8007fd4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007fb4:	69b8      	ldr	r0, [r7, #24]
 8007fb6:	f7fe f8d5 	bl	8006164 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 f97d 	bl	80092be <ff_del_syncobj>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <f_mount+0x52>
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e033      	b.n	8008036 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00f      	beq.n	8007ffa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3314      	adds	r3, #20
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4610      	mov	r0, r2
 8007fec:	f001 f94c 	bl	8009288 <ff_cre_syncobj>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <f_mount+0x7e>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e01d      	b.n	8008036 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4910      	ldr	r1, [pc, #64]	; (8008040 <f_mount+0xc4>)
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <f_mount+0x94>
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d001      	beq.n	8008014 <f_mount+0x98>
 8008010:	2300      	movs	r3, #0
 8008012:	e010      	b.n	8008036 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008014:	f107 010c 	add.w	r1, r7, #12
 8008018:	f107 0308 	add.w	r3, r7, #8
 800801c:	2200      	movs	r2, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fcda 	bl	80079d8 <find_volume>
 8008024:	4603      	mov	r3, r0
 8008026:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	7dfa      	ldrb	r2, [r7, #23]
 800802c:	4611      	mov	r1, r2
 800802e:	4618      	mov	r0, r3
 8008030:	f7fd ff34 	bl	8005e9c <unlock_fs>
 8008034:	7dfb      	ldrb	r3, [r7, #23]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3720      	adds	r7, #32
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000148 	.word	0x20000148

08008044 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800804a:	af00      	add	r7, sp, #0
 800804c:	f107 030c 	add.w	r3, r7, #12
 8008050:	6018      	str	r0, [r3, #0]
 8008052:	f107 0308 	add.w	r3, r7, #8
 8008056:	6019      	str	r1, [r3, #0]
 8008058:	1dfb      	adds	r3, r7, #7
 800805a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <f_open+0x26>
 8008066:	2309      	movs	r3, #9
 8008068:	e24a      	b.n	8008500 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800806a:	1dfb      	adds	r3, r7, #7
 800806c:	1dfa      	adds	r2, r7, #7
 800806e:	7812      	ldrb	r2, [r2, #0]
 8008070:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008074:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008076:	1dfb      	adds	r3, r7, #7
 8008078:	781a      	ldrb	r2, [r3, #0]
 800807a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff fca8 	bl	80079d8 <find_volume>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800808e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 8221 	bne.w	80084da <f_open+0x496>
		dj.obj.fs = fs;
 8008098:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800809c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80080a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80080a4:	f107 0214 	add.w	r2, r7, #20
 80080a8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80080b4:	4611      	mov	r1, r2
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fb7e 	bl	80077b8 <follow_path>
 80080bc:	4603      	mov	r3, r0
 80080be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80080c2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d11b      	bne.n	8008102 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80080ca:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80080ce:	b25b      	sxtb	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	da03      	bge.n	80080dc <f_open+0x98>
				res = FR_INVALID_NAME;
 80080d4:	2306      	movs	r3, #6
 80080d6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80080da:	e012      	b.n	8008102 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080dc:	1dfb      	adds	r3, r7, #7
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f023 0301 	bic.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fd feec 	bl	8005ed4 <chk_lock>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008102:	1dfb      	adds	r3, r7, #7
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	f003 031c 	and.w	r3, r3, #28
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 809b 	beq.w	8008246 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8008110:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008114:	2b00      	cmp	r3, #0
 8008116:	d019      	beq.n	800814c <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008118:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800811c:	2b04      	cmp	r3, #4
 800811e:	d10e      	bne.n	800813e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008120:	f7fd ff34 	bl	8005f8c <enq_lock>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d006      	beq.n	8008138 <f_open+0xf4>
 800812a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff f892 	bl	8007258 <dir_register>
 8008134:	4603      	mov	r3, r0
 8008136:	e000      	b.n	800813a <f_open+0xf6>
 8008138:	2312      	movs	r3, #18
 800813a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800813e:	1dfb      	adds	r3, r7, #7
 8008140:	1dfa      	adds	r2, r7, #7
 8008142:	7812      	ldrb	r2, [r2, #0]
 8008144:	f042 0208 	orr.w	r2, r2, #8
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e012      	b.n	8008172 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800814c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008150:	f003 0311 	and.w	r3, r3, #17
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <f_open+0x11c>
					res = FR_DENIED;
 8008158:	2307      	movs	r3, #7
 800815a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800815e:	e008      	b.n	8008172 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008160:	1dfb      	adds	r3, r7, #7
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <f_open+0x12e>
 800816c:	2308      	movs	r3, #8
 800816e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008172:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008176:	2b00      	cmp	r3, #0
 8008178:	f040 8082 	bne.w	8008280 <f_open+0x23c>
 800817c:	1dfb      	adds	r3, r7, #7
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	f003 0308 	and.w	r3, r3, #8
 8008184:	2b00      	cmp	r3, #0
 8008186:	d07b      	beq.n	8008280 <f_open+0x23c>
				dw = GET_FATTIME();
 8008188:	f7fd fc72 	bl	8005a70 <get_fattime>
 800818c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008190:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008194:	330e      	adds	r3, #14
 8008196:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd fdbe 	bl	8005d1c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80081a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80081a4:	3316      	adds	r3, #22
 80081a6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fd fdb6 	bl	8005d1c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80081b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80081b4:	330b      	adds	r3, #11
 80081b6:	2220      	movs	r2, #32
 80081b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80081ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80081be:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80081c2:	4611      	mov	r1, r2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fdbd 	bl	8006d44 <ld_clust>
 80081ca:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80081ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80081d2:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80081d6:	2200      	movs	r2, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe fdd2 	bl	8006d82 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80081de:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80081e2:	331c      	adds	r3, #28
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fd fd98 	bl	8005d1c <st_dword>
					fs->wflag = 1;
 80081ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80081f0:	2201      	movs	r2, #1
 80081f2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80081f4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d041      	beq.n	8008280 <f_open+0x23c>
						dw = fs->winsect;
 80081fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008202:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8008206:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800820a:	2200      	movs	r2, #0
 800820c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fabc 	bl	800678e <remove_chain>
 8008216:	4603      	mov	r3, r0
 8008218:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800821c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008220:	2b00      	cmp	r3, #0
 8008222:	d12d      	bne.n	8008280 <f_open+0x23c>
							res = move_window(fs, dw);
 8008224:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008228:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe f801 	bl	8006234 <move_window>
 8008232:	4603      	mov	r3, r0
 8008234:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008238:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800823c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008240:	3a01      	subs	r2, #1
 8008242:	619a      	str	r2, [r3, #24]
 8008244:	e01c      	b.n	8008280 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008246:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800824a:	2b00      	cmp	r3, #0
 800824c:	d118      	bne.n	8008280 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800824e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008252:	f003 0310 	and.w	r3, r3, #16
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <f_open+0x21e>
					res = FR_NO_FILE;
 800825a:	2304      	movs	r3, #4
 800825c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008260:	e00e      	b.n	8008280 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008262:	1dfb      	adds	r3, r7, #7
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d008      	beq.n	8008280 <f_open+0x23c>
 800826e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <f_open+0x23c>
						res = FR_DENIED;
 800827a:	2307      	movs	r3, #7
 800827c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8008280:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008284:	2b00      	cmp	r3, #0
 8008286:	d136      	bne.n	80082f6 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008288:	1dfb      	adds	r3, r7, #7
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8008294:	1dfb      	adds	r3, r7, #7
 8008296:	1dfa      	adds	r2, r7, #7
 8008298:	7812      	ldrb	r2, [r2, #0]
 800829a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800829e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80082a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80082a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a6:	f107 030c 	add.w	r3, r7, #12
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80082ae:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80082b2:	f107 030c 	add.w	r3, r7, #12
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082ba:	1dfb      	adds	r3, r7, #7
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	f023 0301 	bic.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bf14      	ite	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	2300      	moveq	r3, #0
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80082d2:	4611      	mov	r1, r2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fd fe7b 	bl	8005fd0 <inc_lock>
 80082da:	4602      	mov	r2, r0
 80082dc:	f107 030c 	add.w	r3, r7, #12
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80082e4:	f107 030c 	add.w	r3, r7, #12
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <f_open+0x2b2>
 80082f0:	2302      	movs	r3, #2
 80082f2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80082f6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f040 80ed 	bne.w	80084da <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008300:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008304:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fd1a 	bl	8006d44 <ld_clust>
 8008310:	4602      	mov	r2, r0
 8008312:	f107 030c 	add.w	r3, r7, #12
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800831a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800831e:	331c      	adds	r3, #28
 8008320:	4618      	mov	r0, r3
 8008322:	f7fd fcbd 	bl	8005ca0 <ld_dword>
 8008326:	4602      	mov	r2, r0
 8008328:	f107 030c 	add.w	r3, r7, #12
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2200      	movs	r2, #0
 8008338:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800833a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800833e:	f107 030c 	add.w	r3, r7, #12
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008346:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800834a:	88da      	ldrh	r2, [r3, #6]
 800834c:	f107 030c 	add.w	r3, r7, #12
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008354:	f107 030c 	add.w	r3, r7, #12
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	1dfa      	adds	r2, r7, #7
 800835c:	7812      	ldrb	r2, [r2, #0]
 800835e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008360:	f107 030c 	add.w	r3, r7, #12
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800836a:	f107 030c 	add.w	r3, r7, #12
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2200      	movs	r2, #0
 8008372:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2200      	movs	r2, #0
 800837c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800837e:	f107 030c 	add.w	r3, r7, #12
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3330      	adds	r3, #48	; 0x30
 8008386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800838a:	2100      	movs	r1, #0
 800838c:	4618      	mov	r0, r3
 800838e:	f7fd fd12 	bl	8005db6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008392:	1dfb      	adds	r3, r7, #7
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 809d 	beq.w	80084da <f_open+0x496>
 80083a0:	f107 030c 	add.w	r3, r7, #12
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8096 	beq.w	80084da <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80083ae:	f107 030c 	add.w	r3, r7, #12
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80083be:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80083c2:	895b      	ldrh	r3, [r3, #10]
 80083c4:	461a      	mov	r2, r3
 80083c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80083ca:	899b      	ldrh	r3, [r3, #12]
 80083cc:	fb03 f302 	mul.w	r3, r3, r2
 80083d0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80083d4:	f107 030c 	add.w	r3, r7, #12
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80083e0:	f107 030c 	add.w	r3, r7, #12
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80083ec:	e01f      	b.n	800842e <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 80083ee:	f107 030c 	add.w	r3, r7, #12
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fd ffd8 	bl	80063ae <get_fat>
 80083fe:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8008402:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008406:	2b01      	cmp	r3, #1
 8008408:	d802      	bhi.n	8008410 <f_open+0x3cc>
 800840a:	2302      	movs	r3, #2
 800840c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008410:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d102      	bne.n	8008420 <f_open+0x3dc>
 800841a:	2301      	movs	r3, #1
 800841c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008420:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008424:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800842e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <f_open+0x3fe>
 8008436:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800843a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800843e:	429a      	cmp	r2, r3
 8008440:	d8d5      	bhi.n	80083ee <f_open+0x3aa>
				}
				fp->clust = clst;
 8008442:	f107 030c 	add.w	r3, r7, #12
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800844c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800844e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008452:	2b00      	cmp	r3, #0
 8008454:	d141      	bne.n	80084da <f_open+0x496>
 8008456:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800845a:	899b      	ldrh	r3, [r3, #12]
 800845c:	461a      	mov	r2, r3
 800845e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008462:	fbb3 f1f2 	udiv	r1, r3, r2
 8008466:	fb02 f201 	mul.w	r2, r2, r1
 800846a:	1a9b      	subs	r3, r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d034      	beq.n	80084da <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008470:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008474:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008478:	4618      	mov	r0, r3
 800847a:	f7fd ff79 	bl	8006370 <clust2sect>
 800847e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8008482:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d103      	bne.n	8008492 <f_open+0x44e>
						res = FR_INT_ERR;
 800848a:	2302      	movs	r3, #2
 800848c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008490:	e023      	b.n	80084da <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008492:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008496:	899b      	ldrh	r3, [r3, #12]
 8008498:	461a      	mov	r2, r3
 800849a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800849e:	fbb3 f2f2 	udiv	r2, r3, r2
 80084a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084a6:	441a      	add	r2, r3
 80084a8:	f107 030c 	add.w	r3, r7, #12
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80084b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80084b4:	7858      	ldrb	r0, [r3, #1]
 80084b6:	f107 030c 	add.w	r3, r7, #12
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084c0:	f107 030c 	add.w	r3, r7, #12
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6a1a      	ldr	r2, [r3, #32]
 80084c8:	2301      	movs	r3, #1
 80084ca:	f7fd fb73 	bl	8005bb4 <disk_read>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <f_open+0x496>
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80084da:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d004      	beq.n	80084ec <f_open+0x4a8>
 80084e2:	f107 030c 	add.w	r3, r7, #12
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80084ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80084f0:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fd fcd0 	bl	8005e9c <unlock_fs>
 80084fc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8008500:	4618      	mov	r0, r3
 8008502:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b08e      	sub	sp, #56	; 0x38
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
 8008516:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f107 0214 	add.w	r2, r7, #20
 8008528:	4611      	mov	r1, r2
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff fcde 	bl	8007eec <validate>
 8008530:	4603      	mov	r3, r0
 8008532:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008536:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800853a:	2b00      	cmp	r3, #0
 800853c:	d107      	bne.n	800854e <f_read+0x44>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	7d5b      	ldrb	r3, [r3, #21]
 8008542:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008546:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <f_read+0x58>
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f7fd fca0 	bl	8005e9c <unlock_fs>
 800855c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008560:	e15d      	b.n	800881e <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	7d1b      	ldrb	r3, [r3, #20]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <f_read+0x72>
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2107      	movs	r1, #7
 8008572:	4618      	mov	r0, r3
 8008574:	f7fd fc92 	bl	8005e9c <unlock_fs>
 8008578:	2307      	movs	r3, #7
 800857a:	e150      	b.n	800881e <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	429a      	cmp	r2, r3
 800858e:	f240 813c 	bls.w	800880a <f_read+0x300>
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008596:	e138      	b.n	800880a <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	8992      	ldrh	r2, [r2, #12]
 80085a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a4:	fb02 f201 	mul.w	r2, r2, r1
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f040 80f3 	bne.w	8008796 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	8992      	ldrh	r2, [r2, #12]
 80085b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	8952      	ldrh	r2, [r2, #10]
 80085c0:	3a01      	subs	r2, #1
 80085c2:	4013      	ands	r3, r2
 80085c4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d139      	bne.n	8008640 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d103      	bne.n	80085dc <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	633b      	str	r3, [r7, #48]	; 0x30
 80085da:	e013      	b.n	8008604 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	4619      	mov	r1, r3
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7fe f9cc 	bl	8006988 <clmt_clust>
 80085f0:	6338      	str	r0, [r7, #48]	; 0x30
 80085f2:	e007      	b.n	8008604 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f7fd fed6 	bl	80063ae <get_fat>
 8008602:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	2b01      	cmp	r3, #1
 8008608:	d809      	bhi.n	800861e <f_read+0x114>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2202      	movs	r2, #2
 800860e:	755a      	strb	r2, [r3, #21]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2102      	movs	r1, #2
 8008614:	4618      	mov	r0, r3
 8008616:	f7fd fc41 	bl	8005e9c <unlock_fs>
 800861a:	2302      	movs	r3, #2
 800861c:	e0ff      	b.n	800881e <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d109      	bne.n	800863a <f_read+0x130>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	755a      	strb	r2, [r3, #21]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2101      	movs	r1, #1
 8008630:	4618      	mov	r0, r3
 8008632:	f7fd fc33 	bl	8005e9c <unlock_fs>
 8008636:	2301      	movs	r3, #1
 8008638:	e0f1      	b.n	800881e <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fd fe91 	bl	8006370 <clust2sect>
 800864e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <f_read+0x160>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2202      	movs	r2, #2
 800865a:	755a      	strb	r2, [r3, #21]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2102      	movs	r1, #2
 8008660:	4618      	mov	r0, r3
 8008662:	f7fd fc1b 	bl	8005e9c <unlock_fs>
 8008666:	2302      	movs	r3, #2
 8008668:	e0d9      	b.n	800881e <f_read+0x314>
			sect += csect;
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	4413      	add	r3, r2
 8008670:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	899b      	ldrh	r3, [r3, #12]
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	fbb3 f3f2 	udiv	r3, r3, r2
 800867e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	2b00      	cmp	r3, #0
 8008684:	d046      	beq.n	8008714 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	4413      	add	r3, r2
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	8952      	ldrh	r2, [r2, #10]
 8008690:	4293      	cmp	r3, r2
 8008692:	d905      	bls.n	80086a0 <f_read+0x196>
					cc = fs->csize - csect;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	895b      	ldrh	r3, [r3, #10]
 8008698:	461a      	mov	r2, r3
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	7858      	ldrb	r0, [r3, #1]
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086aa:	f7fd fa83 	bl	8005bb4 <disk_read>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d009      	beq.n	80086c8 <f_read+0x1be>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2201      	movs	r2, #1
 80086b8:	755a      	strb	r2, [r3, #21]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2101      	movs	r1, #1
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fd fbec 	bl	8005e9c <unlock_fs>
 80086c4:	2301      	movs	r3, #1
 80086c6:	e0aa      	b.n	800881e <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	7d1b      	ldrb	r3, [r3, #20]
 80086cc:	b25b      	sxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da18      	bge.n	8008704 <f_read+0x1fa>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a1a      	ldr	r2, [r3, #32]
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086dc:	429a      	cmp	r2, r3
 80086de:	d911      	bls.n	8008704 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a1a      	ldr	r2, [r3, #32]
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	8992      	ldrh	r2, [r2, #12]
 80086ec:	fb02 f303 	mul.w	r3, r2, r3
 80086f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f2:	18d0      	adds	r0, r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	899b      	ldrh	r3, [r3, #12]
 80086fe:	461a      	mov	r2, r3
 8008700:	f7fd fb38 	bl	8005d74 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	899b      	ldrh	r3, [r3, #12]
 8008708:	461a      	mov	r2, r3
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	fb02 f303 	mul.w	r3, r2, r3
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008712:	e066      	b.n	80087e2 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	429a      	cmp	r2, r3
 800871c:	d038      	beq.n	8008790 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	7d1b      	ldrb	r3, [r3, #20]
 8008722:	b25b      	sxtb	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	da1d      	bge.n	8008764 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	7858      	ldrb	r0, [r3, #1]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a1a      	ldr	r2, [r3, #32]
 8008736:	2301      	movs	r3, #1
 8008738:	f7fd fa5c 	bl	8005bf4 <disk_write>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d009      	beq.n	8008756 <f_read+0x24c>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	755a      	strb	r2, [r3, #21]
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2101      	movs	r1, #1
 800874c:	4618      	mov	r0, r3
 800874e:	f7fd fba5 	bl	8005e9c <unlock_fs>
 8008752:	2301      	movs	r3, #1
 8008754:	e063      	b.n	800881e <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	7d1b      	ldrb	r3, [r3, #20]
 800875a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875e:	b2da      	uxtb	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	7858      	ldrb	r0, [r3, #1]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800876e:	2301      	movs	r3, #1
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	f7fd fa1f 	bl	8005bb4 <disk_read>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d009      	beq.n	8008790 <f_read+0x286>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	755a      	strb	r2, [r3, #21]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2101      	movs	r1, #1
 8008786:	4618      	mov	r0, r3
 8008788:	f7fd fb88 	bl	8005e9c <unlock_fs>
 800878c:	2301      	movs	r3, #1
 800878e:	e046      	b.n	800881e <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	899b      	ldrh	r3, [r3, #12]
 800879a:	4618      	mov	r0, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	8992      	ldrh	r2, [r2, #12]
 80087a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80087a8:	fb02 f201 	mul.w	r2, r2, r1
 80087ac:	1a9b      	subs	r3, r3, r2
 80087ae:	1ac3      	subs	r3, r0, r3
 80087b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80087b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d901      	bls.n	80087be <f_read+0x2b4>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	8992      	ldrh	r2, [r2, #12]
 80087cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80087d0:	fb02 f200 	mul.w	r2, r2, r0
 80087d4:	1a9b      	subs	r3, r3, r2
 80087d6:	440b      	add	r3, r1
 80087d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087da:	4619      	mov	r1, r3
 80087dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087de:	f7fd fac9 	bl	8005d74 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80087e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e6:	4413      	add	r3, r2
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	619a      	str	r2, [r3, #24]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	441a      	add	r2, r3
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f47f aec3 	bne.w	8008598 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2100      	movs	r1, #0
 8008816:	4618      	mov	r0, r3
 8008818:	f7fd fb40 	bl	8005e9c <unlock_fs>
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3738      	adds	r7, #56	; 0x38
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b08c      	sub	sp, #48	; 0x30
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	607a      	str	r2, [r7, #4]
 8008832:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f107 0210 	add.w	r2, r7, #16
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f7ff fb50 	bl	8007eec <validate>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008856:	2b00      	cmp	r3, #0
 8008858:	d107      	bne.n	800886a <f_write+0x44>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	7d5b      	ldrb	r3, [r3, #21]
 800885e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008866:	2b00      	cmp	r3, #0
 8008868:	d009      	beq.n	800887e <f_write+0x58>
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7fd fb12 	bl	8005e9c <unlock_fs>
 8008878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800887c:	e192      	b.n	8008ba4 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	7d1b      	ldrb	r3, [r3, #20]
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d106      	bne.n	8008898 <f_write+0x72>
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2107      	movs	r1, #7
 800888e:	4618      	mov	r0, r3
 8008890:	f7fd fb04 	bl	8005e9c <unlock_fs>
 8008894:	2307      	movs	r3, #7
 8008896:	e185      	b.n	8008ba4 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	699a      	ldr	r2, [r3, #24]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	441a      	add	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	f080 816a 	bcs.w	8008b7e <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	43db      	mvns	r3, r3
 80088b0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80088b2:	e164      	b.n	8008b7e <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	8992      	ldrh	r2, [r2, #12]
 80088bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80088c0:	fb02 f201 	mul.w	r2, r2, r1
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f040 810f 	bne.w	8008aea <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	8992      	ldrh	r2, [r2, #12]
 80088d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	8952      	ldrh	r2, [r2, #10]
 80088dc:	3a01      	subs	r2, #1
 80088de:	4013      	ands	r3, r2
 80088e0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d14d      	bne.n	8008984 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10c      	bne.n	800890a <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d11a      	bne.n	8008932 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2100      	movs	r1, #0
 8008900:	4618      	mov	r0, r3
 8008902:	f7fd ffa9 	bl	8006858 <create_chain>
 8008906:	62b8      	str	r0, [r7, #40]	; 0x28
 8008908:	e013      	b.n	8008932 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	4619      	mov	r1, r3
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f7fe f835 	bl	8006988 <clmt_clust>
 800891e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008920:	e007      	b.n	8008932 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fd ff94 	bl	8006858 <create_chain>
 8008930:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 8127 	beq.w	8008b88 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	2b01      	cmp	r3, #1
 800893e:	d109      	bne.n	8008954 <f_write+0x12e>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2202      	movs	r2, #2
 8008944:	755a      	strb	r2, [r3, #21]
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	2102      	movs	r1, #2
 800894a:	4618      	mov	r0, r3
 800894c:	f7fd faa6 	bl	8005e9c <unlock_fs>
 8008950:	2302      	movs	r3, #2
 8008952:	e127      	b.n	8008ba4 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895a:	d109      	bne.n	8008970 <f_write+0x14a>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	755a      	strb	r2, [r3, #21]
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	2101      	movs	r1, #1
 8008966:	4618      	mov	r0, r3
 8008968:	f7fd fa98 	bl	8005e9c <unlock_fs>
 800896c:	2301      	movs	r3, #1
 800896e:	e119      	b.n	8008ba4 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008974:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <f_write+0x15e>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008982:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	7d1b      	ldrb	r3, [r3, #20]
 8008988:	b25b      	sxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	da1d      	bge.n	80089ca <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	7858      	ldrb	r0, [r3, #1]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a1a      	ldr	r2, [r3, #32]
 800899c:	2301      	movs	r3, #1
 800899e:	f7fd f929 	bl	8005bf4 <disk_write>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d009      	beq.n	80089bc <f_write+0x196>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	755a      	strb	r2, [r3, #21]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2101      	movs	r1, #1
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fd fa72 	bl	8005e9c <unlock_fs>
 80089b8:	2301      	movs	r3, #1
 80089ba:	e0f3      	b.n	8008ba4 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	7d1b      	ldrb	r3, [r3, #20]
 80089c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	4619      	mov	r1, r3
 80089d2:	4610      	mov	r0, r2
 80089d4:	f7fd fccc 	bl	8006370 <clust2sect>
 80089d8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d109      	bne.n	80089f4 <f_write+0x1ce>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2202      	movs	r2, #2
 80089e4:	755a      	strb	r2, [r3, #21]
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2102      	movs	r1, #2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fd fa56 	bl	8005e9c <unlock_fs>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e0d7      	b.n	8008ba4 <f_write+0x37e>
			sect += csect;
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	4413      	add	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	899b      	ldrh	r3, [r3, #12]
 8008a00:	461a      	mov	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a08:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d048      	beq.n	8008aa2 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	4413      	add	r3, r2
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	8952      	ldrh	r2, [r2, #10]
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d905      	bls.n	8008a2a <f_write+0x204>
					cc = fs->csize - csect;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	895b      	ldrh	r3, [r3, #10]
 8008a22:	461a      	mov	r2, r3
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	7858      	ldrb	r0, [r3, #1]
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	69f9      	ldr	r1, [r7, #28]
 8008a34:	f7fd f8de 	bl	8005bf4 <disk_write>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <f_write+0x22c>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	755a      	strb	r2, [r3, #21]
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2101      	movs	r1, #1
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fd fa27 	bl	8005e9c <unlock_fs>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e0a8      	b.n	8008ba4 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a1a      	ldr	r2, [r3, #32]
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	6a3a      	ldr	r2, [r7, #32]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d918      	bls.n	8008a92 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1a      	ldr	r2, [r3, #32]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	8992      	ldrh	r2, [r2, #12]
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	18d1      	adds	r1, r2, r3
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	899b      	ldrh	r3, [r3, #12]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f7fd f978 	bl	8005d74 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	7d1b      	ldrb	r3, [r3, #20]
 8008a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	899b      	ldrh	r3, [r3, #12]
 8008a96:	461a      	mov	r2, r3
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008aa0:	e050      	b.n	8008b44 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d01b      	beq.n	8008ae4 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	699a      	ldr	r2, [r3, #24]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d215      	bcs.n	8008ae4 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	7858      	ldrb	r0, [r3, #1]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	f7fd f875 	bl	8005bb4 <disk_read>
 8008aca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	755a      	strb	r2, [r3, #21]
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2101      	movs	r1, #1
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fd f9de 	bl	8005e9c <unlock_fs>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e05f      	b.n	8008ba4 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	899b      	ldrh	r3, [r3, #12]
 8008aee:	4618      	mov	r0, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	8992      	ldrh	r2, [r2, #12]
 8008af8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008afc:	fb02 f201 	mul.w	r2, r2, r1
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	1ac3      	subs	r3, r0, r3
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d901      	bls.n	8008b12 <f_write+0x2ec>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	8992      	ldrh	r2, [r2, #12]
 8008b20:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b24:	fb02 f200 	mul.w	r2, r2, r0
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	440b      	add	r3, r1
 8008b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b2e:	69f9      	ldr	r1, [r7, #28]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fd f91f 	bl	8005d74 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	7d1b      	ldrb	r3, [r3, #20]
 8008b3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b44:	69fa      	ldr	r2, [r7, #28]
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	4413      	add	r3, r2
 8008b4a:	61fb      	str	r3, [r7, #28]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	699a      	ldr	r2, [r3, #24]
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	441a      	add	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	619a      	str	r2, [r3, #24]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	bf38      	it	cc
 8008b64:	461a      	movcc	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	60da      	str	r2, [r3, #12]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	441a      	add	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f47f ae97 	bne.w	80088b4 <f_write+0x8e>
 8008b86:	e000      	b.n	8008b8a <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b88:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	7d1b      	ldrb	r3, [r3, #20]
 8008b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fd f97d 	bl	8005e9c <unlock_fs>
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3730      	adds	r7, #48	; 0x30
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f107 0208 	add.w	r2, r7, #8
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff f995 	bl	8007eec <validate>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d16d      	bne.n	8008ca8 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	7d1b      	ldrb	r3, [r3, #20]
 8008bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d067      	beq.n	8008ca8 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	7d1b      	ldrb	r3, [r3, #20]
 8008bdc:	b25b      	sxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da1a      	bge.n	8008c18 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	7858      	ldrb	r0, [r3, #1]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a1a      	ldr	r2, [r3, #32]
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	f7fc ffff 	bl	8005bf4 <disk_write>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d006      	beq.n	8008c0a <f_sync+0x5e>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2101      	movs	r1, #1
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fd f94b 	bl	8005e9c <unlock_fs>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e055      	b.n	8008cb6 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	7d1b      	ldrb	r3, [r3, #20]
 8008c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008c18:	f7fc ff2a 	bl	8005a70 <get_fattime>
 8008c1c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f7fd fb04 	bl	8006234 <move_window>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d138      	bne.n	8008ca8 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	330b      	adds	r3, #11
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	330b      	adds	r3, #11
 8008c46:	f042 0220 	orr.w	r2, r2, #32
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	461a      	mov	r2, r3
 8008c58:	68f9      	ldr	r1, [r7, #12]
 8008c5a:	f7fe f892 	bl	8006d82 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f103 021c 	add.w	r2, r3, #28
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f7fd f856 	bl	8005d1c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3316      	adds	r3, #22
 8008c74:	6939      	ldr	r1, [r7, #16]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fd f850 	bl	8005d1c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3312      	adds	r3, #18
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fd f82f 	bl	8005ce6 <st_word>
					fs->wflag = 1;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fd fafd 	bl	8006290 <sync_fs>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	7d1b      	ldrb	r3, [r3, #20]
 8008c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	7dfa      	ldrb	r2, [r7, #23]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fd f8f4 	bl	8005e9c <unlock_fs>
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff ff70 	bl	8008bac <f_sync>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d11d      	bne.n	8008d12 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f107 0208 	add.w	r2, r7, #8
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff f904 	bl	8007eec <validate>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d111      	bne.n	8008d12 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fd f9fa 	bl	80060ec <dec_lock>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fd f8c5 	bl	8005e9c <unlock_fs>
#endif
		}
	}
	return res;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b092      	sub	sp, #72	; 0x48
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008d28:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008d2c:	f107 030c 	add.w	r3, r7, #12
 8008d30:	2200      	movs	r2, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fe fe50 	bl	80079d8 <find_volume>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008d3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f040 8099 	bne.w	8008e7a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	69da      	ldr	r2, [r3, #28]
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	3b02      	subs	r3, #2
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d804      	bhi.n	8008d66 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	69da      	ldr	r2, [r3, #28]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	e089      	b.n	8008e7a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d128      	bne.n	8008dc4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d72:	2302      	movs	r3, #2
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d7a:	f107 0314 	add.w	r3, r7, #20
 8008d7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fd fb14 	bl	80063ae <get_fat>
 8008d86:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d103      	bne.n	8008d98 <f_getfree+0x7c>
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d96:	e063      	b.n	8008e60 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d103      	bne.n	8008da6 <f_getfree+0x8a>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008da4:	e05c      	b.n	8008e60 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d102      	bne.n	8008db2 <f_getfree+0x96>
 8008dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dae:	3301      	adds	r3, #1
 8008db0:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db4:	3301      	adds	r3, #1
 8008db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d3db      	bcc.n	8008d7a <f_getfree+0x5e>
 8008dc2:	e04d      	b.n	8008e60 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d113      	bne.n	8008e06 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	63ba      	str	r2, [r7, #56]	; 0x38
 8008de6:	4619      	mov	r1, r3
 8008de8:	f7fd fa24 	bl	8006234 <move_window>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008df2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d131      	bne.n	8008e5e <f_getfree+0x142>
							p = fs->win;
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	333c      	adds	r3, #60	; 0x3c
 8008dfe:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	899b      	ldrh	r3, [r3, #12]
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d10f      	bne.n	8008e2e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e10:	f7fc ff2e 	bl	8005c70 <ld_word>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <f_getfree+0x104>
 8008e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	3302      	adds	r3, #2
 8008e24:	633b      	str	r3, [r7, #48]	; 0x30
 8008e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e28:	3b02      	subs	r3, #2
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e2c:	e010      	b.n	8008e50 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e30:	f7fc ff36 	bl	8005ca0 <ld_dword>
 8008e34:	4603      	mov	r3, r0
 8008e36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d102      	bne.n	8008e44 <f_getfree+0x128>
 8008e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e40:	3301      	adds	r3, #1
 8008e42:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	3304      	adds	r3, #4
 8008e48:	633b      	str	r3, [r7, #48]	; 0x30
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4c:	3b04      	subs	r3, #4
 8008e4e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e52:	3b01      	subs	r3, #1
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1bd      	bne.n	8008dd8 <f_getfree+0xbc>
 8008e5c:	e000      	b.n	8008e60 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e5e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e64:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e6a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	791a      	ldrb	r2, [r3, #4]
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	f042 0201 	orr.w	r2, r2, #1
 8008e76:	b2d2      	uxtb	r2, r2
 8008e78:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fd f80a 	bl	8005e9c <unlock_fs>
 8008e88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3748      	adds	r7, #72	; 0x48
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008ea8:	e01b      	b.n	8008ee2 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008eaa:	f107 0310 	add.w	r3, r7, #16
 8008eae:	f107 0114 	add.w	r1, r7, #20
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff fb28 	bl	800850a <f_read>
		if (rc != 1) break;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d116      	bne.n	8008eee <f_gets+0x5a>
		c = s[0];
 8008ec0:	7d3b      	ldrb	r3, [r7, #20]
 8008ec2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	2b0d      	cmp	r3, #13
 8008ec8:	d100      	bne.n	8008ecc <f_gets+0x38>
 8008eca:	e00a      	b.n	8008ee2 <f_gets+0x4e>
		*p++ = c;
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	61ba      	str	r2, [r7, #24]
 8008ed2:	7dfa      	ldrb	r2, [r7, #23]
 8008ed4:	701a      	strb	r2, [r3, #0]
		n++;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
 8008ede:	2b0a      	cmp	r3, #10
 8008ee0:	d007      	beq.n	8008ef2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	dbde      	blt.n	8008eaa <f_gets+0x16>
 8008eec:	e002      	b.n	8008ef4 <f_gets+0x60>
		if (rc != 1) break;
 8008eee:	bf00      	nop
 8008ef0:	e000      	b.n	8008ef4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008ef2:	bf00      	nop
	}
	*p = 0;
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <f_gets+0x70>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	e000      	b.n	8008f06 <f_gets+0x72>
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3720      	adds	r7, #32
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	2b0a      	cmp	r3, #10
 8008f1e:	d103      	bne.n	8008f28 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008f20:	210d      	movs	r1, #13
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7ff fff3 	bl	8008f0e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	db25      	blt.n	8008f80 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	60fa      	str	r2, [r7, #12]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b3c      	cmp	r3, #60	; 0x3c
 8008f46:	dd12      	ble.n	8008f6e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f103 010c 	add.w	r1, r3, #12
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	f107 0308 	add.w	r3, r7, #8
 8008f58:	f7ff fc65 	bl	8008826 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d101      	bne.n	8008f68 <putc_bfd+0x5a>
 8008f64:	2300      	movs	r3, #0
 8008f66:	e001      	b.n	8008f6c <putc_bfd+0x5e>
 8008f68:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	609a      	str	r2, [r3, #8]
 8008f7e:	e000      	b.n	8008f82 <putc_bfd+0x74>
	if (i < 0) return;
 8008f80:	bf00      	nop
}
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	db16      	blt.n	8008fc6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6818      	ldr	r0, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f103 010c 	add.w	r1, r3, #12
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f107 030c 	add.w	r3, r7, #12
 8008fac:	f7ff fc3b 	bl	8008826 <f_write>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d107      	bne.n	8008fc6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d102      	bne.n	8008fc6 <putc_flush+0x3e>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	e001      	b.n	8008fca <putc_flush+0x42>
	return EOF;
 8008fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	609a      	str	r2, [r3, #8]
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b096      	sub	sp, #88	; 0x58
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009006:	f107 030c 	add.w	r3, r7, #12
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff ffe0 	bl	8008fd2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009012:	e009      	b.n	8009028 <f_puts+0x2c>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	607a      	str	r2, [r7, #4]
 800901a:	781a      	ldrb	r2, [r3, #0]
 800901c:	f107 030c 	add.w	r3, r7, #12
 8009020:	4611      	mov	r1, r2
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff ff73 	bl	8008f0e <putc_bfd>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1f1      	bne.n	8009014 <f_puts+0x18>
	return putc_flush(&pb);
 8009030:	f107 030c 	add.w	r3, r7, #12
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff ffa7 	bl	8008f88 <putc_flush>
 800903a:	4603      	mov	r3, r0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3758      	adds	r7, #88	; 0x58
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009052:	2301      	movs	r3, #1
 8009054:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800905a:	4b1f      	ldr	r3, [pc, #124]	; (80090d8 <FATFS_LinkDriverEx+0x94>)
 800905c:	7a5b      	ldrb	r3, [r3, #9]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d131      	bne.n	80090c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009064:	4b1c      	ldr	r3, [pc, #112]	; (80090d8 <FATFS_LinkDriverEx+0x94>)
 8009066:	7a5b      	ldrb	r3, [r3, #9]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	461a      	mov	r2, r3
 800906c:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <FATFS_LinkDriverEx+0x94>)
 800906e:	2100      	movs	r1, #0
 8009070:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009072:	4b19      	ldr	r3, [pc, #100]	; (80090d8 <FATFS_LinkDriverEx+0x94>)
 8009074:	7a5b      	ldrb	r3, [r3, #9]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	4a17      	ldr	r2, [pc, #92]	; (80090d8 <FATFS_LinkDriverEx+0x94>)
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <FATFS_LinkDriverEx+0x94>)
 8009084:	7a5b      	ldrb	r3, [r3, #9]
 8009086:	b2db      	uxtb	r3, r3
 8009088:	461a      	mov	r2, r3
 800908a:	4b13      	ldr	r3, [pc, #76]	; (80090d8 <FATFS_LinkDriverEx+0x94>)
 800908c:	4413      	add	r3, r2
 800908e:	79fa      	ldrb	r2, [r7, #7]
 8009090:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009092:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <FATFS_LinkDriverEx+0x94>)
 8009094:	7a5b      	ldrb	r3, [r3, #9]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	b2d1      	uxtb	r1, r2
 800909c:	4a0e      	ldr	r2, [pc, #56]	; (80090d8 <FATFS_LinkDriverEx+0x94>)
 800909e:	7251      	strb	r1, [r2, #9]
 80090a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80090a2:	7dbb      	ldrb	r3, [r7, #22]
 80090a4:	3330      	adds	r3, #48	; 0x30
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	3301      	adds	r3, #1
 80090b0:	223a      	movs	r2, #58	; 0x3a
 80090b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	3302      	adds	r3, #2
 80090b8:	222f      	movs	r2, #47	; 0x2f
 80090ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	3303      	adds	r3, #3
 80090c0:	2200      	movs	r2, #0
 80090c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20000170 	.word	0x20000170

080090dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090e6:	2200      	movs	r2, #0
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff ffaa 	bl	8009044 <FATFS_LinkDriverEx>
 80090f0:	4603      	mov	r3, r0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	6039      	str	r1, [r7, #0]
 8009106:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	2b7f      	cmp	r3, #127	; 0x7f
 800910c:	d802      	bhi.n	8009114 <ff_convert+0x18>
		c = chr;
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	81fb      	strh	r3, [r7, #14]
 8009112:	e025      	b.n	8009160 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00b      	beq.n	8009132 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800911a:	88fb      	ldrh	r3, [r7, #6]
 800911c:	2bff      	cmp	r3, #255	; 0xff
 800911e:	d805      	bhi.n	800912c <ff_convert+0x30>
 8009120:	88fb      	ldrh	r3, [r7, #6]
 8009122:	3b80      	subs	r3, #128	; 0x80
 8009124:	4a12      	ldr	r2, [pc, #72]	; (8009170 <ff_convert+0x74>)
 8009126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800912a:	e000      	b.n	800912e <ff_convert+0x32>
 800912c:	2300      	movs	r3, #0
 800912e:	81fb      	strh	r3, [r7, #14]
 8009130:	e016      	b.n	8009160 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009132:	2300      	movs	r3, #0
 8009134:	81fb      	strh	r3, [r7, #14]
 8009136:	e009      	b.n	800914c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009138:	89fb      	ldrh	r3, [r7, #14]
 800913a:	4a0d      	ldr	r2, [pc, #52]	; (8009170 <ff_convert+0x74>)
 800913c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009140:	88fa      	ldrh	r2, [r7, #6]
 8009142:	429a      	cmp	r2, r3
 8009144:	d006      	beq.n	8009154 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009146:	89fb      	ldrh	r3, [r7, #14]
 8009148:	3301      	adds	r3, #1
 800914a:	81fb      	strh	r3, [r7, #14]
 800914c:	89fb      	ldrh	r3, [r7, #14]
 800914e:	2b7f      	cmp	r3, #127	; 0x7f
 8009150:	d9f2      	bls.n	8009138 <ff_convert+0x3c>
 8009152:	e000      	b.n	8009156 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009154:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009156:	89fb      	ldrh	r3, [r7, #14]
 8009158:	3380      	adds	r3, #128	; 0x80
 800915a:	b29b      	uxth	r3, r3
 800915c:	b2db      	uxtb	r3, r3
 800915e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009160:	89fb      	ldrh	r3, [r7, #14]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	0800e710 	.word	0x0800e710

08009174 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800917e:	88fb      	ldrh	r3, [r7, #6]
 8009180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009184:	d201      	bcs.n	800918a <ff_wtoupper+0x16>
 8009186:	4b3e      	ldr	r3, [pc, #248]	; (8009280 <ff_wtoupper+0x10c>)
 8009188:	e000      	b.n	800918c <ff_wtoupper+0x18>
 800918a:	4b3e      	ldr	r3, [pc, #248]	; (8009284 <ff_wtoupper+0x110>)
 800918c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	1c9a      	adds	r2, r3, #2
 8009192:	617a      	str	r2, [r7, #20]
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009198:	8a7b      	ldrh	r3, [r7, #18]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d068      	beq.n	8009270 <ff_wtoupper+0xfc>
 800919e:	88fa      	ldrh	r2, [r7, #6]
 80091a0:	8a7b      	ldrh	r3, [r7, #18]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d364      	bcc.n	8009270 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	1c9a      	adds	r2, r3, #2
 80091aa:	617a      	str	r2, [r7, #20]
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	823b      	strh	r3, [r7, #16]
 80091b0:	8a3b      	ldrh	r3, [r7, #16]
 80091b2:	0a1b      	lsrs	r3, r3, #8
 80091b4:	81fb      	strh	r3, [r7, #14]
 80091b6:	8a3b      	ldrh	r3, [r7, #16]
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80091bc:	88fa      	ldrh	r2, [r7, #6]
 80091be:	8a79      	ldrh	r1, [r7, #18]
 80091c0:	8a3b      	ldrh	r3, [r7, #16]
 80091c2:	440b      	add	r3, r1
 80091c4:	429a      	cmp	r2, r3
 80091c6:	da49      	bge.n	800925c <ff_wtoupper+0xe8>
			switch (cmd) {
 80091c8:	89fb      	ldrh	r3, [r7, #14]
 80091ca:	2b08      	cmp	r3, #8
 80091cc:	d84f      	bhi.n	800926e <ff_wtoupper+0xfa>
 80091ce:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <ff_wtoupper+0x60>)
 80091d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d4:	080091f9 	.word	0x080091f9
 80091d8:	0800920b 	.word	0x0800920b
 80091dc:	08009221 	.word	0x08009221
 80091e0:	08009229 	.word	0x08009229
 80091e4:	08009231 	.word	0x08009231
 80091e8:	08009239 	.word	0x08009239
 80091ec:	08009241 	.word	0x08009241
 80091f0:	08009249 	.word	0x08009249
 80091f4:	08009251 	.word	0x08009251
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091f8:	88fa      	ldrh	r2, [r7, #6]
 80091fa:	8a7b      	ldrh	r3, [r7, #18]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4413      	add	r3, r2
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	80fb      	strh	r3, [r7, #6]
 8009208:	e027      	b.n	800925a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800920a:	88fa      	ldrh	r2, [r7, #6]
 800920c:	8a7b      	ldrh	r3, [r7, #18]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	b29b      	uxth	r3, r3
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	b29b      	uxth	r3, r3
 8009218:	88fa      	ldrh	r2, [r7, #6]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	80fb      	strh	r3, [r7, #6]
 800921e:	e01c      	b.n	800925a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	3b10      	subs	r3, #16
 8009224:	80fb      	strh	r3, [r7, #6]
 8009226:	e018      	b.n	800925a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	3b20      	subs	r3, #32
 800922c:	80fb      	strh	r3, [r7, #6]
 800922e:	e014      	b.n	800925a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	3b30      	subs	r3, #48	; 0x30
 8009234:	80fb      	strh	r3, [r7, #6]
 8009236:	e010      	b.n	800925a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	3b1a      	subs	r3, #26
 800923c:	80fb      	strh	r3, [r7, #6]
 800923e:	e00c      	b.n	800925a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009240:	88fb      	ldrh	r3, [r7, #6]
 8009242:	3308      	adds	r3, #8
 8009244:	80fb      	strh	r3, [r7, #6]
 8009246:	e008      	b.n	800925a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009248:	88fb      	ldrh	r3, [r7, #6]
 800924a:	3b50      	subs	r3, #80	; 0x50
 800924c:	80fb      	strh	r3, [r7, #6]
 800924e:	e004      	b.n	800925a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009250:	88fb      	ldrh	r3, [r7, #6]
 8009252:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009256:	80fb      	strh	r3, [r7, #6]
 8009258:	bf00      	nop
			}
			break;
 800925a:	e008      	b.n	800926e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800925c:	89fb      	ldrh	r3, [r7, #14]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d195      	bne.n	800918e <ff_wtoupper+0x1a>
 8009262:	8a3b      	ldrh	r3, [r7, #16]
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4413      	add	r3, r2
 800926a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800926c:	e78f      	b.n	800918e <ff_wtoupper+0x1a>
			break;
 800926e:	bf00      	nop
	}

	return chr;
 8009270:	88fb      	ldrh	r3, [r7, #6]
}
 8009272:	4618      	mov	r0, r3
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	0800e810 	.word	0x0800e810
 8009284:	0800ea04 	.word	0x0800ea04

08009288 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009294:	2200      	movs	r2, #0
 8009296:	2101      	movs	r1, #1
 8009298:	2001      	movs	r0, #1
 800929a:	f000 f978 	bl	800958e <osSemaphoreNew>
 800929e:	4602      	mov	r2, r0
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	bf14      	ite	ne
 80092ac:	2301      	movne	r3, #1
 80092ae:	2300      	moveq	r3, #0
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	60fb      	str	r3, [r7, #12]

    return ret;
 80092b4:	68fb      	ldr	r3, [r7, #12]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b082      	sub	sp, #8
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fa80 	bl	80097cc <osSemaphoreDelete>
#endif
    return 1;
 80092cc:	2301      	movs	r3, #1
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80092e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f9da 	bl	80096a0 <osSemaphoreAcquire>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80092f2:	2301      	movs	r3, #1
 80092f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80092f6:	68fb      	ldr	r3, [r7, #12]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fa1b 	bl	8009744 <osSemaphoreRelease>
#endif
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <__NVIC_SetPriority>:
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009328:	2b00      	cmp	r3, #0
 800932a:	db0a      	blt.n	8009342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	b2da      	uxtb	r2, r3
 8009330:	490c      	ldr	r1, [pc, #48]	; (8009364 <__NVIC_SetPriority+0x4c>)
 8009332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009336:	0112      	lsls	r2, r2, #4
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	440b      	add	r3, r1
 800933c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009340:	e00a      	b.n	8009358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	b2da      	uxtb	r2, r3
 8009346:	4908      	ldr	r1, [pc, #32]	; (8009368 <__NVIC_SetPriority+0x50>)
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	3b04      	subs	r3, #4
 8009350:	0112      	lsls	r2, r2, #4
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	440b      	add	r3, r1
 8009356:	761a      	strb	r2, [r3, #24]
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	e000e100 	.word	0xe000e100
 8009368:	e000ed00 	.word	0xe000ed00

0800936c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009370:	4b05      	ldr	r3, [pc, #20]	; (8009388 <SysTick_Handler+0x1c>)
 8009372:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009374:	f002 fabe 	bl	800b8f4 <xTaskGetSchedulerState>
 8009378:	4603      	mov	r3, r0
 800937a:	2b01      	cmp	r3, #1
 800937c:	d001      	beq.n	8009382 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800937e:	f003 f9a3 	bl	800c6c8 <xPortSysTickHandler>
  }
}
 8009382:	bf00      	nop
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	e000e010 	.word	0xe000e010

0800938c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009390:	2100      	movs	r1, #0
 8009392:	f06f 0004 	mvn.w	r0, #4
 8009396:	f7ff ffbf 	bl	8009318 <__NVIC_SetPriority>
#endif
}
 800939a:	bf00      	nop
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093a6:	f3ef 8305 	mrs	r3, IPSR
 80093aa:	603b      	str	r3, [r7, #0]
  return(result);
 80093ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80093b2:	f06f 0305 	mvn.w	r3, #5
 80093b6:	607b      	str	r3, [r7, #4]
 80093b8:	e00c      	b.n	80093d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80093ba:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <osKernelInitialize+0x44>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d105      	bne.n	80093ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80093c2:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <osKernelInitialize+0x44>)
 80093c4:	2201      	movs	r2, #1
 80093c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	607b      	str	r3, [r7, #4]
 80093cc:	e002      	b.n	80093d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80093ce:	f04f 33ff 	mov.w	r3, #4294967295
 80093d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093d4:	687b      	ldr	r3, [r7, #4]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	2000017c 	.word	0x2000017c

080093e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ee:	f3ef 8305 	mrs	r3, IPSR
 80093f2:	603b      	str	r3, [r7, #0]
  return(result);
 80093f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <osKernelStart+0x1a>
    stat = osErrorISR;
 80093fa:	f06f 0305 	mvn.w	r3, #5
 80093fe:	607b      	str	r3, [r7, #4]
 8009400:	e010      	b.n	8009424 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009402:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <osKernelStart+0x48>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d109      	bne.n	800941e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800940a:	f7ff ffbf 	bl	800938c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800940e:	4b08      	ldr	r3, [pc, #32]	; (8009430 <osKernelStart+0x48>)
 8009410:	2202      	movs	r2, #2
 8009412:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009414:	f001 fe12 	bl	800b03c <vTaskStartScheduler>
      stat = osOK;
 8009418:	2300      	movs	r3, #0
 800941a:	607b      	str	r3, [r7, #4]
 800941c:	e002      	b.n	8009424 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800941e:	f04f 33ff 	mov.w	r3, #4294967295
 8009422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009424:	687b      	ldr	r3, [r7, #4]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	2000017c 	.word	0x2000017c

08009434 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009434:	b580      	push	{r7, lr}
 8009436:	b08e      	sub	sp, #56	; 0x38
 8009438:	af04      	add	r7, sp, #16
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009440:	2300      	movs	r3, #0
 8009442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009444:	f3ef 8305 	mrs	r3, IPSR
 8009448:	617b      	str	r3, [r7, #20]
  return(result);
 800944a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800944c:	2b00      	cmp	r3, #0
 800944e:	d17e      	bne.n	800954e <osThreadNew+0x11a>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d07b      	beq.n	800954e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009456:	2380      	movs	r3, #128	; 0x80
 8009458:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800945a:	2318      	movs	r3, #24
 800945c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800945e:	2300      	movs	r3, #0
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009462:	f04f 33ff 	mov.w	r3, #4294967295
 8009466:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d045      	beq.n	80094fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <osThreadNew+0x48>
        name = attr->name;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d008      	beq.n	80094a2 <osThreadNew+0x6e>
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	2b38      	cmp	r3, #56	; 0x38
 8009494:	d805      	bhi.n	80094a2 <osThreadNew+0x6e>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <osThreadNew+0x72>
        return (NULL);
 80094a2:	2300      	movs	r3, #0
 80094a4:	e054      	b.n	8009550 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	089b      	lsrs	r3, r3, #2
 80094b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00e      	beq.n	80094dc <osThreadNew+0xa8>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	2bbb      	cmp	r3, #187	; 0xbb
 80094c4:	d90a      	bls.n	80094dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d006      	beq.n	80094dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <osThreadNew+0xa8>
        mem = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	61bb      	str	r3, [r7, #24]
 80094da:	e010      	b.n	80094fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10c      	bne.n	80094fe <osThreadNew+0xca>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d108      	bne.n	80094fe <osThreadNew+0xca>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d104      	bne.n	80094fe <osThreadNew+0xca>
          mem = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	61bb      	str	r3, [r7, #24]
 80094f8:	e001      	b.n	80094fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d110      	bne.n	8009526 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800950c:	9202      	str	r2, [sp, #8]
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	6a3a      	ldr	r2, [r7, #32]
 8009518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f001 fba2 	bl	800ac64 <xTaskCreateStatic>
 8009520:	4603      	mov	r3, r0
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	e013      	b.n	800954e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d110      	bne.n	800954e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	b29a      	uxth	r2, r3
 8009530:	f107 0310 	add.w	r3, r7, #16
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f001 fbed 	bl	800ad1e <xTaskCreate>
 8009544:	4603      	mov	r3, r0
 8009546:	2b01      	cmp	r3, #1
 8009548:	d001      	beq.n	800954e <osThreadNew+0x11a>
            hTask = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800954e:	693b      	ldr	r3, [r7, #16]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3728      	adds	r7, #40	; 0x28
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009560:	f3ef 8305 	mrs	r3, IPSR
 8009564:	60bb      	str	r3, [r7, #8]
  return(result);
 8009566:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <osDelay+0x1c>
    stat = osErrorISR;
 800956c:	f06f 0305 	mvn.w	r3, #5
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e007      	b.n	8009584 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009574:	2300      	movs	r3, #0
 8009576:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <osDelay+0x2c>
      vTaskDelay(ticks);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f001 fd28 	bl	800afd4 <vTaskDelay>
    }
  }

  return (stat);
 8009584:	68fb      	ldr	r3, [r7, #12]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800958e:	b580      	push	{r7, lr}
 8009590:	b08a      	sub	sp, #40	; 0x28
 8009592:	af02      	add	r7, sp, #8
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800959a:	2300      	movs	r3, #0
 800959c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800959e:	f3ef 8305 	mrs	r3, IPSR
 80095a2:	613b      	str	r3, [r7, #16]
  return(result);
 80095a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d175      	bne.n	8009696 <osSemaphoreNew+0x108>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d072      	beq.n	8009696 <osSemaphoreNew+0x108>
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d86e      	bhi.n	8009696 <osSemaphoreNew+0x108>
    mem = -1;
 80095b8:	f04f 33ff 	mov.w	r3, #4294967295
 80095bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d015      	beq.n	80095f0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <osSemaphoreNew+0x4c>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	2b4f      	cmp	r3, #79	; 0x4f
 80095d2:	d902      	bls.n	80095da <osSemaphoreNew+0x4c>
        mem = 1;
 80095d4:	2301      	movs	r3, #1
 80095d6:	61bb      	str	r3, [r7, #24]
 80095d8:	e00c      	b.n	80095f4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d108      	bne.n	80095f4 <osSemaphoreNew+0x66>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d104      	bne.n	80095f4 <osSemaphoreNew+0x66>
          mem = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	e001      	b.n	80095f4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fa:	d04c      	beq.n	8009696 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d128      	bne.n	8009654 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d10a      	bne.n	800961e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	2203      	movs	r2, #3
 800960e:	9200      	str	r2, [sp, #0]
 8009610:	2200      	movs	r2, #0
 8009612:	2100      	movs	r1, #0
 8009614:	2001      	movs	r0, #1
 8009616:	f000 fb7f 	bl	8009d18 <xQueueGenericCreateStatic>
 800961a:	61f8      	str	r0, [r7, #28]
 800961c:	e005      	b.n	800962a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800961e:	2203      	movs	r2, #3
 8009620:	2100      	movs	r1, #0
 8009622:	2001      	movs	r0, #1
 8009624:	f000 fbf0 	bl	8009e08 <xQueueGenericCreate>
 8009628:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d022      	beq.n	8009676 <osSemaphoreNew+0xe8>
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d01f      	beq.n	8009676 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009636:	2300      	movs	r3, #0
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	69f8      	ldr	r0, [r7, #28]
 800963e:	f000 fcab 	bl	8009f98 <xQueueGenericSend>
 8009642:	4603      	mov	r3, r0
 8009644:	2b01      	cmp	r3, #1
 8009646:	d016      	beq.n	8009676 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009648:	69f8      	ldr	r0, [r7, #28]
 800964a:	f001 f937 	bl	800a8bc <vQueueDelete>
            hSemaphore = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	e010      	b.n	8009676 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d108      	bne.n	800966c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	461a      	mov	r2, r3
 8009660:	68b9      	ldr	r1, [r7, #8]
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 fc2d 	bl	8009ec2 <xQueueCreateCountingSemaphoreStatic>
 8009668:	61f8      	str	r0, [r7, #28]
 800966a:	e004      	b.n	8009676 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fc5e 	bl	8009f30 <xQueueCreateCountingSemaphore>
 8009674:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00c      	beq.n	8009696 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	617b      	str	r3, [r7, #20]
 8009688:	e001      	b.n	800968e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800968e:	6979      	ldr	r1, [r7, #20]
 8009690:	69f8      	ldr	r0, [r7, #28]
 8009692:	f001 fa5f 	bl	800ab54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009696:	69fb      	ldr	r3, [r7, #28]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3720      	adds	r7, #32
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d103      	bne.n	80096c0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80096b8:	f06f 0303 	mvn.w	r3, #3
 80096bc:	617b      	str	r3, [r7, #20]
 80096be:	e039      	b.n	8009734 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096c0:	f3ef 8305 	mrs	r3, IPSR
 80096c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80096c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d022      	beq.n	8009712 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d003      	beq.n	80096da <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80096d2:	f06f 0303 	mvn.w	r3, #3
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	e02c      	b.n	8009734 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80096da:	2300      	movs	r3, #0
 80096dc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80096de:	f107 0308 	add.w	r3, r7, #8
 80096e2:	461a      	mov	r2, r3
 80096e4:	2100      	movs	r1, #0
 80096e6:	6938      	ldr	r0, [r7, #16]
 80096e8:	f001 f868 	bl	800a7bc <xQueueReceiveFromISR>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d003      	beq.n	80096fa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80096f2:	f06f 0302 	mvn.w	r3, #2
 80096f6:	617b      	str	r3, [r7, #20]
 80096f8:	e01c      	b.n	8009734 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d019      	beq.n	8009734 <osSemaphoreAcquire+0x94>
 8009700:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <osSemaphoreAcquire+0xa0>)
 8009702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009706:	601a      	str	r2, [r3, #0]
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	e010      	b.n	8009734 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6938      	ldr	r0, [r7, #16]
 8009716:	f000 ff45 	bl	800a5a4 <xQueueSemaphoreTake>
 800971a:	4603      	mov	r3, r0
 800971c:	2b01      	cmp	r3, #1
 800971e:	d009      	beq.n	8009734 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009726:	f06f 0301 	mvn.w	r3, #1
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	e002      	b.n	8009734 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800972e:	f06f 0302 	mvn.w	r3, #2
 8009732:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009734:	697b      	ldr	r3, [r7, #20]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	e000ed04 	.word	0xe000ed04

08009744 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009750:	2300      	movs	r3, #0
 8009752:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d103      	bne.n	8009762 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800975a:	f06f 0303 	mvn.w	r3, #3
 800975e:	617b      	str	r3, [r7, #20]
 8009760:	e02c      	b.n	80097bc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009762:	f3ef 8305 	mrs	r3, IPSR
 8009766:	60fb      	str	r3, [r7, #12]
  return(result);
 8009768:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800976a:	2b00      	cmp	r3, #0
 800976c:	d01a      	beq.n	80097a4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800976e:	2300      	movs	r3, #0
 8009770:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009772:	f107 0308 	add.w	r3, r7, #8
 8009776:	4619      	mov	r1, r3
 8009778:	6938      	ldr	r0, [r7, #16]
 800977a:	f000 fda6 	bl	800a2ca <xQueueGiveFromISR>
 800977e:	4603      	mov	r3, r0
 8009780:	2b01      	cmp	r3, #1
 8009782:	d003      	beq.n	800978c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009784:	f06f 0302 	mvn.w	r3, #2
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	e017      	b.n	80097bc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d014      	beq.n	80097bc <osSemaphoreRelease+0x78>
 8009792:	4b0d      	ldr	r3, [pc, #52]	; (80097c8 <osSemaphoreRelease+0x84>)
 8009794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	e00b      	b.n	80097bc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80097a4:	2300      	movs	r3, #0
 80097a6:	2200      	movs	r2, #0
 80097a8:	2100      	movs	r1, #0
 80097aa:	6938      	ldr	r0, [r7, #16]
 80097ac:	f000 fbf4 	bl	8009f98 <xQueueGenericSend>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d002      	beq.n	80097bc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80097b6:	f06f 0302 	mvn.w	r3, #2
 80097ba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80097bc:	697b      	ldr	r3, [r7, #20]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	e000ed04 	.word	0xe000ed04

080097cc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d8:	f3ef 8305 	mrs	r3, IPSR
 80097dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80097de:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80097e4:	f06f 0305 	mvn.w	r3, #5
 80097e8:	617b      	str	r3, [r7, #20]
 80097ea:	e00e      	b.n	800980a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d103      	bne.n	80097fa <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80097f2:	f06f 0303 	mvn.w	r3, #3
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	e007      	b.n	800980a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80097fa:	6938      	ldr	r0, [r7, #16]
 80097fc:	f001 f9d4 	bl	800aba8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009804:	6938      	ldr	r0, [r7, #16]
 8009806:	f001 f859 	bl	800a8bc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800980a:	697b      	ldr	r3, [r7, #20]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	; 0x28
 8009818:	af02      	add	r7, sp, #8
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009820:	2300      	movs	r3, #0
 8009822:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009824:	f3ef 8305 	mrs	r3, IPSR
 8009828:	613b      	str	r3, [r7, #16]
  return(result);
 800982a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800982c:	2b00      	cmp	r3, #0
 800982e:	d15f      	bne.n	80098f0 <osMessageQueueNew+0xdc>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d05c      	beq.n	80098f0 <osMessageQueueNew+0xdc>
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d059      	beq.n	80098f0 <osMessageQueueNew+0xdc>
    mem = -1;
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d029      	beq.n	800989c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d012      	beq.n	8009876 <osMessageQueueNew+0x62>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b4f      	cmp	r3, #79	; 0x4f
 8009856:	d90e      	bls.n	8009876 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00a      	beq.n	8009876 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	695a      	ldr	r2, [r3, #20]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	68b9      	ldr	r1, [r7, #8]
 8009868:	fb01 f303 	mul.w	r3, r1, r3
 800986c:	429a      	cmp	r2, r3
 800986e:	d302      	bcc.n	8009876 <osMessageQueueNew+0x62>
        mem = 1;
 8009870:	2301      	movs	r3, #1
 8009872:	61bb      	str	r3, [r7, #24]
 8009874:	e014      	b.n	80098a0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d110      	bne.n	80098a0 <osMessageQueueNew+0x8c>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10c      	bne.n	80098a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800988a:	2b00      	cmp	r3, #0
 800988c:	d108      	bne.n	80098a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d104      	bne.n	80098a0 <osMessageQueueNew+0x8c>
          mem = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	61bb      	str	r3, [r7, #24]
 800989a:	e001      	b.n	80098a0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d10b      	bne.n	80098be <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	691a      	ldr	r2, [r3, #16]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	2100      	movs	r1, #0
 80098b0:	9100      	str	r1, [sp, #0]
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f000 fa2f 	bl	8009d18 <xQueueGenericCreateStatic>
 80098ba:	61f8      	str	r0, [r7, #28]
 80098bc:	e008      	b.n	80098d0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d105      	bne.n	80098d0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80098c4:	2200      	movs	r2, #0
 80098c6:	68b9      	ldr	r1, [r7, #8]
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 fa9d 	bl	8009e08 <xQueueGenericCreate>
 80098ce:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00c      	beq.n	80098f0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	617b      	str	r3, [r7, #20]
 80098e2:	e001      	b.n	80098e8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80098e8:	6979      	ldr	r1, [r7, #20]
 80098ea:	69f8      	ldr	r0, [r7, #28]
 80098ec:	f001 f932 	bl	800ab54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80098f0:	69fb      	ldr	r3, [r7, #28]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3720      	adds	r7, #32
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	4613      	mov	r3, r2
 800990a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009910:	2300      	movs	r3, #0
 8009912:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009914:	f3ef 8305 	mrs	r3, IPSR
 8009918:	617b      	str	r3, [r7, #20]
  return(result);
 800991a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800991c:	2b00      	cmp	r3, #0
 800991e:	d028      	beq.n	8009972 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <osMessageQueuePut+0x36>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <osMessageQueuePut+0x36>
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009932:	f06f 0303 	mvn.w	r3, #3
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	e038      	b.n	80099ac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800993a:	2300      	movs	r3, #0
 800993c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800993e:	f107 0210 	add.w	r2, r7, #16
 8009942:	2300      	movs	r3, #0
 8009944:	68b9      	ldr	r1, [r7, #8]
 8009946:	69b8      	ldr	r0, [r7, #24]
 8009948:	f000 fc24 	bl	800a194 <xQueueGenericSendFromISR>
 800994c:	4603      	mov	r3, r0
 800994e:	2b01      	cmp	r3, #1
 8009950:	d003      	beq.n	800995a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009952:	f06f 0302 	mvn.w	r3, #2
 8009956:	61fb      	str	r3, [r7, #28]
 8009958:	e028      	b.n	80099ac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d025      	beq.n	80099ac <osMessageQueuePut+0xb0>
 8009960:	4b15      	ldr	r3, [pc, #84]	; (80099b8 <osMessageQueuePut+0xbc>)
 8009962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	e01c      	b.n	80099ac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <osMessageQueuePut+0x82>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d103      	bne.n	8009986 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800997e:	f06f 0303 	mvn.w	r3, #3
 8009982:	61fb      	str	r3, [r7, #28]
 8009984:	e012      	b.n	80099ac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009986:	2300      	movs	r3, #0
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	69b8      	ldr	r0, [r7, #24]
 800998e:	f000 fb03 	bl	8009f98 <xQueueGenericSend>
 8009992:	4603      	mov	r3, r0
 8009994:	2b01      	cmp	r3, #1
 8009996:	d009      	beq.n	80099ac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800999e:	f06f 0301 	mvn.w	r3, #1
 80099a2:	61fb      	str	r3, [r7, #28]
 80099a4:	e002      	b.n	80099ac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80099a6:	f06f 0302 	mvn.w	r3, #2
 80099aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80099ac:	69fb      	ldr	r3, [r7, #28]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3720      	adds	r7, #32
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
 80099c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099d2:	f3ef 8305 	mrs	r3, IPSR
 80099d6:	617b      	str	r3, [r7, #20]
  return(result);
 80099d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d028      	beq.n	8009a30 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <osMessageQueueGet+0x34>
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d002      	beq.n	80099f0 <osMessageQueueGet+0x34>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80099f0:	f06f 0303 	mvn.w	r3, #3
 80099f4:	61fb      	str	r3, [r7, #28]
 80099f6:	e037      	b.n	8009a68 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80099f8:	2300      	movs	r3, #0
 80099fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80099fc:	f107 0310 	add.w	r3, r7, #16
 8009a00:	461a      	mov	r2, r3
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	69b8      	ldr	r0, [r7, #24]
 8009a06:	f000 fed9 	bl	800a7bc <xQueueReceiveFromISR>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d003      	beq.n	8009a18 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009a10:	f06f 0302 	mvn.w	r3, #2
 8009a14:	61fb      	str	r3, [r7, #28]
 8009a16:	e027      	b.n	8009a68 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d024      	beq.n	8009a68 <osMessageQueueGet+0xac>
 8009a1e:	4b15      	ldr	r3, [pc, #84]	; (8009a74 <osMessageQueueGet+0xb8>)
 8009a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	e01b      	b.n	8009a68 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d002      	beq.n	8009a3c <osMessageQueueGet+0x80>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d103      	bne.n	8009a44 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009a3c:	f06f 0303 	mvn.w	r3, #3
 8009a40:	61fb      	str	r3, [r7, #28]
 8009a42:	e011      	b.n	8009a68 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	68b9      	ldr	r1, [r7, #8]
 8009a48:	69b8      	ldr	r0, [r7, #24]
 8009a4a:	f000 fccb 	bl	800a3e4 <xQueueReceive>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d009      	beq.n	8009a68 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009a5a:	f06f 0301 	mvn.w	r3, #1
 8009a5e:	61fb      	str	r3, [r7, #28]
 8009a60:	e002      	b.n	8009a68 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009a62:	f06f 0302 	mvn.w	r3, #2
 8009a66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a68:	69fb      	ldr	r3, [r7, #28]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3720      	adds	r7, #32
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	e000ed04 	.word	0xe000ed04

08009a78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4a07      	ldr	r2, [pc, #28]	; (8009aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	4a06      	ldr	r2, [pc, #24]	; (8009aa8 <vApplicationGetIdleTaskMemory+0x30>)
 8009a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2280      	movs	r2, #128	; 0x80
 8009a94:	601a      	str	r2, [r3, #0]
}
 8009a96:	bf00      	nop
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	20000180 	.word	0x20000180
 8009aa8:	2000023c 	.word	0x2000023c

08009aac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	4a07      	ldr	r2, [pc, #28]	; (8009ad8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009abc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	4a06      	ldr	r2, [pc, #24]	; (8009adc <vApplicationGetTimerTaskMemory+0x30>)
 8009ac2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009aca:	601a      	str	r2, [r3, #0]
}
 8009acc:	bf00      	nop
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr
 8009ad8:	2000043c 	.word	0x2000043c
 8009adc:	200004f8 	.word	0x200004f8

08009ae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f103 0208 	add.w	r2, r3, #8
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f04f 32ff 	mov.w	r2, #4294967295
 8009af8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f103 0208 	add.w	r2, r3, #8
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f103 0208 	add.w	r2, r3, #8
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b2e:	bf00      	nop
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	601a      	str	r2, [r3, #0]
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b82:	b480      	push	{r7}
 8009b84:	b085      	sub	sp, #20
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b98:	d103      	bne.n	8009ba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	60fb      	str	r3, [r7, #12]
 8009ba0:	e00c      	b.n	8009bbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	60fb      	str	r3, [r7, #12]
 8009ba8:	e002      	b.n	8009bb0 <vListInsert+0x2e>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d2f6      	bcs.n	8009baa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	601a      	str	r2, [r3, #0]
}
 8009be8:	bf00      	nop
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	6892      	ldr	r2, [r2, #8]
 8009c0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	6852      	ldr	r2, [r2, #4]
 8009c14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d103      	bne.n	8009c28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	1e5a      	subs	r2, r3, #1
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c72:	f002 fc97 	bl	800c5a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c82:	fb01 f303 	mul.w	r3, r1, r3
 8009c86:	441a      	add	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	68f9      	ldr	r1, [r7, #12]
 8009ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ca8:	fb01 f303 	mul.w	r3, r1, r3
 8009cac:	441a      	add	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	22ff      	movs	r2, #255	; 0xff
 8009cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	22ff      	movs	r2, #255	; 0xff
 8009cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d114      	bne.n	8009cf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d01a      	beq.n	8009d06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3310      	adds	r3, #16
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f001 fc4b 	bl	800b570 <xTaskRemoveFromEventList>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d012      	beq.n	8009d06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <xQueueGenericReset+0xcc>)
 8009ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	e009      	b.n	8009d06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3310      	adds	r3, #16
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff fef2 	bl	8009ae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3324      	adds	r3, #36	; 0x24
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff feed 	bl	8009ae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d06:	f002 fc7d 	bl	800c604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d0a:	2301      	movs	r3, #1
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	e000ed04 	.word	0xe000ed04

08009d18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08e      	sub	sp, #56	; 0x38
 8009d1c:	af02      	add	r7, sp, #8
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d5a:	bf00      	nop
 8009d5c:	e7fe      	b.n	8009d5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <xQueueGenericCreateStatic+0x52>
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <xQueueGenericCreateStatic+0x56>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e000      	b.n	8009d70 <xQueueGenericCreateStatic+0x58>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	623b      	str	r3, [r7, #32]
}
 8009d86:	bf00      	nop
 8009d88:	e7fe      	b.n	8009d88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <xQueueGenericCreateStatic+0x7e>
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d101      	bne.n	8009d9a <xQueueGenericCreateStatic+0x82>
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <xQueueGenericCreateStatic+0x84>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	61fb      	str	r3, [r7, #28]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009db6:	2350      	movs	r3, #80	; 0x50
 8009db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2b50      	cmp	r3, #80	; 0x50
 8009dbe:	d00a      	beq.n	8009dd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	61bb      	str	r3, [r7, #24]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009dd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00d      	beq.n	8009dfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009dea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	4613      	mov	r3, r2
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	68b9      	ldr	r1, [r7, #8]
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 f83f 	bl	8009e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3730      	adds	r7, #48	; 0x30
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08a      	sub	sp, #40	; 0x28
 8009e0c:	af02      	add	r7, sp, #8
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10a      	bne.n	8009e32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	613b      	str	r3, [r7, #16]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	fb02 f303 	mul.w	r3, r2, r3
 8009e3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	3350      	adds	r3, #80	; 0x50
 8009e40:	4618      	mov	r0, r3
 8009e42:	f002 fcd1 	bl	800c7e8 <pvPortMalloc>
 8009e46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d011      	beq.n	8009e72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	3350      	adds	r3, #80	; 0x50
 8009e56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e60:	79fa      	ldrb	r2, [r7, #7]
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	4613      	mov	r3, r2
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	68b9      	ldr	r1, [r7, #8]
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 f805 	bl	8009e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e72:	69bb      	ldr	r3, [r7, #24]
	}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3720      	adds	r7, #32
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d103      	bne.n	8009e98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	e002      	b.n	8009e9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009eaa:	2101      	movs	r1, #1
 8009eac:	69b8      	ldr	r0, [r7, #24]
 8009eae:	f7ff fecb 	bl	8009c48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	78fa      	ldrb	r2, [r7, #3]
 8009eb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b08a      	sub	sp, #40	; 0x28
 8009ec6:	af02      	add	r7, sp, #8
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	61bb      	str	r3, [r7, #24]
}
 8009ee6:	bf00      	nop
 8009ee8:	e7fe      	b.n	8009ee8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d90a      	bls.n	8009f08 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	617b      	str	r3, [r7, #20]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f08:	2302      	movs	r3, #2
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2100      	movs	r1, #0
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7ff ff00 	bl	8009d18 <xQueueGenericCreateStatic>
 8009f18:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f26:	69fb      	ldr	r3, [r7, #28]
	}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3720      	adds	r7, #32
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10a      	bne.n	8009f56 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	613b      	str	r3, [r7, #16]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d90a      	bls.n	8009f74 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	60fb      	str	r3, [r7, #12]
}
 8009f70:	bf00      	nop
 8009f72:	e7fe      	b.n	8009f72 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f74:	2202      	movs	r2, #2
 8009f76:	2100      	movs	r1, #0
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff ff45 	bl	8009e08 <xQueueGenericCreate>
 8009f7e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	683a      	ldr	r2, [r7, #0]
 8009f8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f8c:	697b      	ldr	r3, [r7, #20]
	}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3718      	adds	r7, #24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08e      	sub	sp, #56	; 0x38
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <xQueueGenericSend+0x32>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fc6:	bf00      	nop
 8009fc8:	e7fe      	b.n	8009fc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d103      	bne.n	8009fd8 <xQueueGenericSend+0x40>
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <xQueueGenericSend+0x44>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e000      	b.n	8009fde <xQueueGenericSend+0x46>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <xQueueGenericSend+0x60>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d103      	bne.n	800a006 <xQueueGenericSend+0x6e>
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <xQueueGenericSend+0x72>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <xQueueGenericSend+0x74>
 800a00a:	2300      	movs	r3, #0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <xQueueGenericSend+0x8e>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	623b      	str	r3, [r7, #32]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a026:	f001 fc65 	bl	800b8f4 <xTaskGetSchedulerState>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <xQueueGenericSend+0x9e>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <xQueueGenericSend+0xa2>
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <xQueueGenericSend+0xa4>
 800a03a:	2300      	movs	r3, #0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <xQueueGenericSend+0xbe>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	61fb      	str	r3, [r7, #28]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a056:	f002 faa5 	bl	800c5a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a062:	429a      	cmp	r2, r3
 800a064:	d302      	bcc.n	800a06c <xQueueGenericSend+0xd4>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d129      	bne.n	800a0c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	68b9      	ldr	r1, [r7, #8]
 800a070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a072:	f000 fc5e 	bl	800a932 <prvCopyDataToQueue>
 800a076:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d010      	beq.n	800a0a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	3324      	adds	r3, #36	; 0x24
 800a084:	4618      	mov	r0, r3
 800a086:	f001 fa73 	bl	800b570 <xTaskRemoveFromEventList>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d013      	beq.n	800a0b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a090:	4b3f      	ldr	r3, [pc, #252]	; (800a190 <xQueueGenericSend+0x1f8>)
 800a092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	e00a      	b.n	800a0b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d007      	beq.n	800a0b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0a8:	4b39      	ldr	r3, [pc, #228]	; (800a190 <xQueueGenericSend+0x1f8>)
 800a0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0b8:	f002 faa4 	bl	800c604 <vPortExitCritical>
				return pdPASS;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e063      	b.n	800a188 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d103      	bne.n	800a0ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0c6:	f002 fa9d 	bl	800c604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	e05c      	b.n	800a188 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d106      	bne.n	800a0e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0d4:	f107 0314 	add.w	r3, r7, #20
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 faad 	bl	800b638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0e2:	f002 fa8f 	bl	800c604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0e6:	f001 f819 	bl	800b11c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0ea:	f002 fa5b 	bl	800c5a4 <vPortEnterCritical>
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0f4:	b25b      	sxtb	r3, r3
 800a0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fa:	d103      	bne.n	800a104 <xQueueGenericSend+0x16c>
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a10a:	b25b      	sxtb	r3, r3
 800a10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a110:	d103      	bne.n	800a11a <xQueueGenericSend+0x182>
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a11a:	f002 fa73 	bl	800c604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a11e:	1d3a      	adds	r2, r7, #4
 800a120:	f107 0314 	add.w	r3, r7, #20
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f001 fa9c 	bl	800b664 <xTaskCheckForTimeOut>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d124      	bne.n	800a17c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a134:	f000 fcf5 	bl	800ab22 <prvIsQueueFull>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d018      	beq.n	800a170 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a140:	3310      	adds	r3, #16
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	4611      	mov	r1, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f001 f9c2 	bl	800b4d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a14c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a14e:	f000 fc80 	bl	800aa52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a152:	f000 fff1 	bl	800b138 <xTaskResumeAll>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f47f af7c 	bne.w	800a056 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <xQueueGenericSend+0x1f8>)
 800a160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	e772      	b.n	800a056 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a172:	f000 fc6e 	bl	800aa52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a176:	f000 ffdf 	bl	800b138 <xTaskResumeAll>
 800a17a:	e76c      	b.n	800a056 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a17c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a17e:	f000 fc68 	bl	800aa52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a182:	f000 ffd9 	bl	800b138 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a186:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3738      	adds	r7, #56	; 0x38
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	e000ed04 	.word	0xe000ed04

0800a194 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b090      	sub	sp, #64	; 0x40
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d103      	bne.n	800a1d0 <xQueueGenericSendFromISR+0x3c>
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <xQueueGenericSendFromISR+0x40>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e000      	b.n	800a1d6 <xQueueGenericSendFromISR+0x42>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10a      	bne.n	800a1f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1ec:	bf00      	nop
 800a1ee:	e7fe      	b.n	800a1ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d103      	bne.n	800a1fe <xQueueGenericSendFromISR+0x6a>
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d101      	bne.n	800a202 <xQueueGenericSendFromISR+0x6e>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e000      	b.n	800a204 <xQueueGenericSendFromISR+0x70>
 800a202:	2300      	movs	r3, #0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	623b      	str	r3, [r7, #32]
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a21e:	f002 faa3 	bl	800c768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a222:	f3ef 8211 	mrs	r2, BASEPRI
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	61fa      	str	r2, [r7, #28]
 800a238:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a23a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a246:	429a      	cmp	r2, r3
 800a248:	d302      	bcc.n	800a250 <xQueueGenericSendFromISR+0xbc>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d12f      	bne.n	800a2b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a266:	f000 fb64 	bl	800a932 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a26a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a272:	d112      	bne.n	800a29a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d016      	beq.n	800a2aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	3324      	adds	r3, #36	; 0x24
 800a280:	4618      	mov	r0, r3
 800a282:	f001 f975 	bl	800b570 <xTaskRemoveFromEventList>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00e      	beq.n	800a2aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00b      	beq.n	800a2aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	e007      	b.n	800a2aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a29a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a29e:	3301      	adds	r3, #1
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	b25a      	sxtb	r2, r3
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a2ae:	e001      	b.n	800a2b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3740      	adds	r7, #64	; 0x40
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b08e      	sub	sp, #56	; 0x38
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	623b      	str	r3, [r7, #32]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	61fb      	str	r3, [r7, #28]
}
 800a30e:	bf00      	nop
 800a310:	e7fe      	b.n	800a310 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d103      	bne.n	800a322 <xQueueGiveFromISR+0x58>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <xQueueGiveFromISR+0x5c>
 800a322:	2301      	movs	r3, #1
 800a324:	e000      	b.n	800a328 <xQueueGiveFromISR+0x5e>
 800a326:	2300      	movs	r3, #0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	61bb      	str	r3, [r7, #24]
}
 800a33e:	bf00      	nop
 800a340:	e7fe      	b.n	800a340 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a342:	f002 fa11 	bl	800c768 <vPortValidateInterruptPriority>
	__asm volatile
 800a346:	f3ef 8211 	mrs	r2, BASEPRI
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	617a      	str	r2, [r7, #20]
 800a35c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a35e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a360:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a36e:	429a      	cmp	r2, r3
 800a370:	d22b      	bcs.n	800a3ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a384:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38c:	d112      	bne.n	800a3b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	2b00      	cmp	r3, #0
 800a394:	d016      	beq.n	800a3c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	3324      	adds	r3, #36	; 0x24
 800a39a:	4618      	mov	r0, r3
 800a39c:	f001 f8e8 	bl	800b570 <xTaskRemoveFromEventList>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00e      	beq.n	800a3c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00b      	beq.n	800a3c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	e007      	b.n	800a3c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	b25a      	sxtb	r2, r3
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3c8:	e001      	b.n	800a3ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f383 8811 	msr	BASEPRI, r3
}
 800a3d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3738      	adds	r7, #56	; 0x38
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08c      	sub	sp, #48	; 0x30
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10a      	bne.n	800a414 <xQueueReceive+0x30>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	623b      	str	r3, [r7, #32]
}
 800a410:	bf00      	nop
 800a412:	e7fe      	b.n	800a412 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d103      	bne.n	800a422 <xQueueReceive+0x3e>
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <xQueueReceive+0x42>
 800a422:	2301      	movs	r3, #1
 800a424:	e000      	b.n	800a428 <xQueueReceive+0x44>
 800a426:	2300      	movs	r3, #0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <xQueueReceive+0x5e>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	61fb      	str	r3, [r7, #28]
}
 800a43e:	bf00      	nop
 800a440:	e7fe      	b.n	800a440 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a442:	f001 fa57 	bl	800b8f4 <xTaskGetSchedulerState>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <xQueueReceive+0x6e>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <xQueueReceive+0x72>
 800a452:	2301      	movs	r3, #1
 800a454:	e000      	b.n	800a458 <xQueueReceive+0x74>
 800a456:	2300      	movs	r3, #0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <xQueueReceive+0x8e>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	61bb      	str	r3, [r7, #24]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a472:	f002 f897 	bl	800c5a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d01f      	beq.n	800a4c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a482:	68b9      	ldr	r1, [r7, #8]
 800a484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a486:	f000 fabe 	bl	800aa06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	1e5a      	subs	r2, r3, #1
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00f      	beq.n	800a4ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	3310      	adds	r3, #16
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f001 f866 	bl	800b570 <xTaskRemoveFromEventList>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d007      	beq.n	800a4ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4aa:	4b3d      	ldr	r3, [pc, #244]	; (800a5a0 <xQueueReceive+0x1bc>)
 800a4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4ba:	f002 f8a3 	bl	800c604 <vPortExitCritical>
				return pdPASS;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e069      	b.n	800a596 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d103      	bne.n	800a4d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4c8:	f002 f89c 	bl	800c604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e062      	b.n	800a596 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d106      	bne.n	800a4e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4d6:	f107 0310 	add.w	r3, r7, #16
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f001 f8ac 	bl	800b638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4e4:	f002 f88e 	bl	800c604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4e8:	f000 fe18 	bl	800b11c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ec:	f002 f85a 	bl	800c5a4 <vPortEnterCritical>
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4f6:	b25b      	sxtb	r3, r3
 800a4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fc:	d103      	bne.n	800a506 <xQueueReceive+0x122>
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a50c:	b25b      	sxtb	r3, r3
 800a50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a512:	d103      	bne.n	800a51c <xQueueReceive+0x138>
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a51c:	f002 f872 	bl	800c604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a520:	1d3a      	adds	r2, r7, #4
 800a522:	f107 0310 	add.w	r3, r7, #16
 800a526:	4611      	mov	r1, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f001 f89b 	bl	800b664 <xTaskCheckForTimeOut>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d123      	bne.n	800a57c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a536:	f000 fade 	bl	800aaf6 <prvIsQueueEmpty>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d017      	beq.n	800a570 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	3324      	adds	r3, #36	; 0x24
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 ffc1 	bl	800b4d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a54e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a550:	f000 fa7f 	bl	800aa52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a554:	f000 fdf0 	bl	800b138 <xTaskResumeAll>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d189      	bne.n	800a472 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a55e:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <xQueueReceive+0x1bc>)
 800a560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	e780      	b.n	800a472 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a572:	f000 fa6e 	bl	800aa52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a576:	f000 fddf 	bl	800b138 <xTaskResumeAll>
 800a57a:	e77a      	b.n	800a472 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57e:	f000 fa68 	bl	800aa52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a582:	f000 fdd9 	bl	800b138 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a588:	f000 fab5 	bl	800aaf6 <prvIsQueueEmpty>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f43f af6f 	beq.w	800a472 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a594:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a596:	4618      	mov	r0, r3
 800a598:	3730      	adds	r7, #48	; 0x30
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	e000ed04 	.word	0xe000ed04

0800a5a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b08e      	sub	sp, #56	; 0x38
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	623b      	str	r3, [r7, #32]
}
 800a5d2:	bf00      	nop
 800a5d4:	e7fe      	b.n	800a5d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00a      	beq.n	800a5f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	61fb      	str	r3, [r7, #28]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5f4:	f001 f97e 	bl	800b8f4 <xTaskGetSchedulerState>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d102      	bne.n	800a604 <xQueueSemaphoreTake+0x60>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <xQueueSemaphoreTake+0x64>
 800a604:	2301      	movs	r3, #1
 800a606:	e000      	b.n	800a60a <xQueueSemaphoreTake+0x66>
 800a608:	2300      	movs	r3, #0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10a      	bne.n	800a624 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	61bb      	str	r3, [r7, #24]
}
 800a620:	bf00      	nop
 800a622:	e7fe      	b.n	800a622 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a624:	f001 ffbe 	bl	800c5a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	2b00      	cmp	r3, #0
 800a632:	d024      	beq.n	800a67e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a636:	1e5a      	subs	r2, r3, #1
 800a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d104      	bne.n	800a64e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a644:	f001 facc 	bl	800bbe0 <pvTaskIncrementMutexHeldCount>
 800a648:	4602      	mov	r2, r0
 800a64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00f      	beq.n	800a676 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	3310      	adds	r3, #16
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 ff88 	bl	800b570 <xTaskRemoveFromEventList>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d007      	beq.n	800a676 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a666:	4b54      	ldr	r3, [pc, #336]	; (800a7b8 <xQueueSemaphoreTake+0x214>)
 800a668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a676:	f001 ffc5 	bl	800c604 <vPortExitCritical>
				return pdPASS;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e097      	b.n	800a7ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d111      	bne.n	800a6a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	617b      	str	r3, [r7, #20]
}
 800a69c:	bf00      	nop
 800a69e:	e7fe      	b.n	800a69e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a6a0:	f001 ffb0 	bl	800c604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e082      	b.n	800a7ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6ae:	f107 030c 	add.w	r3, r7, #12
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 ffc0 	bl	800b638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6bc:	f001 ffa2 	bl	800c604 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6c0:	f000 fd2c 	bl	800b11c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6c4:	f001 ff6e 	bl	800c5a4 <vPortEnterCritical>
 800a6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ce:	b25b      	sxtb	r3, r3
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d103      	bne.n	800a6de <xQueueSemaphoreTake+0x13a>
 800a6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6e4:	b25b      	sxtb	r3, r3
 800a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ea:	d103      	bne.n	800a6f4 <xQueueSemaphoreTake+0x150>
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6f4:	f001 ff86 	bl	800c604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6f8:	463a      	mov	r2, r7
 800a6fa:	f107 030c 	add.w	r3, r7, #12
 800a6fe:	4611      	mov	r1, r2
 800a700:	4618      	mov	r0, r3
 800a702:	f000 ffaf 	bl	800b664 <xTaskCheckForTimeOut>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d132      	bne.n	800a772 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a70c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a70e:	f000 f9f2 	bl	800aaf6 <prvIsQueueEmpty>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d026      	beq.n	800a766 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d109      	bne.n	800a734 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a720:	f001 ff40 	bl	800c5a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	4618      	mov	r0, r3
 800a72a:	f001 f901 	bl	800b930 <xTaskPriorityInherit>
 800a72e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a730:	f001 ff68 	bl	800c604 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a736:	3324      	adds	r3, #36	; 0x24
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	4611      	mov	r1, r2
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 fec7 	bl	800b4d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a744:	f000 f985 	bl	800aa52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a748:	f000 fcf6 	bl	800b138 <xTaskResumeAll>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f47f af68 	bne.w	800a624 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a754:	4b18      	ldr	r3, [pc, #96]	; (800a7b8 <xQueueSemaphoreTake+0x214>)
 800a756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	e75e      	b.n	800a624 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a768:	f000 f973 	bl	800aa52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a76c:	f000 fce4 	bl	800b138 <xTaskResumeAll>
 800a770:	e758      	b.n	800a624 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a774:	f000 f96d 	bl	800aa52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a778:	f000 fcde 	bl	800b138 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a77c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a77e:	f000 f9ba 	bl	800aaf6 <prvIsQueueEmpty>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	f43f af4d 	beq.w	800a624 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00d      	beq.n	800a7ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a790:	f001 ff08 	bl	800c5a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a796:	f000 f8b4 	bl	800a902 <prvGetDisinheritPriorityAfterTimeout>
 800a79a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f001 f99a 	bl	800badc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a7a8:	f001 ff2c 	bl	800c604 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3738      	adds	r7, #56	; 0x38
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	e000ed04 	.word	0xe000ed04

0800a7bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08e      	sub	sp, #56	; 0x38
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10a      	bne.n	800a7e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	623b      	str	r3, [r7, #32]
}
 800a7e4:	bf00      	nop
 800a7e6:	e7fe      	b.n	800a7e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d103      	bne.n	800a7f6 <xQueueReceiveFromISR+0x3a>
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <xQueueReceiveFromISR+0x3e>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e000      	b.n	800a7fc <xQueueReceiveFromISR+0x40>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10a      	bne.n	800a816 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	61fb      	str	r3, [r7, #28]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a816:	f001 ffa7 	bl	800c768 <vPortValidateInterruptPriority>
	__asm volatile
 800a81a:	f3ef 8211 	mrs	r2, BASEPRI
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	61ba      	str	r2, [r7, #24]
 800a830:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a832:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a834:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d02f      	beq.n	800a8a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a84c:	68b9      	ldr	r1, [r7, #8]
 800a84e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a850:	f000 f8d9 	bl	800aa06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	1e5a      	subs	r2, r3, #1
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a85c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a864:	d112      	bne.n	800a88c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d016      	beq.n	800a89c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	3310      	adds	r3, #16
 800a872:	4618      	mov	r0, r3
 800a874:	f000 fe7c 	bl	800b570 <xTaskRemoveFromEventList>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00e      	beq.n	800a89c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00b      	beq.n	800a89c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	e007      	b.n	800a89c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a88c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a890:	3301      	adds	r3, #1
 800a892:	b2db      	uxtb	r3, r3
 800a894:	b25a      	sxtb	r2, r3
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a89c:	2301      	movs	r3, #1
 800a89e:	637b      	str	r3, [r7, #52]	; 0x34
 800a8a0:	e001      	b.n	800a8a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	f383 8811 	msr	BASEPRI, r3
}
 800a8b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3738      	adds	r7, #56	; 0x38
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10a      	bne.n	800a8e4 <vQueueDelete+0x28>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	60bb      	str	r3, [r7, #8]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 f95f 	bl	800aba8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d102      	bne.n	800a8fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f002 f843 	bl	800c980 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a8fa:	bf00      	nop
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d006      	beq.n	800a920 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	e001      	b.n	800a924 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a920:	2300      	movs	r3, #0
 800a922:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a924:	68fb      	ldr	r3, [r7, #12]
	}
 800a926:	4618      	mov	r0, r3
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b086      	sub	sp, #24
 800a936:	af00      	add	r7, sp, #0
 800a938:	60f8      	str	r0, [r7, #12]
 800a93a:	60b9      	str	r1, [r7, #8]
 800a93c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a93e:	2300      	movs	r3, #0
 800a940:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a946:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10d      	bne.n	800a96c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d14d      	bne.n	800a9f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 f84f 	bl	800ba00 <xTaskPriorityDisinherit>
 800a962:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	609a      	str	r2, [r3, #8]
 800a96a:	e043      	b.n	800a9f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d119      	bne.n	800a9a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6858      	ldr	r0, [r3, #4]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97a:	461a      	mov	r2, r3
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	f002 fa4f 	bl	800ce20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98a:	441a      	add	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d32b      	bcc.n	800a9f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	605a      	str	r2, [r3, #4]
 800a9a4:	e026      	b.n	800a9f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68d8      	ldr	r0, [r3, #12]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	68b9      	ldr	r1, [r7, #8]
 800a9b2:	f002 fa35 	bl	800ce20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	425b      	negs	r3, r3
 800a9c0:	441a      	add	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d207      	bcs.n	800a9e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	689a      	ldr	r2, [r3, #8]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9da:	425b      	negs	r3, r3
 800a9dc:	441a      	add	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d105      	bne.n	800a9f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d002      	beq.n	800a9f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	1c5a      	adds	r2, r3, #1
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a9fc:	697b      	ldr	r3, [r7, #20]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b082      	sub	sp, #8
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d018      	beq.n	800aa4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa20:	441a      	add	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68da      	ldr	r2, [r3, #12]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d303      	bcc.n	800aa3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68d9      	ldr	r1, [r3, #12]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa42:	461a      	mov	r2, r3
 800aa44:	6838      	ldr	r0, [r7, #0]
 800aa46:	f002 f9eb 	bl	800ce20 <memcpy>
	}
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa5a:	f001 fda3 	bl	800c5a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa66:	e011      	b.n	800aa8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d012      	beq.n	800aa96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3324      	adds	r3, #36	; 0x24
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fd7b 	bl	800b570 <xTaskRemoveFromEventList>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa80:	f000 fe52 	bl	800b728 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa84:	7bfb      	ldrb	r3, [r7, #15]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dce9      	bgt.n	800aa68 <prvUnlockQueue+0x16>
 800aa94:	e000      	b.n	800aa98 <prvUnlockQueue+0x46>
					break;
 800aa96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	22ff      	movs	r2, #255	; 0xff
 800aa9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aaa0:	f001 fdb0 	bl	800c604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aaa4:	f001 fd7e 	bl	800c5a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aab0:	e011      	b.n	800aad6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d012      	beq.n	800aae0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	3310      	adds	r3, #16
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 fd56 	bl	800b570 <xTaskRemoveFromEventList>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aaca:	f000 fe2d 	bl	800b728 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dce9      	bgt.n	800aab2 <prvUnlockQueue+0x60>
 800aade:	e000      	b.n	800aae2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aae0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	22ff      	movs	r2, #255	; 0xff
 800aae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aaea:	f001 fd8b 	bl	800c604 <vPortExitCritical>
}
 800aaee:	bf00      	nop
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b084      	sub	sp, #16
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aafe:	f001 fd51 	bl	800c5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d102      	bne.n	800ab10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	e001      	b.n	800ab14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab14:	f001 fd76 	bl	800c604 <vPortExitCritical>

	return xReturn;
 800ab18:	68fb      	ldr	r3, [r7, #12]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab2a:	f001 fd3b 	bl	800c5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d102      	bne.n	800ab40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	60fb      	str	r3, [r7, #12]
 800ab3e:	e001      	b.n	800ab44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab40:	2300      	movs	r3, #0
 800ab42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab44:	f001 fd5e 	bl	800c604 <vPortExitCritical>

	return xReturn;
 800ab48:	68fb      	ldr	r3, [r7, #12]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab5e:	2300      	movs	r3, #0
 800ab60:	60fb      	str	r3, [r7, #12]
 800ab62:	e014      	b.n	800ab8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab64:	4a0f      	ldr	r2, [pc, #60]	; (800aba4 <vQueueAddToRegistry+0x50>)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10b      	bne.n	800ab88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab70:	490c      	ldr	r1, [pc, #48]	; (800aba4 <vQueueAddToRegistry+0x50>)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab7a:	4a0a      	ldr	r2, [pc, #40]	; (800aba4 <vQueueAddToRegistry+0x50>)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	4413      	add	r3, r2
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab86:	e006      	b.n	800ab96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	60fb      	str	r3, [r7, #12]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b07      	cmp	r3, #7
 800ab92:	d9e7      	bls.n	800ab64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20008e3c 	.word	0x20008e3c

0800aba8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	e016      	b.n	800abe4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800abb6:	4a10      	ldr	r2, [pc, #64]	; (800abf8 <vQueueUnregisterQueue+0x50>)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	4413      	add	r3, r2
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d10b      	bne.n	800abde <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800abc6:	4a0c      	ldr	r2, [pc, #48]	; (800abf8 <vQueueUnregisterQueue+0x50>)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2100      	movs	r1, #0
 800abcc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800abd0:	4a09      	ldr	r2, [pc, #36]	; (800abf8 <vQueueUnregisterQueue+0x50>)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	4413      	add	r3, r2
 800abd8:	2200      	movs	r2, #0
 800abda:	605a      	str	r2, [r3, #4]
				break;
 800abdc:	e006      	b.n	800abec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3301      	adds	r3, #1
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b07      	cmp	r3, #7
 800abe8:	d9e5      	bls.n	800abb6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800abea:	bf00      	nop
 800abec:	bf00      	nop
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	20008e3c 	.word	0x20008e3c

0800abfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac0c:	f001 fcca 	bl	800c5a4 <vPortEnterCritical>
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac16:	b25b      	sxtb	r3, r3
 800ac18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1c:	d103      	bne.n	800ac26 <vQueueWaitForMessageRestricted+0x2a>
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac2c:	b25b      	sxtb	r3, r3
 800ac2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac32:	d103      	bne.n	800ac3c <vQueueWaitForMessageRestricted+0x40>
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac3c:	f001 fce2 	bl	800c604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d106      	bne.n	800ac56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	3324      	adds	r3, #36	; 0x24
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	68b9      	ldr	r1, [r7, #8]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 fc61 	bl	800b518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac56:	6978      	ldr	r0, [r7, #20]
 800ac58:	f7ff fefb 	bl	800aa52 <prvUnlockQueue>
	}
 800ac5c:	bf00      	nop
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08e      	sub	sp, #56	; 0x38
 800ac68:	af04      	add	r7, sp, #16
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	623b      	str	r3, [r7, #32]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10a      	bne.n	800acaa <xTaskCreateStatic+0x46>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	61fb      	str	r3, [r7, #28]
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acaa:	23bc      	movs	r3, #188	; 0xbc
 800acac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	2bbc      	cmp	r3, #188	; 0xbc
 800acb2:	d00a      	beq.n	800acca <xTaskCreateStatic+0x66>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	61bb      	str	r3, [r7, #24]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d01e      	beq.n	800ad10 <xTaskCreateStatic+0xac>
 800acd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d01b      	beq.n	800ad10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ace0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	2202      	movs	r2, #2
 800ace6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acea:	2300      	movs	r3, #0
 800acec:	9303      	str	r3, [sp, #12]
 800acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf0:	9302      	str	r3, [sp, #8]
 800acf2:	f107 0314 	add.w	r3, r7, #20
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	68b9      	ldr	r1, [r7, #8]
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f000 f850 	bl	800ada8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad0a:	f000 f8f3 	bl	800aef4 <prvAddNewTaskToReadyList>
 800ad0e:	e001      	b.n	800ad14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad14:	697b      	ldr	r3, [r7, #20]
	}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3728      	adds	r7, #40	; 0x28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b08c      	sub	sp, #48	; 0x30
 800ad22:	af04      	add	r7, sp, #16
 800ad24:	60f8      	str	r0, [r7, #12]
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	603b      	str	r3, [r7, #0]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad2e:	88fb      	ldrh	r3, [r7, #6]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 fd58 	bl	800c7e8 <pvPortMalloc>
 800ad38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00e      	beq.n	800ad5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad40:	20bc      	movs	r0, #188	; 0xbc
 800ad42:	f001 fd51 	bl	800c7e8 <pvPortMalloc>
 800ad46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	697a      	ldr	r2, [r7, #20]
 800ad52:	631a      	str	r2, [r3, #48]	; 0x30
 800ad54:	e005      	b.n	800ad62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad56:	6978      	ldr	r0, [r7, #20]
 800ad58:	f001 fe12 	bl	800c980 <vPortFree>
 800ad5c:	e001      	b.n	800ad62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d017      	beq.n	800ad98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad70:	88fa      	ldrh	r2, [r7, #6]
 800ad72:	2300      	movs	r3, #0
 800ad74:	9303      	str	r3, [sp, #12]
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	9302      	str	r3, [sp, #8]
 800ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	68b9      	ldr	r1, [r7, #8]
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f000 f80e 	bl	800ada8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad8c:	69f8      	ldr	r0, [r7, #28]
 800ad8e:	f000 f8b1 	bl	800aef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad92:	2301      	movs	r3, #1
 800ad94:	61bb      	str	r3, [r7, #24]
 800ad96:	e002      	b.n	800ad9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad98:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
	}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3720      	adds	r7, #32
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b088      	sub	sp, #32
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	461a      	mov	r2, r3
 800adc0:	21a5      	movs	r1, #165	; 0xa5
 800adc2:	f002 f83b 	bl	800ce3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800add0:	3b01      	subs	r3, #1
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	f023 0307 	bic.w	r3, r3, #7
 800adde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00a      	beq.n	800ae00 <prvInitialiseNewTask+0x58>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	617b      	str	r3, [r7, #20]
}
 800adfc:	bf00      	nop
 800adfe:	e7fe      	b.n	800adfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d01f      	beq.n	800ae46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae06:	2300      	movs	r3, #0
 800ae08:	61fb      	str	r3, [r7, #28]
 800ae0a:	e012      	b.n	800ae32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	4413      	add	r3, r2
 800ae12:	7819      	ldrb	r1, [r3, #0]
 800ae14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	4413      	add	r3, r2
 800ae1a:	3334      	adds	r3, #52	; 0x34
 800ae1c:	460a      	mov	r2, r1
 800ae1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	4413      	add	r3, r2
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d006      	beq.n	800ae3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	61fb      	str	r3, [r7, #28]
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	2b0f      	cmp	r3, #15
 800ae36:	d9e9      	bls.n	800ae0c <prvInitialiseNewTask+0x64>
 800ae38:	e000      	b.n	800ae3c <prvInitialiseNewTask+0x94>
			{
				break;
 800ae3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae44:	e003      	b.n	800ae4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae50:	2b37      	cmp	r3, #55	; 0x37
 800ae52:	d901      	bls.n	800ae58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae54:	2337      	movs	r3, #55	; 0x37
 800ae56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	2200      	movs	r2, #0
 800ae68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fe56 	bl	8009b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	3318      	adds	r3, #24
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fe fe51 	bl	8009b20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	2200      	movs	r2, #0
 800ae98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	3354      	adds	r3, #84	; 0x54
 800aea8:	2260      	movs	r2, #96	; 0x60
 800aeaa:	2100      	movs	r1, #0
 800aeac:	4618      	mov	r0, r3
 800aeae:	f001 ffc5 	bl	800ce3c <memset>
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	4a0c      	ldr	r2, [pc, #48]	; (800aee8 <prvInitialiseNewTask+0x140>)
 800aeb6:	659a      	str	r2, [r3, #88]	; 0x58
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	4a0c      	ldr	r2, [pc, #48]	; (800aeec <prvInitialiseNewTask+0x144>)
 800aebc:	65da      	str	r2, [r3, #92]	; 0x5c
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	4a0b      	ldr	r2, [pc, #44]	; (800aef0 <prvInitialiseNewTask+0x148>)
 800aec2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	69b8      	ldr	r0, [r7, #24]
 800aeca:	f001 fa3f 	bl	800c34c <pxPortInitialiseStack>
 800aece:	4602      	mov	r2, r0
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d002      	beq.n	800aee0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aedc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aede:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee0:	bf00      	nop
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	0800eae0 	.word	0x0800eae0
 800aeec:	0800eb00 	.word	0x0800eb00
 800aef0:	0800eac0 	.word	0x0800eac0

0800aef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aefc:	f001 fb52 	bl	800c5a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af00:	4b2d      	ldr	r3, [pc, #180]	; (800afb8 <prvAddNewTaskToReadyList+0xc4>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3301      	adds	r3, #1
 800af06:	4a2c      	ldr	r2, [pc, #176]	; (800afb8 <prvAddNewTaskToReadyList+0xc4>)
 800af08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af0a:	4b2c      	ldr	r3, [pc, #176]	; (800afbc <prvAddNewTaskToReadyList+0xc8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d109      	bne.n	800af26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af12:	4a2a      	ldr	r2, [pc, #168]	; (800afbc <prvAddNewTaskToReadyList+0xc8>)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af18:	4b27      	ldr	r3, [pc, #156]	; (800afb8 <prvAddNewTaskToReadyList+0xc4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d110      	bne.n	800af42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af20:	f000 fc26 	bl	800b770 <prvInitialiseTaskLists>
 800af24:	e00d      	b.n	800af42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af26:	4b26      	ldr	r3, [pc, #152]	; (800afc0 <prvAddNewTaskToReadyList+0xcc>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d109      	bne.n	800af42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af2e:	4b23      	ldr	r3, [pc, #140]	; (800afbc <prvAddNewTaskToReadyList+0xc8>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	429a      	cmp	r2, r3
 800af3a:	d802      	bhi.n	800af42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af3c:	4a1f      	ldr	r2, [pc, #124]	; (800afbc <prvAddNewTaskToReadyList+0xc8>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af42:	4b20      	ldr	r3, [pc, #128]	; (800afc4 <prvAddNewTaskToReadyList+0xd0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3301      	adds	r3, #1
 800af48:	4a1e      	ldr	r2, [pc, #120]	; (800afc4 <prvAddNewTaskToReadyList+0xd0>)
 800af4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af4c:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <prvAddNewTaskToReadyList+0xd0>)
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af58:	4b1b      	ldr	r3, [pc, #108]	; (800afc8 <prvAddNewTaskToReadyList+0xd4>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d903      	bls.n	800af68 <prvAddNewTaskToReadyList+0x74>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	4a18      	ldr	r2, [pc, #96]	; (800afc8 <prvAddNewTaskToReadyList+0xd4>)
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6c:	4613      	mov	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4a15      	ldr	r2, [pc, #84]	; (800afcc <prvAddNewTaskToReadyList+0xd8>)
 800af76:	441a      	add	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3304      	adds	r3, #4
 800af7c:	4619      	mov	r1, r3
 800af7e:	4610      	mov	r0, r2
 800af80:	f7fe fddb 	bl	8009b3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af84:	f001 fb3e 	bl	800c604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af88:	4b0d      	ldr	r3, [pc, #52]	; (800afc0 <prvAddNewTaskToReadyList+0xcc>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00e      	beq.n	800afae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af90:	4b0a      	ldr	r3, [pc, #40]	; (800afbc <prvAddNewTaskToReadyList+0xc8>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d207      	bcs.n	800afae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af9e:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <prvAddNewTaskToReadyList+0xdc>)
 800afa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afae:	bf00      	nop
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20000dcc 	.word	0x20000dcc
 800afbc:	200008f8 	.word	0x200008f8
 800afc0:	20000dd8 	.word	0x20000dd8
 800afc4:	20000de8 	.word	0x20000de8
 800afc8:	20000dd4 	.word	0x20000dd4
 800afcc:	200008fc 	.word	0x200008fc
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afdc:	2300      	movs	r3, #0
 800afde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d017      	beq.n	800b016 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800afe6:	4b13      	ldr	r3, [pc, #76]	; (800b034 <vTaskDelay+0x60>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00a      	beq.n	800b004 <vTaskDelay+0x30>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	60bb      	str	r3, [r7, #8]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b004:	f000 f88a 	bl	800b11c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b008:	2100      	movs	r1, #0
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fdfc 	bl	800bc08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b010:	f000 f892 	bl	800b138 <xTaskResumeAll>
 800b014:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d107      	bne.n	800b02c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b01c:	4b06      	ldr	r3, [pc, #24]	; (800b038 <vTaskDelay+0x64>)
 800b01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b02c:	bf00      	nop
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	20000df4 	.word	0x20000df4
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08a      	sub	sp, #40	; 0x28
 800b040:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b042:	2300      	movs	r3, #0
 800b044:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b04a:	463a      	mov	r2, r7
 800b04c:	1d39      	adds	r1, r7, #4
 800b04e:	f107 0308 	add.w	r3, r7, #8
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe fd10 	bl	8009a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	9202      	str	r2, [sp, #8]
 800b060:	9301      	str	r3, [sp, #4]
 800b062:	2300      	movs	r3, #0
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	2300      	movs	r3, #0
 800b068:	460a      	mov	r2, r1
 800b06a:	4924      	ldr	r1, [pc, #144]	; (800b0fc <vTaskStartScheduler+0xc0>)
 800b06c:	4824      	ldr	r0, [pc, #144]	; (800b100 <vTaskStartScheduler+0xc4>)
 800b06e:	f7ff fdf9 	bl	800ac64 <xTaskCreateStatic>
 800b072:	4603      	mov	r3, r0
 800b074:	4a23      	ldr	r2, [pc, #140]	; (800b104 <vTaskStartScheduler+0xc8>)
 800b076:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b078:	4b22      	ldr	r3, [pc, #136]	; (800b104 <vTaskStartScheduler+0xc8>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b080:	2301      	movs	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	e001      	b.n	800b08a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b086:	2300      	movs	r3, #0
 800b088:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d102      	bne.n	800b096 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b090:	f000 fe0e 	bl	800bcb0 <xTimerCreateTimerTask>
 800b094:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d11b      	bne.n	800b0d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	613b      	str	r3, [r7, #16]
}
 800b0ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0b0:	4b15      	ldr	r3, [pc, #84]	; (800b108 <vTaskStartScheduler+0xcc>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3354      	adds	r3, #84	; 0x54
 800b0b6:	4a15      	ldr	r2, [pc, #84]	; (800b10c <vTaskStartScheduler+0xd0>)
 800b0b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0ba:	4b15      	ldr	r3, [pc, #84]	; (800b110 <vTaskStartScheduler+0xd4>)
 800b0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0c2:	4b14      	ldr	r3, [pc, #80]	; (800b114 <vTaskStartScheduler+0xd8>)
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0c8:	4b13      	ldr	r3, [pc, #76]	; (800b118 <vTaskStartScheduler+0xdc>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0ce:	f001 f9c7 	bl	800c460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0d2:	e00e      	b.n	800b0f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0da:	d10a      	bne.n	800b0f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e0:	f383 8811 	msr	BASEPRI, r3
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	60fb      	str	r3, [r7, #12]
}
 800b0ee:	bf00      	nop
 800b0f0:	e7fe      	b.n	800b0f0 <vTaskStartScheduler+0xb4>
}
 800b0f2:	bf00      	nop
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	0800e580 	.word	0x0800e580
 800b100:	0800b741 	.word	0x0800b741
 800b104:	20000df0 	.word	0x20000df0
 800b108:	200008f8 	.word	0x200008f8
 800b10c:	20000050 	.word	0x20000050
 800b110:	20000dec 	.word	0x20000dec
 800b114:	20000dd8 	.word	0x20000dd8
 800b118:	20000dd0 	.word	0x20000dd0

0800b11c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b120:	4b04      	ldr	r3, [pc, #16]	; (800b134 <vTaskSuspendAll+0x18>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	3301      	adds	r3, #1
 800b126:	4a03      	ldr	r2, [pc, #12]	; (800b134 <vTaskSuspendAll+0x18>)
 800b128:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b12a:	bf00      	nop
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	20000df4 	.word	0x20000df4

0800b138 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b142:	2300      	movs	r3, #0
 800b144:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b146:	4b42      	ldr	r3, [pc, #264]	; (800b250 <xTaskResumeAll+0x118>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10a      	bne.n	800b164 <xTaskResumeAll+0x2c>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	603b      	str	r3, [r7, #0]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b164:	f001 fa1e 	bl	800c5a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b168:	4b39      	ldr	r3, [pc, #228]	; (800b250 <xTaskResumeAll+0x118>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	4a38      	ldr	r2, [pc, #224]	; (800b250 <xTaskResumeAll+0x118>)
 800b170:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b172:	4b37      	ldr	r3, [pc, #220]	; (800b250 <xTaskResumeAll+0x118>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d162      	bne.n	800b240 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b17a:	4b36      	ldr	r3, [pc, #216]	; (800b254 <xTaskResumeAll+0x11c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d05e      	beq.n	800b240 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b182:	e02f      	b.n	800b1e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b184:	4b34      	ldr	r3, [pc, #208]	; (800b258 <xTaskResumeAll+0x120>)
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3318      	adds	r3, #24
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe fd2f 	bl	8009bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3304      	adds	r3, #4
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fd2a 	bl	8009bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a4:	4b2d      	ldr	r3, [pc, #180]	; (800b25c <xTaskResumeAll+0x124>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d903      	bls.n	800b1b4 <xTaskResumeAll+0x7c>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b0:	4a2a      	ldr	r2, [pc, #168]	; (800b25c <xTaskResumeAll+0x124>)
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4a27      	ldr	r2, [pc, #156]	; (800b260 <xTaskResumeAll+0x128>)
 800b1c2:	441a      	add	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	f7fe fcb5 	bl	8009b3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d4:	4b23      	ldr	r3, [pc, #140]	; (800b264 <xTaskResumeAll+0x12c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d302      	bcc.n	800b1e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b1de:	4b22      	ldr	r3, [pc, #136]	; (800b268 <xTaskResumeAll+0x130>)
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1e4:	4b1c      	ldr	r3, [pc, #112]	; (800b258 <xTaskResumeAll+0x120>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1cb      	bne.n	800b184 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1f2:	f000 fb5f 	bl	800b8b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b1f6:	4b1d      	ldr	r3, [pc, #116]	; (800b26c <xTaskResumeAll+0x134>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d010      	beq.n	800b224 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b202:	f000 f847 	bl	800b294 <xTaskIncrementTick>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b20c:	4b16      	ldr	r3, [pc, #88]	; (800b268 <xTaskResumeAll+0x130>)
 800b20e:	2201      	movs	r2, #1
 800b210:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	3b01      	subs	r3, #1
 800b216:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1f1      	bne.n	800b202 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b21e:	4b13      	ldr	r3, [pc, #76]	; (800b26c <xTaskResumeAll+0x134>)
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b224:	4b10      	ldr	r3, [pc, #64]	; (800b268 <xTaskResumeAll+0x130>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d009      	beq.n	800b240 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b22c:	2301      	movs	r3, #1
 800b22e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b230:	4b0f      	ldr	r3, [pc, #60]	; (800b270 <xTaskResumeAll+0x138>)
 800b232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b240:	f001 f9e0 	bl	800c604 <vPortExitCritical>

	return xAlreadyYielded;
 800b244:	68bb      	ldr	r3, [r7, #8]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20000df4 	.word	0x20000df4
 800b254:	20000dcc 	.word	0x20000dcc
 800b258:	20000d8c 	.word	0x20000d8c
 800b25c:	20000dd4 	.word	0x20000dd4
 800b260:	200008fc 	.word	0x200008fc
 800b264:	200008f8 	.word	0x200008f8
 800b268:	20000de0 	.word	0x20000de0
 800b26c:	20000ddc 	.word	0x20000ddc
 800b270:	e000ed04 	.word	0xe000ed04

0800b274 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b27a:	4b05      	ldr	r3, [pc, #20]	; (800b290 <xTaskGetTickCount+0x1c>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b280:	687b      	ldr	r3, [r7, #4]
}
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	20000dd0 	.word	0x20000dd0

0800b294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b29a:	2300      	movs	r3, #0
 800b29c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b29e:	4b4f      	ldr	r3, [pc, #316]	; (800b3dc <xTaskIncrementTick+0x148>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f040 808f 	bne.w	800b3c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2a8:	4b4d      	ldr	r3, [pc, #308]	; (800b3e0 <xTaskIncrementTick+0x14c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2b0:	4a4b      	ldr	r2, [pc, #300]	; (800b3e0 <xTaskIncrementTick+0x14c>)
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d120      	bne.n	800b2fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2bc:	4b49      	ldr	r3, [pc, #292]	; (800b3e4 <xTaskIncrementTick+0x150>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00a      	beq.n	800b2dc <xTaskIncrementTick+0x48>
	__asm volatile
 800b2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	603b      	str	r3, [r7, #0]
}
 800b2d8:	bf00      	nop
 800b2da:	e7fe      	b.n	800b2da <xTaskIncrementTick+0x46>
 800b2dc:	4b41      	ldr	r3, [pc, #260]	; (800b3e4 <xTaskIncrementTick+0x150>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	4b41      	ldr	r3, [pc, #260]	; (800b3e8 <xTaskIncrementTick+0x154>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a3f      	ldr	r2, [pc, #252]	; (800b3e4 <xTaskIncrementTick+0x150>)
 800b2e8:	6013      	str	r3, [r2, #0]
 800b2ea:	4a3f      	ldr	r2, [pc, #252]	; (800b3e8 <xTaskIncrementTick+0x154>)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	4b3e      	ldr	r3, [pc, #248]	; (800b3ec <xTaskIncrementTick+0x158>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	4a3d      	ldr	r2, [pc, #244]	; (800b3ec <xTaskIncrementTick+0x158>)
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	f000 fadb 	bl	800b8b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2fe:	4b3c      	ldr	r3, [pc, #240]	; (800b3f0 <xTaskIncrementTick+0x15c>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	693a      	ldr	r2, [r7, #16]
 800b304:	429a      	cmp	r2, r3
 800b306:	d349      	bcc.n	800b39c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b308:	4b36      	ldr	r3, [pc, #216]	; (800b3e4 <xTaskIncrementTick+0x150>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d104      	bne.n	800b31c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b312:	4b37      	ldr	r3, [pc, #220]	; (800b3f0 <xTaskIncrementTick+0x15c>)
 800b314:	f04f 32ff 	mov.w	r2, #4294967295
 800b318:	601a      	str	r2, [r3, #0]
					break;
 800b31a:	e03f      	b.n	800b39c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b31c:	4b31      	ldr	r3, [pc, #196]	; (800b3e4 <xTaskIncrementTick+0x150>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d203      	bcs.n	800b33c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b334:	4a2e      	ldr	r2, [pc, #184]	; (800b3f0 <xTaskIncrementTick+0x15c>)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b33a:	e02f      	b.n	800b39c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	3304      	adds	r3, #4
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe fc57 	bl	8009bf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d004      	beq.n	800b358 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	3318      	adds	r3, #24
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fc4e 	bl	8009bf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35c:	4b25      	ldr	r3, [pc, #148]	; (800b3f4 <xTaskIncrementTick+0x160>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d903      	bls.n	800b36c <xTaskIncrementTick+0xd8>
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	4a22      	ldr	r2, [pc, #136]	; (800b3f4 <xTaskIncrementTick+0x160>)
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b370:	4613      	mov	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4a1f      	ldr	r2, [pc, #124]	; (800b3f8 <xTaskIncrementTick+0x164>)
 800b37a:	441a      	add	r2, r3
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	3304      	adds	r3, #4
 800b380:	4619      	mov	r1, r3
 800b382:	4610      	mov	r0, r2
 800b384:	f7fe fbd9 	bl	8009b3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38c:	4b1b      	ldr	r3, [pc, #108]	; (800b3fc <xTaskIncrementTick+0x168>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b392:	429a      	cmp	r2, r3
 800b394:	d3b8      	bcc.n	800b308 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b396:	2301      	movs	r3, #1
 800b398:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b39a:	e7b5      	b.n	800b308 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b39c:	4b17      	ldr	r3, [pc, #92]	; (800b3fc <xTaskIncrementTick+0x168>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a2:	4915      	ldr	r1, [pc, #84]	; (800b3f8 <xTaskIncrementTick+0x164>)
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	440b      	add	r3, r1
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d901      	bls.n	800b3b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b3b8:	4b11      	ldr	r3, [pc, #68]	; (800b400 <xTaskIncrementTick+0x16c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d007      	beq.n	800b3d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	e004      	b.n	800b3d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b3c6:	4b0f      	ldr	r3, [pc, #60]	; (800b404 <xTaskIncrementTick+0x170>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	4a0d      	ldr	r2, [pc, #52]	; (800b404 <xTaskIncrementTick+0x170>)
 800b3ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b3d0:	697b      	ldr	r3, [r7, #20]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20000df4 	.word	0x20000df4
 800b3e0:	20000dd0 	.word	0x20000dd0
 800b3e4:	20000d84 	.word	0x20000d84
 800b3e8:	20000d88 	.word	0x20000d88
 800b3ec:	20000de4 	.word	0x20000de4
 800b3f0:	20000dec 	.word	0x20000dec
 800b3f4:	20000dd4 	.word	0x20000dd4
 800b3f8:	200008fc 	.word	0x200008fc
 800b3fc:	200008f8 	.word	0x200008f8
 800b400:	20000de0 	.word	0x20000de0
 800b404:	20000ddc 	.word	0x20000ddc

0800b408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b40e:	4b2a      	ldr	r3, [pc, #168]	; (800b4b8 <vTaskSwitchContext+0xb0>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d003      	beq.n	800b41e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b416:	4b29      	ldr	r3, [pc, #164]	; (800b4bc <vTaskSwitchContext+0xb4>)
 800b418:	2201      	movs	r2, #1
 800b41a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b41c:	e046      	b.n	800b4ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b41e:	4b27      	ldr	r3, [pc, #156]	; (800b4bc <vTaskSwitchContext+0xb4>)
 800b420:	2200      	movs	r2, #0
 800b422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b424:	4b26      	ldr	r3, [pc, #152]	; (800b4c0 <vTaskSwitchContext+0xb8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	60fb      	str	r3, [r7, #12]
 800b42a:	e010      	b.n	800b44e <vTaskSwitchContext+0x46>
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10a      	bne.n	800b448 <vTaskSwitchContext+0x40>
	__asm volatile
 800b432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b436:	f383 8811 	msr	BASEPRI, r3
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	607b      	str	r3, [r7, #4]
}
 800b444:	bf00      	nop
 800b446:	e7fe      	b.n	800b446 <vTaskSwitchContext+0x3e>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	491d      	ldr	r1, [pc, #116]	; (800b4c4 <vTaskSwitchContext+0xbc>)
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	4613      	mov	r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	440b      	add	r3, r1
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d0e4      	beq.n	800b42c <vTaskSwitchContext+0x24>
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4a15      	ldr	r2, [pc, #84]	; (800b4c4 <vTaskSwitchContext+0xbc>)
 800b46e:	4413      	add	r3, r2
 800b470:	60bb      	str	r3, [r7, #8]
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	605a      	str	r2, [r3, #4]
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	3308      	adds	r3, #8
 800b484:	429a      	cmp	r2, r3
 800b486:	d104      	bne.n	800b492 <vTaskSwitchContext+0x8a>
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	605a      	str	r2, [r3, #4]
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	4a0b      	ldr	r2, [pc, #44]	; (800b4c8 <vTaskSwitchContext+0xc0>)
 800b49a:	6013      	str	r3, [r2, #0]
 800b49c:	4a08      	ldr	r2, [pc, #32]	; (800b4c0 <vTaskSwitchContext+0xb8>)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4a2:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <vTaskSwitchContext+0xc0>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3354      	adds	r3, #84	; 0x54
 800b4a8:	4a08      	ldr	r2, [pc, #32]	; (800b4cc <vTaskSwitchContext+0xc4>)
 800b4aa:	6013      	str	r3, [r2, #0]
}
 800b4ac:	bf00      	nop
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	20000df4 	.word	0x20000df4
 800b4bc:	20000de0 	.word	0x20000de0
 800b4c0:	20000dd4 	.word	0x20000dd4
 800b4c4:	200008fc 	.word	0x200008fc
 800b4c8:	200008f8 	.word	0x200008f8
 800b4cc:	20000050 	.word	0x20000050

0800b4d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	60fb      	str	r3, [r7, #12]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4f6:	4b07      	ldr	r3, [pc, #28]	; (800b514 <vTaskPlaceOnEventList+0x44>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3318      	adds	r3, #24
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7fe fb3f 	bl	8009b82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b504:	2101      	movs	r1, #1
 800b506:	6838      	ldr	r0, [r7, #0]
 800b508:	f000 fb7e 	bl	800bc08 <prvAddCurrentTaskToDelayedList>
}
 800b50c:	bf00      	nop
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	200008f8 	.word	0x200008f8

0800b518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10a      	bne.n	800b540 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	617b      	str	r3, [r7, #20]
}
 800b53c:	bf00      	nop
 800b53e:	e7fe      	b.n	800b53e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b540:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <vTaskPlaceOnEventListRestricted+0x54>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3318      	adds	r3, #24
 800b546:	4619      	mov	r1, r3
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f7fe faf6 	bl	8009b3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b554:	f04f 33ff 	mov.w	r3, #4294967295
 800b558:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b55a:	6879      	ldr	r1, [r7, #4]
 800b55c:	68b8      	ldr	r0, [r7, #8]
 800b55e:	f000 fb53 	bl	800bc08 <prvAddCurrentTaskToDelayedList>
	}
 800b562:	bf00      	nop
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200008f8 	.word	0x200008f8

0800b570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10a      	bne.n	800b59c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	60fb      	str	r3, [r7, #12]
}
 800b598:	bf00      	nop
 800b59a:	e7fe      	b.n	800b59a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	3318      	adds	r3, #24
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe fb27 	bl	8009bf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5a6:	4b1e      	ldr	r3, [pc, #120]	; (800b620 <xTaskRemoveFromEventList+0xb0>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d11d      	bne.n	800b5ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe fb1e 	bl	8009bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5bc:	4b19      	ldr	r3, [pc, #100]	; (800b624 <xTaskRemoveFromEventList+0xb4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d903      	bls.n	800b5cc <xTaskRemoveFromEventList+0x5c>
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c8:	4a16      	ldr	r2, [pc, #88]	; (800b624 <xTaskRemoveFromEventList+0xb4>)
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4a13      	ldr	r2, [pc, #76]	; (800b628 <xTaskRemoveFromEventList+0xb8>)
 800b5da:	441a      	add	r2, r3
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f7fe faa9 	bl	8009b3a <vListInsertEnd>
 800b5e8:	e005      	b.n	800b5f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	3318      	adds	r3, #24
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	480e      	ldr	r0, [pc, #56]	; (800b62c <xTaskRemoveFromEventList+0xbc>)
 800b5f2:	f7fe faa2 	bl	8009b3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fa:	4b0d      	ldr	r3, [pc, #52]	; (800b630 <xTaskRemoveFromEventList+0xc0>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	429a      	cmp	r2, r3
 800b602:	d905      	bls.n	800b610 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b608:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <xTaskRemoveFromEventList+0xc4>)
 800b60a:	2201      	movs	r2, #1
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	e001      	b.n	800b614 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b610:	2300      	movs	r3, #0
 800b612:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b614:	697b      	ldr	r3, [r7, #20]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20000df4 	.word	0x20000df4
 800b624:	20000dd4 	.word	0x20000dd4
 800b628:	200008fc 	.word	0x200008fc
 800b62c:	20000d8c 	.word	0x20000d8c
 800b630:	200008f8 	.word	0x200008f8
 800b634:	20000de0 	.word	0x20000de0

0800b638 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b640:	4b06      	ldr	r3, [pc, #24]	; (800b65c <vTaskInternalSetTimeOutState+0x24>)
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <vTaskInternalSetTimeOutState+0x28>)
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	605a      	str	r2, [r3, #4]
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	20000de4 	.word	0x20000de4
 800b660:	20000dd0 	.word	0x20000dd0

0800b664 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b088      	sub	sp, #32
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10a      	bne.n	800b68a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	613b      	str	r3, [r7, #16]
}
 800b686:	bf00      	nop
 800b688:	e7fe      	b.n	800b688 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10a      	bne.n	800b6a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	60fb      	str	r3, [r7, #12]
}
 800b6a2:	bf00      	nop
 800b6a4:	e7fe      	b.n	800b6a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b6a6:	f000 ff7d 	bl	800c5a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6aa:	4b1d      	ldr	r3, [pc, #116]	; (800b720 <xTaskCheckForTimeOut+0xbc>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	69ba      	ldr	r2, [r7, #24]
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c2:	d102      	bne.n	800b6ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	61fb      	str	r3, [r7, #28]
 800b6c8:	e023      	b.n	800b712 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	4b15      	ldr	r3, [pc, #84]	; (800b724 <xTaskCheckForTimeOut+0xc0>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d007      	beq.n	800b6e6 <xTaskCheckForTimeOut+0x82>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d302      	bcc.n	800b6e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	61fb      	str	r3, [r7, #28]
 800b6e4:	e015      	b.n	800b712 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d20b      	bcs.n	800b708 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	1ad2      	subs	r2, r2, r3
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff ff9b 	bl	800b638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b702:	2300      	movs	r3, #0
 800b704:	61fb      	str	r3, [r7, #28]
 800b706:	e004      	b.n	800b712 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b70e:	2301      	movs	r3, #1
 800b710:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b712:	f000 ff77 	bl	800c604 <vPortExitCritical>

	return xReturn;
 800b716:	69fb      	ldr	r3, [r7, #28]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3720      	adds	r7, #32
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20000dd0 	.word	0x20000dd0
 800b724:	20000de4 	.word	0x20000de4

0800b728 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b728:	b480      	push	{r7}
 800b72a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b72c:	4b03      	ldr	r3, [pc, #12]	; (800b73c <vTaskMissedYield+0x14>)
 800b72e:	2201      	movs	r2, #1
 800b730:	601a      	str	r2, [r3, #0]
}
 800b732:	bf00      	nop
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	20000de0 	.word	0x20000de0

0800b740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b748:	f000 f852 	bl	800b7f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b74c:	4b06      	ldr	r3, [pc, #24]	; (800b768 <prvIdleTask+0x28>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d9f9      	bls.n	800b748 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <prvIdleTask+0x2c>)
 800b756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b764:	e7f0      	b.n	800b748 <prvIdleTask+0x8>
 800b766:	bf00      	nop
 800b768:	200008fc 	.word	0x200008fc
 800b76c:	e000ed04 	.word	0xe000ed04

0800b770 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b776:	2300      	movs	r3, #0
 800b778:	607b      	str	r3, [r7, #4]
 800b77a:	e00c      	b.n	800b796 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	4613      	mov	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4a12      	ldr	r2, [pc, #72]	; (800b7d0 <prvInitialiseTaskLists+0x60>)
 800b788:	4413      	add	r3, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fe f9a8 	bl	8009ae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	3301      	adds	r3, #1
 800b794:	607b      	str	r3, [r7, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b37      	cmp	r3, #55	; 0x37
 800b79a:	d9ef      	bls.n	800b77c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b79c:	480d      	ldr	r0, [pc, #52]	; (800b7d4 <prvInitialiseTaskLists+0x64>)
 800b79e:	f7fe f99f 	bl	8009ae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7a2:	480d      	ldr	r0, [pc, #52]	; (800b7d8 <prvInitialiseTaskLists+0x68>)
 800b7a4:	f7fe f99c 	bl	8009ae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7a8:	480c      	ldr	r0, [pc, #48]	; (800b7dc <prvInitialiseTaskLists+0x6c>)
 800b7aa:	f7fe f999 	bl	8009ae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7ae:	480c      	ldr	r0, [pc, #48]	; (800b7e0 <prvInitialiseTaskLists+0x70>)
 800b7b0:	f7fe f996 	bl	8009ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7b4:	480b      	ldr	r0, [pc, #44]	; (800b7e4 <prvInitialiseTaskLists+0x74>)
 800b7b6:	f7fe f993 	bl	8009ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7ba:	4b0b      	ldr	r3, [pc, #44]	; (800b7e8 <prvInitialiseTaskLists+0x78>)
 800b7bc:	4a05      	ldr	r2, [pc, #20]	; (800b7d4 <prvInitialiseTaskLists+0x64>)
 800b7be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <prvInitialiseTaskLists+0x7c>)
 800b7c2:	4a05      	ldr	r2, [pc, #20]	; (800b7d8 <prvInitialiseTaskLists+0x68>)
 800b7c4:	601a      	str	r2, [r3, #0]
}
 800b7c6:	bf00      	nop
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	200008fc 	.word	0x200008fc
 800b7d4:	20000d5c 	.word	0x20000d5c
 800b7d8:	20000d70 	.word	0x20000d70
 800b7dc:	20000d8c 	.word	0x20000d8c
 800b7e0:	20000da0 	.word	0x20000da0
 800b7e4:	20000db8 	.word	0x20000db8
 800b7e8:	20000d84 	.word	0x20000d84
 800b7ec:	20000d88 	.word	0x20000d88

0800b7f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7f6:	e019      	b.n	800b82c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7f8:	f000 fed4 	bl	800c5a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7fc:	4b10      	ldr	r3, [pc, #64]	; (800b840 <prvCheckTasksWaitingTermination+0x50>)
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	3304      	adds	r3, #4
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe f9f3 	bl	8009bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b80e:	4b0d      	ldr	r3, [pc, #52]	; (800b844 <prvCheckTasksWaitingTermination+0x54>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3b01      	subs	r3, #1
 800b814:	4a0b      	ldr	r2, [pc, #44]	; (800b844 <prvCheckTasksWaitingTermination+0x54>)
 800b816:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b818:	4b0b      	ldr	r3, [pc, #44]	; (800b848 <prvCheckTasksWaitingTermination+0x58>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	4a0a      	ldr	r2, [pc, #40]	; (800b848 <prvCheckTasksWaitingTermination+0x58>)
 800b820:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b822:	f000 feef 	bl	800c604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f810 	bl	800b84c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b82c:	4b06      	ldr	r3, [pc, #24]	; (800b848 <prvCheckTasksWaitingTermination+0x58>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1e1      	bne.n	800b7f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20000da0 	.word	0x20000da0
 800b844:	20000dcc 	.word	0x20000dcc
 800b848:	20000db4 	.word	0x20000db4

0800b84c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3354      	adds	r3, #84	; 0x54
 800b858:	4618      	mov	r0, r3
 800b85a:	f001 fbed 	bl	800d038 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b864:	2b00      	cmp	r3, #0
 800b866:	d108      	bne.n	800b87a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b86c:	4618      	mov	r0, r3
 800b86e:	f001 f887 	bl	800c980 <vPortFree>
				vPortFree( pxTCB );
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f001 f884 	bl	800c980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b878:	e018      	b.n	800b8ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b880:	2b01      	cmp	r3, #1
 800b882:	d103      	bne.n	800b88c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f001 f87b 	bl	800c980 <vPortFree>
	}
 800b88a:	e00f      	b.n	800b8ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b892:	2b02      	cmp	r3, #2
 800b894:	d00a      	beq.n	800b8ac <prvDeleteTCB+0x60>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	60fb      	str	r3, [r7, #12]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <prvDeleteTCB+0x5e>
	}
 800b8ac:	bf00      	nop
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ba:	4b0c      	ldr	r3, [pc, #48]	; (800b8ec <prvResetNextTaskUnblockTime+0x38>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d104      	bne.n	800b8ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8c4:	4b0a      	ldr	r3, [pc, #40]	; (800b8f0 <prvResetNextTaskUnblockTime+0x3c>)
 800b8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8cc:	e008      	b.n	800b8e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ce:	4b07      	ldr	r3, [pc, #28]	; (800b8ec <prvResetNextTaskUnblockTime+0x38>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	4a04      	ldr	r2, [pc, #16]	; (800b8f0 <prvResetNextTaskUnblockTime+0x3c>)
 800b8de:	6013      	str	r3, [r2, #0]
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	20000d84 	.word	0x20000d84
 800b8f0:	20000dec 	.word	0x20000dec

0800b8f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8fa:	4b0b      	ldr	r3, [pc, #44]	; (800b928 <xTaskGetSchedulerState+0x34>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d102      	bne.n	800b908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b902:	2301      	movs	r3, #1
 800b904:	607b      	str	r3, [r7, #4]
 800b906:	e008      	b.n	800b91a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b908:	4b08      	ldr	r3, [pc, #32]	; (800b92c <xTaskGetSchedulerState+0x38>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b910:	2302      	movs	r3, #2
 800b912:	607b      	str	r3, [r7, #4]
 800b914:	e001      	b.n	800b91a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b916:	2300      	movs	r3, #0
 800b918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b91a:	687b      	ldr	r3, [r7, #4]
	}
 800b91c:	4618      	mov	r0, r3
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	20000dd8 	.word	0x20000dd8
 800b92c:	20000df4 	.word	0x20000df4

0800b930 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b93c:	2300      	movs	r3, #0
 800b93e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d051      	beq.n	800b9ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94a:	4b2a      	ldr	r3, [pc, #168]	; (800b9f4 <xTaskPriorityInherit+0xc4>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	429a      	cmp	r2, r3
 800b952:	d241      	bcs.n	800b9d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	db06      	blt.n	800b96a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b95c:	4b25      	ldr	r3, [pc, #148]	; (800b9f4 <xTaskPriorityInherit+0xc4>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b962:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	6959      	ldr	r1, [r3, #20]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b972:	4613      	mov	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4a1f      	ldr	r2, [pc, #124]	; (800b9f8 <xTaskPriorityInherit+0xc8>)
 800b97c:	4413      	add	r3, r2
 800b97e:	4299      	cmp	r1, r3
 800b980:	d122      	bne.n	800b9c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	3304      	adds	r3, #4
 800b986:	4618      	mov	r0, r3
 800b988:	f7fe f934 	bl	8009bf4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b98c:	4b19      	ldr	r3, [pc, #100]	; (800b9f4 <xTaskPriorityInherit+0xc4>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99a:	4b18      	ldr	r3, [pc, #96]	; (800b9fc <xTaskPriorityInherit+0xcc>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d903      	bls.n	800b9aa <xTaskPriorityInherit+0x7a>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a6:	4a15      	ldr	r2, [pc, #84]	; (800b9fc <xTaskPriorityInherit+0xcc>)
 800b9a8:	6013      	str	r3, [r2, #0]
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4a10      	ldr	r2, [pc, #64]	; (800b9f8 <xTaskPriorityInherit+0xc8>)
 800b9b8:	441a      	add	r2, r3
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	3304      	adds	r3, #4
 800b9be:	4619      	mov	r1, r3
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	f7fe f8ba 	bl	8009b3a <vListInsertEnd>
 800b9c6:	e004      	b.n	800b9d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9c8:	4b0a      	ldr	r3, [pc, #40]	; (800b9f4 <xTaskPriorityInherit+0xc4>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	60fb      	str	r3, [r7, #12]
 800b9d6:	e008      	b.n	800b9ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <xTaskPriorityInherit+0xc4>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d201      	bcs.n	800b9ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
	}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	200008f8 	.word	0x200008f8
 800b9f8:	200008fc 	.word	0x200008fc
 800b9fc:	20000dd4 	.word	0x20000dd4

0800ba00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d056      	beq.n	800bac4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba16:	4b2e      	ldr	r3, [pc, #184]	; (800bad0 <xTaskPriorityDisinherit+0xd0>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d00a      	beq.n	800ba36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	60fb      	str	r3, [r7, #12]
}
 800ba32:	bf00      	nop
 800ba34:	e7fe      	b.n	800ba34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10a      	bne.n	800ba54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	60bb      	str	r3, [r7, #8]
}
 800ba50:	bf00      	nop
 800ba52:	e7fe      	b.n	800ba52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba58:	1e5a      	subs	r2, r3, #1
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d02c      	beq.n	800bac4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d128      	bne.n	800bac4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	3304      	adds	r3, #4
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fe f8bc 	bl	8009bf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba94:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <xTaskPriorityDisinherit+0xd4>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d903      	bls.n	800baa4 <xTaskPriorityDisinherit+0xa4>
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa0:	4a0c      	ldr	r2, [pc, #48]	; (800bad4 <xTaskPriorityDisinherit+0xd4>)
 800baa2:	6013      	str	r3, [r2, #0]
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa8:	4613      	mov	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4413      	add	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4a09      	ldr	r2, [pc, #36]	; (800bad8 <xTaskPriorityDisinherit+0xd8>)
 800bab2:	441a      	add	r2, r3
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	3304      	adds	r3, #4
 800bab8:	4619      	mov	r1, r3
 800baba:	4610      	mov	r0, r2
 800babc:	f7fe f83d 	bl	8009b3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bac0:	2301      	movs	r3, #1
 800bac2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bac4:	697b      	ldr	r3, [r7, #20]
	}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	200008f8 	.word	0x200008f8
 800bad4:	20000dd4 	.word	0x20000dd4
 800bad8:	200008fc 	.word	0x200008fc

0800badc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800baea:	2301      	movs	r3, #1
 800baec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d06a      	beq.n	800bbca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	60fb      	str	r3, [r7, #12]
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d902      	bls.n	800bb22 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	e002      	b.n	800bb28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb26:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	69fa      	ldr	r2, [r7, #28]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d04b      	beq.n	800bbca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d146      	bne.n	800bbca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb3c:	4b25      	ldr	r3, [pc, #148]	; (800bbd4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	69ba      	ldr	r2, [r7, #24]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d10a      	bne.n	800bb5c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	60bb      	str	r3, [r7, #8]
}
 800bb58:	bf00      	nop
 800bb5a:	e7fe      	b.n	800bb5a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	69fa      	ldr	r2, [r7, #28]
 800bb66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	db04      	blt.n	800bb7a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	6959      	ldr	r1, [r3, #20]
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	4613      	mov	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4413      	add	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4a13      	ldr	r2, [pc, #76]	; (800bbd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb8a:	4413      	add	r3, r2
 800bb8c:	4299      	cmp	r1, r3
 800bb8e:	d11c      	bne.n	800bbca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	3304      	adds	r3, #4
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe f82d 	bl	8009bf4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9e:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d903      	bls.n	800bbae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbaa:	4a0c      	ldr	r2, [pc, #48]	; (800bbdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bbac:	6013      	str	r3, [r2, #0]
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4a07      	ldr	r2, [pc, #28]	; (800bbd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bbbc:	441a      	add	r2, r3
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7fd ffb8 	bl	8009b3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbca:	bf00      	nop
 800bbcc:	3720      	adds	r7, #32
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	200008f8 	.word	0x200008f8
 800bbd8:	200008fc 	.word	0x200008fc
 800bbdc:	20000dd4 	.word	0x20000dd4

0800bbe0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bbe0:	b480      	push	{r7}
 800bbe2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bbe4:	4b07      	ldr	r3, [pc, #28]	; (800bc04 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d004      	beq.n	800bbf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bbec:	4b05      	ldr	r3, [pc, #20]	; (800bc04 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbf2:	3201      	adds	r2, #1
 800bbf4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bbf6:	4b03      	ldr	r3, [pc, #12]	; (800bc04 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
	}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	200008f8 	.word	0x200008f8

0800bc08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc12:	4b21      	ldr	r3, [pc, #132]	; (800bc98 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc18:	4b20      	ldr	r3, [pc, #128]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fd ffe8 	bl	8009bf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2a:	d10a      	bne.n	800bc42 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d007      	beq.n	800bc42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc32:	4b1a      	ldr	r3, [pc, #104]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	3304      	adds	r3, #4
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4819      	ldr	r0, [pc, #100]	; (800bca0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc3c:	f7fd ff7d 	bl	8009b3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc40:	e026      	b.n	800bc90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4413      	add	r3, r2
 800bc48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc4a:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d209      	bcs.n	800bc6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc5a:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3304      	adds	r3, #4
 800bc64:	4619      	mov	r1, r3
 800bc66:	4610      	mov	r0, r2
 800bc68:	f7fd ff8b 	bl	8009b82 <vListInsert>
}
 800bc6c:	e010      	b.n	800bc90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3304      	adds	r3, #4
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	f7fd ff81 	bl	8009b82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc80:	4b0a      	ldr	r3, [pc, #40]	; (800bcac <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d202      	bcs.n	800bc90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc8a:	4a08      	ldr	r2, [pc, #32]	; (800bcac <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	6013      	str	r3, [r2, #0]
}
 800bc90:	bf00      	nop
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	20000dd0 	.word	0x20000dd0
 800bc9c:	200008f8 	.word	0x200008f8
 800bca0:	20000db8 	.word	0x20000db8
 800bca4:	20000d88 	.word	0x20000d88
 800bca8:	20000d84 	.word	0x20000d84
 800bcac:	20000dec 	.word	0x20000dec

0800bcb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08a      	sub	sp, #40	; 0x28
 800bcb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcba:	f000 fb07 	bl	800c2cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcbe:	4b1c      	ldr	r3, [pc, #112]	; (800bd30 <xTimerCreateTimerTask+0x80>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d021      	beq.n	800bd0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcce:	1d3a      	adds	r2, r7, #4
 800bcd0:	f107 0108 	add.w	r1, r7, #8
 800bcd4:	f107 030c 	add.w	r3, r7, #12
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fd fee7 	bl	8009aac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bcde:	6879      	ldr	r1, [r7, #4]
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	9202      	str	r2, [sp, #8]
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	2302      	movs	r3, #2
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	2300      	movs	r3, #0
 800bcee:	460a      	mov	r2, r1
 800bcf0:	4910      	ldr	r1, [pc, #64]	; (800bd34 <xTimerCreateTimerTask+0x84>)
 800bcf2:	4811      	ldr	r0, [pc, #68]	; (800bd38 <xTimerCreateTimerTask+0x88>)
 800bcf4:	f7fe ffb6 	bl	800ac64 <xTaskCreateStatic>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	4a10      	ldr	r2, [pc, #64]	; (800bd3c <xTimerCreateTimerTask+0x8c>)
 800bcfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcfe:	4b0f      	ldr	r3, [pc, #60]	; (800bd3c <xTimerCreateTimerTask+0x8c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd06:	2301      	movs	r3, #1
 800bd08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10a      	bne.n	800bd26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	613b      	str	r3, [r7, #16]
}
 800bd22:	bf00      	nop
 800bd24:	e7fe      	b.n	800bd24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd26:	697b      	ldr	r3, [r7, #20]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20000e28 	.word	0x20000e28
 800bd34:	0800e588 	.word	0x0800e588
 800bd38:	0800be75 	.word	0x0800be75
 800bd3c:	20000e2c 	.word	0x20000e2c

0800bd40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08a      	sub	sp, #40	; 0x28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10a      	bne.n	800bd6e <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	623b      	str	r3, [r7, #32]
}
 800bd6a:	bf00      	nop
 800bd6c:	e7fe      	b.n	800bd6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd6e:	4b1a      	ldr	r3, [pc, #104]	; (800bdd8 <xTimerGenericCommand+0x98>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d02a      	beq.n	800bdcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	2b05      	cmp	r3, #5
 800bd86:	dc18      	bgt.n	800bdba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd88:	f7ff fdb4 	bl	800b8f4 <xTaskGetSchedulerState>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d109      	bne.n	800bda6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd92:	4b11      	ldr	r3, [pc, #68]	; (800bdd8 <xTimerGenericCommand+0x98>)
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	f107 0110 	add.w	r1, r7, #16
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd9e:	f7fe f8fb 	bl	8009f98 <xQueueGenericSend>
 800bda2:	6278      	str	r0, [r7, #36]	; 0x24
 800bda4:	e012      	b.n	800bdcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bda6:	4b0c      	ldr	r3, [pc, #48]	; (800bdd8 <xTimerGenericCommand+0x98>)
 800bda8:	6818      	ldr	r0, [r3, #0]
 800bdaa:	f107 0110 	add.w	r1, r7, #16
 800bdae:	2300      	movs	r3, #0
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f7fe f8f1 	bl	8009f98 <xQueueGenericSend>
 800bdb6:	6278      	str	r0, [r7, #36]	; 0x24
 800bdb8:	e008      	b.n	800bdcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdba:	4b07      	ldr	r3, [pc, #28]	; (800bdd8 <xTimerGenericCommand+0x98>)
 800bdbc:	6818      	ldr	r0, [r3, #0]
 800bdbe:	f107 0110 	add.w	r1, r7, #16
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	f7fe f9e5 	bl	800a194 <xQueueGenericSendFromISR>
 800bdca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3728      	adds	r7, #40	; 0x28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20000e28 	.word	0x20000e28

0800bddc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b088      	sub	sp, #32
 800bde0:	af02      	add	r7, sp, #8
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde6:	4b22      	ldr	r3, [pc, #136]	; (800be70 <prvProcessExpiredTimer+0x94>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fd fefd 	bl	8009bf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be00:	f003 0304 	and.w	r3, r3, #4
 800be04:	2b00      	cmp	r3, #0
 800be06:	d022      	beq.n	800be4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	699a      	ldr	r2, [r3, #24]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	18d1      	adds	r1, r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	6978      	ldr	r0, [r7, #20]
 800be16:	f000 f8d1 	bl	800bfbc <prvInsertTimerInActiveList>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01f      	beq.n	800be60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be20:	2300      	movs	r3, #0
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	2300      	movs	r3, #0
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	2100      	movs	r1, #0
 800be2a:	6978      	ldr	r0, [r7, #20]
 800be2c:	f7ff ff88 	bl	800bd40 <xTimerGenericCommand>
 800be30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d113      	bne.n	800be60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	60fb      	str	r3, [r7, #12]
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be54:	f023 0301 	bic.w	r3, r3, #1
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	6978      	ldr	r0, [r7, #20]
 800be66:	4798      	blx	r3
}
 800be68:	bf00      	nop
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	20000e20 	.word	0x20000e20

0800be74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be7c:	f107 0308 	add.w	r3, r7, #8
 800be80:	4618      	mov	r0, r3
 800be82:	f000 f857 	bl	800bf34 <prvGetNextExpireTime>
 800be86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4619      	mov	r1, r3
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 f803 	bl	800be98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be92:	f000 f8d5 	bl	800c040 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be96:	e7f1      	b.n	800be7c <prvTimerTask+0x8>

0800be98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bea2:	f7ff f93b 	bl	800b11c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bea6:	f107 0308 	add.w	r3, r7, #8
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 f866 	bl	800bf7c <prvSampleTimeNow>
 800beb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d130      	bne.n	800bf1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10a      	bne.n	800bed4 <prvProcessTimerOrBlockTask+0x3c>
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d806      	bhi.n	800bed4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bec6:	f7ff f937 	bl	800b138 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800beca:	68f9      	ldr	r1, [r7, #12]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ff85 	bl	800bddc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bed2:	e024      	b.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d008      	beq.n	800beec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <prvProcessTimerOrBlockTask+0x90>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <prvProcessTimerOrBlockTask+0x50>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <prvProcessTimerOrBlockTask+0x52>
 800bee8:	2300      	movs	r3, #0
 800beea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800beec:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <prvProcessTimerOrBlockTask+0x94>)
 800beee:	6818      	ldr	r0, [r3, #0]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4619      	mov	r1, r3
 800befa:	f7fe fe7f 	bl	800abfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800befe:	f7ff f91b 	bl	800b138 <xTaskResumeAll>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf08:	4b09      	ldr	r3, [pc, #36]	; (800bf30 <prvProcessTimerOrBlockTask+0x98>)
 800bf0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	f3bf 8f6f 	isb	sy
}
 800bf18:	e001      	b.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf1a:	f7ff f90d 	bl	800b138 <xTaskResumeAll>
}
 800bf1e:	bf00      	nop
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20000e24 	.word	0x20000e24
 800bf2c:	20000e28 	.word	0x20000e28
 800bf30:	e000ed04 	.word	0xe000ed04

0800bf34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf3c:	4b0e      	ldr	r3, [pc, #56]	; (800bf78 <prvGetNextExpireTime+0x44>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <prvGetNextExpireTime+0x16>
 800bf46:	2201      	movs	r2, #1
 800bf48:	e000      	b.n	800bf4c <prvGetNextExpireTime+0x18>
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d105      	bne.n	800bf64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf58:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <prvGetNextExpireTime+0x44>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	e001      	b.n	800bf68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf68:	68fb      	ldr	r3, [r7, #12]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	20000e20 	.word	0x20000e20

0800bf7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf84:	f7ff f976 	bl	800b274 <xTaskGetTickCount>
 800bf88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf8a:	4b0b      	ldr	r3, [pc, #44]	; (800bfb8 <prvSampleTimeNow+0x3c>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d205      	bcs.n	800bfa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf94:	f000 f936 	bl	800c204 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	601a      	str	r2, [r3, #0]
 800bf9e:	e002      	b.n	800bfa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfa6:	4a04      	ldr	r2, [pc, #16]	; (800bfb8 <prvSampleTimeNow+0x3c>)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfac:	68fb      	ldr	r3, [r7, #12]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20000e30 	.word	0x20000e30

0800bfbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d812      	bhi.n	800c008 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	1ad2      	subs	r2, r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d302      	bcc.n	800bff6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bff0:	2301      	movs	r3, #1
 800bff2:	617b      	str	r3, [r7, #20]
 800bff4:	e01b      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bff6:	4b10      	ldr	r3, [pc, #64]	; (800c038 <prvInsertTimerInActiveList+0x7c>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4619      	mov	r1, r3
 800c000:	4610      	mov	r0, r2
 800c002:	f7fd fdbe 	bl	8009b82 <vListInsert>
 800c006:	e012      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d206      	bcs.n	800c01e <prvInsertTimerInActiveList+0x62>
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d302      	bcc.n	800c01e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c018:	2301      	movs	r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	e007      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c01e:	4b07      	ldr	r3, [pc, #28]	; (800c03c <prvInsertTimerInActiveList+0x80>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3304      	adds	r3, #4
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f7fd fdaa 	bl	8009b82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c02e:	697b      	ldr	r3, [r7, #20]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20000e24 	.word	0x20000e24
 800c03c:	20000e20 	.word	0x20000e20

0800c040 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b08e      	sub	sp, #56	; 0x38
 800c044:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c046:	e0ca      	b.n	800c1de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	da18      	bge.n	800c080 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c04e:	1d3b      	adds	r3, r7, #4
 800c050:	3304      	adds	r3, #4
 800c052:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	61fb      	str	r3, [r7, #28]
}
 800c06c:	bf00      	nop
 800c06e:	e7fe      	b.n	800c06e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c076:	6850      	ldr	r0, [r2, #4]
 800c078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c07a:	6892      	ldr	r2, [r2, #8]
 800c07c:	4611      	mov	r1, r2
 800c07e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f2c0 80aa 	blt.w	800c1dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	3304      	adds	r3, #4
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fd fdab 	bl	8009bf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c09e:	463b      	mov	r3, r7
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff ff6b 	bl	800bf7c <prvSampleTimeNow>
 800c0a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b09      	cmp	r3, #9
 800c0ac:	f200 8097 	bhi.w	800c1de <prvProcessReceivedCommands+0x19e>
 800c0b0:	a201      	add	r2, pc, #4	; (adr r2, 800c0b8 <prvProcessReceivedCommands+0x78>)
 800c0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b6:	bf00      	nop
 800c0b8:	0800c0e1 	.word	0x0800c0e1
 800c0bc:	0800c0e1 	.word	0x0800c0e1
 800c0c0:	0800c0e1 	.word	0x0800c0e1
 800c0c4:	0800c155 	.word	0x0800c155
 800c0c8:	0800c169 	.word	0x0800c169
 800c0cc:	0800c1b3 	.word	0x0800c1b3
 800c0d0:	0800c0e1 	.word	0x0800c0e1
 800c0d4:	0800c0e1 	.word	0x0800c0e1
 800c0d8:	0800c155 	.word	0x0800c155
 800c0dc:	0800c169 	.word	0x0800c169
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	18d1      	adds	r1, r2, r3
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c100:	f7ff ff5c 	bl	800bfbc <prvInsertTimerInActiveList>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d069      	beq.n	800c1de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c110:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c118:	f003 0304 	and.w	r3, r3, #4
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d05e      	beq.n	800c1de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	441a      	add	r2, r3
 800c128:	2300      	movs	r3, #0
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	2300      	movs	r3, #0
 800c12e:	2100      	movs	r1, #0
 800c130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c132:	f7ff fe05 	bl	800bd40 <xTimerGenericCommand>
 800c136:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d14f      	bne.n	800c1de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	61bb      	str	r3, [r7, #24]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c15a:	f023 0301 	bic.w	r3, r3, #1
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c166:	e03a      	b.n	800c1de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c16e:	f043 0301 	orr.w	r3, r3, #1
 800c172:	b2da      	uxtb	r2, r3
 800c174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	617b      	str	r3, [r7, #20]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	699a      	ldr	r2, [r3, #24]
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	18d1      	adds	r1, r2, r3
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ac:	f7ff ff06 	bl	800bfbc <prvInsertTimerInActiveList>
					break;
 800c1b0:	e015      	b.n	800c1de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1b8:	f003 0302 	and.w	r3, r3, #2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d103      	bne.n	800c1c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c2:	f000 fbdd 	bl	800c980 <vPortFree>
 800c1c6:	e00a      	b.n	800c1de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1ce:	f023 0301 	bic.w	r3, r3, #1
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1da:	e000      	b.n	800c1de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c1dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1de:	4b08      	ldr	r3, [pc, #32]	; (800c200 <prvProcessReceivedCommands+0x1c0>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	1d39      	adds	r1, r7, #4
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe f8fc 	bl	800a3e4 <xQueueReceive>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f47f af2a 	bne.w	800c048 <prvProcessReceivedCommands+0x8>
	}
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop
 800c1f8:	3730      	adds	r7, #48	; 0x30
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20000e28 	.word	0x20000e28

0800c204 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b088      	sub	sp, #32
 800c208:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c20a:	e048      	b.n	800c29e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c20c:	4b2d      	ldr	r3, [pc, #180]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c216:	4b2b      	ldr	r3, [pc, #172]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	3304      	adds	r3, #4
 800c224:	4618      	mov	r0, r3
 800c226:	f7fd fce5 	bl	8009bf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6a1b      	ldr	r3, [r3, #32]
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c238:	f003 0304 	and.w	r3, r3, #4
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d02e      	beq.n	800c29e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	4413      	add	r3, r2
 800c248:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d90e      	bls.n	800c270 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c25e:	4b19      	ldr	r3, [pc, #100]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3304      	adds	r3, #4
 800c266:	4619      	mov	r1, r3
 800c268:	4610      	mov	r0, r2
 800c26a:	f7fd fc8a 	bl	8009b82 <vListInsert>
 800c26e:	e016      	b.n	800c29e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c270:	2300      	movs	r3, #0
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	2300      	movs	r3, #0
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	2100      	movs	r1, #0
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7ff fd60 	bl	800bd40 <xTimerGenericCommand>
 800c280:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d10a      	bne.n	800c29e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28c:	f383 8811 	msr	BASEPRI, r3
 800c290:	f3bf 8f6f 	isb	sy
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	603b      	str	r3, [r7, #0]
}
 800c29a:	bf00      	nop
 800c29c:	e7fe      	b.n	800c29c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c29e:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1b1      	bne.n	800c20c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2a8:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2ae:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <prvSwitchTimerLists+0xc4>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a04      	ldr	r2, [pc, #16]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c2b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2b6:	4a04      	ldr	r2, [pc, #16]	; (800c2c8 <prvSwitchTimerLists+0xc4>)
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	6013      	str	r3, [r2, #0]
}
 800c2bc:	bf00      	nop
 800c2be:	3718      	adds	r7, #24
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	20000e20 	.word	0x20000e20
 800c2c8:	20000e24 	.word	0x20000e24

0800c2cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2d2:	f000 f967 	bl	800c5a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2d6:	4b15      	ldr	r3, [pc, #84]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d120      	bne.n	800c320 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2de:	4814      	ldr	r0, [pc, #80]	; (800c330 <prvCheckForValidListAndQueue+0x64>)
 800c2e0:	f7fd fbfe 	bl	8009ae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2e4:	4813      	ldr	r0, [pc, #76]	; (800c334 <prvCheckForValidListAndQueue+0x68>)
 800c2e6:	f7fd fbfb 	bl	8009ae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2ea:	4b13      	ldr	r3, [pc, #76]	; (800c338 <prvCheckForValidListAndQueue+0x6c>)
 800c2ec:	4a10      	ldr	r2, [pc, #64]	; (800c330 <prvCheckForValidListAndQueue+0x64>)
 800c2ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2f0:	4b12      	ldr	r3, [pc, #72]	; (800c33c <prvCheckForValidListAndQueue+0x70>)
 800c2f2:	4a10      	ldr	r2, [pc, #64]	; (800c334 <prvCheckForValidListAndQueue+0x68>)
 800c2f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <prvCheckForValidListAndQueue+0x74>)
 800c2fc:	4a11      	ldr	r2, [pc, #68]	; (800c344 <prvCheckForValidListAndQueue+0x78>)
 800c2fe:	2110      	movs	r1, #16
 800c300:	200a      	movs	r0, #10
 800c302:	f7fd fd09 	bl	8009d18 <xQueueGenericCreateStatic>
 800c306:	4603      	mov	r3, r0
 800c308:	4a08      	ldr	r2, [pc, #32]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c30a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d005      	beq.n	800c320 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	490b      	ldr	r1, [pc, #44]	; (800c348 <prvCheckForValidListAndQueue+0x7c>)
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe fc1a 	bl	800ab54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c320:	f000 f970 	bl	800c604 <vPortExitCritical>
}
 800c324:	bf00      	nop
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20000e28 	.word	0x20000e28
 800c330:	20000df8 	.word	0x20000df8
 800c334:	20000e0c 	.word	0x20000e0c
 800c338:	20000e20 	.word	0x20000e20
 800c33c:	20000e24 	.word	0x20000e24
 800c340:	20000ed4 	.word	0x20000ed4
 800c344:	20000e34 	.word	0x20000e34
 800c348:	0800e590 	.word	0x0800e590

0800c34c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3b04      	subs	r3, #4
 800c35c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3b04      	subs	r3, #4
 800c36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f023 0201 	bic.w	r2, r3, #1
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3b04      	subs	r3, #4
 800c37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c37c:	4a0c      	ldr	r2, [pc, #48]	; (800c3b0 <pxPortInitialiseStack+0x64>)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3b14      	subs	r3, #20
 800c386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3b04      	subs	r3, #4
 800c392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f06f 0202 	mvn.w	r2, #2
 800c39a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3b20      	subs	r3, #32
 800c3a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	0800c3b5 	.word	0x0800c3b5

0800c3b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3be:	4b12      	ldr	r3, [pc, #72]	; (800c408 <prvTaskExitError+0x54>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c6:	d00a      	beq.n	800c3de <prvTaskExitError+0x2a>
	__asm volatile
 800c3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	60fb      	str	r3, [r7, #12]
}
 800c3da:	bf00      	nop
 800c3dc:	e7fe      	b.n	800c3dc <prvTaskExitError+0x28>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	60bb      	str	r3, [r7, #8]
}
 800c3f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3f2:	bf00      	nop
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d0fc      	beq.n	800c3f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3fa:	bf00      	nop
 800c3fc:	bf00      	nop
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	2000004c 	.word	0x2000004c
 800c40c:	00000000 	.word	0x00000000

0800c410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c410:	4b07      	ldr	r3, [pc, #28]	; (800c430 <pxCurrentTCBConst2>)
 800c412:	6819      	ldr	r1, [r3, #0]
 800c414:	6808      	ldr	r0, [r1, #0]
 800c416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41a:	f380 8809 	msr	PSP, r0
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f04f 0000 	mov.w	r0, #0
 800c426:	f380 8811 	msr	BASEPRI, r0
 800c42a:	4770      	bx	lr
 800c42c:	f3af 8000 	nop.w

0800c430 <pxCurrentTCBConst2>:
 800c430:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop

0800c438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c438:	4808      	ldr	r0, [pc, #32]	; (800c45c <prvPortStartFirstTask+0x24>)
 800c43a:	6800      	ldr	r0, [r0, #0]
 800c43c:	6800      	ldr	r0, [r0, #0]
 800c43e:	f380 8808 	msr	MSP, r0
 800c442:	f04f 0000 	mov.w	r0, #0
 800c446:	f380 8814 	msr	CONTROL, r0
 800c44a:	b662      	cpsie	i
 800c44c:	b661      	cpsie	f
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	df00      	svc	0
 800c458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c45a:	bf00      	nop
 800c45c:	e000ed08 	.word	0xe000ed08

0800c460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c466:	4b46      	ldr	r3, [pc, #280]	; (800c580 <xPortStartScheduler+0x120>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a46      	ldr	r2, [pc, #280]	; (800c584 <xPortStartScheduler+0x124>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d10a      	bne.n	800c486 <xPortStartScheduler+0x26>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	613b      	str	r3, [r7, #16]
}
 800c482:	bf00      	nop
 800c484:	e7fe      	b.n	800c484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c486:	4b3e      	ldr	r3, [pc, #248]	; (800c580 <xPortStartScheduler+0x120>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a3f      	ldr	r2, [pc, #252]	; (800c588 <xPortStartScheduler+0x128>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d10a      	bne.n	800c4a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	60fb      	str	r3, [r7, #12]
}
 800c4a2:	bf00      	nop
 800c4a4:	e7fe      	b.n	800c4a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4a6:	4b39      	ldr	r3, [pc, #228]	; (800c58c <xPortStartScheduler+0x12c>)
 800c4a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	22ff      	movs	r2, #255	; 0xff
 800c4b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4c0:	78fb      	ldrb	r3, [r7, #3]
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4c8:	b2da      	uxtb	r2, r3
 800c4ca:	4b31      	ldr	r3, [pc, #196]	; (800c590 <xPortStartScheduler+0x130>)
 800c4cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4ce:	4b31      	ldr	r3, [pc, #196]	; (800c594 <xPortStartScheduler+0x134>)
 800c4d0:	2207      	movs	r2, #7
 800c4d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4d4:	e009      	b.n	800c4ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c4d6:	4b2f      	ldr	r3, [pc, #188]	; (800c594 <xPortStartScheduler+0x134>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a2d      	ldr	r2, [pc, #180]	; (800c594 <xPortStartScheduler+0x134>)
 800c4de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4f2:	2b80      	cmp	r3, #128	; 0x80
 800c4f4:	d0ef      	beq.n	800c4d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4f6:	4b27      	ldr	r3, [pc, #156]	; (800c594 <xPortStartScheduler+0x134>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f1c3 0307 	rsb	r3, r3, #7
 800c4fe:	2b04      	cmp	r3, #4
 800c500:	d00a      	beq.n	800c518 <xPortStartScheduler+0xb8>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	60bb      	str	r3, [r7, #8]
}
 800c514:	bf00      	nop
 800c516:	e7fe      	b.n	800c516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c518:	4b1e      	ldr	r3, [pc, #120]	; (800c594 <xPortStartScheduler+0x134>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	021b      	lsls	r3, r3, #8
 800c51e:	4a1d      	ldr	r2, [pc, #116]	; (800c594 <xPortStartScheduler+0x134>)
 800c520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c522:	4b1c      	ldr	r3, [pc, #112]	; (800c594 <xPortStartScheduler+0x134>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c52a:	4a1a      	ldr	r2, [pc, #104]	; (800c594 <xPortStartScheduler+0x134>)
 800c52c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	b2da      	uxtb	r2, r3
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c536:	4b18      	ldr	r3, [pc, #96]	; (800c598 <xPortStartScheduler+0x138>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a17      	ldr	r2, [pc, #92]	; (800c598 <xPortStartScheduler+0x138>)
 800c53c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c542:	4b15      	ldr	r3, [pc, #84]	; (800c598 <xPortStartScheduler+0x138>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a14      	ldr	r2, [pc, #80]	; (800c598 <xPortStartScheduler+0x138>)
 800c548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c54c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c54e:	f000 f8dd 	bl	800c70c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c552:	4b12      	ldr	r3, [pc, #72]	; (800c59c <xPortStartScheduler+0x13c>)
 800c554:	2200      	movs	r2, #0
 800c556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c558:	f000 f8fc 	bl	800c754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c55c:	4b10      	ldr	r3, [pc, #64]	; (800c5a0 <xPortStartScheduler+0x140>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a0f      	ldr	r2, [pc, #60]	; (800c5a0 <xPortStartScheduler+0x140>)
 800c562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c568:	f7ff ff66 	bl	800c438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c56c:	f7fe ff4c 	bl	800b408 <vTaskSwitchContext>
	prvTaskExitError();
 800c570:	f7ff ff20 	bl	800c3b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	e000ed00 	.word	0xe000ed00
 800c584:	410fc271 	.word	0x410fc271
 800c588:	410fc270 	.word	0x410fc270
 800c58c:	e000e400 	.word	0xe000e400
 800c590:	20000f24 	.word	0x20000f24
 800c594:	20000f28 	.word	0x20000f28
 800c598:	e000ed20 	.word	0xe000ed20
 800c59c:	2000004c 	.word	0x2000004c
 800c5a0:	e000ef34 	.word	0xe000ef34

0800c5a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	607b      	str	r3, [r7, #4]
}
 800c5bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5be:	4b0f      	ldr	r3, [pc, #60]	; (800c5fc <vPortEnterCritical+0x58>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	4a0d      	ldr	r2, [pc, #52]	; (800c5fc <vPortEnterCritical+0x58>)
 800c5c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5c8:	4b0c      	ldr	r3, [pc, #48]	; (800c5fc <vPortEnterCritical+0x58>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d10f      	bne.n	800c5f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5d0:	4b0b      	ldr	r3, [pc, #44]	; (800c600 <vPortEnterCritical+0x5c>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00a      	beq.n	800c5f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	603b      	str	r3, [r7, #0]
}
 800c5ec:	bf00      	nop
 800c5ee:	e7fe      	b.n	800c5ee <vPortEnterCritical+0x4a>
	}
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	2000004c 	.word	0x2000004c
 800c600:	e000ed04 	.word	0xe000ed04

0800c604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c60a:	4b12      	ldr	r3, [pc, #72]	; (800c654 <vPortExitCritical+0x50>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10a      	bne.n	800c628 <vPortExitCritical+0x24>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	607b      	str	r3, [r7, #4]
}
 800c624:	bf00      	nop
 800c626:	e7fe      	b.n	800c626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c628:	4b0a      	ldr	r3, [pc, #40]	; (800c654 <vPortExitCritical+0x50>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3b01      	subs	r3, #1
 800c62e:	4a09      	ldr	r2, [pc, #36]	; (800c654 <vPortExitCritical+0x50>)
 800c630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c632:	4b08      	ldr	r3, [pc, #32]	; (800c654 <vPortExitCritical+0x50>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d105      	bne.n	800c646 <vPortExitCritical+0x42>
 800c63a:	2300      	movs	r3, #0
 800c63c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	f383 8811 	msr	BASEPRI, r3
}
 800c644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c646:	bf00      	nop
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	2000004c 	.word	0x2000004c
	...

0800c660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c660:	f3ef 8009 	mrs	r0, PSP
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	4b15      	ldr	r3, [pc, #84]	; (800c6c0 <pxCurrentTCBConst>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	f01e 0f10 	tst.w	lr, #16
 800c670:	bf08      	it	eq
 800c672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67a:	6010      	str	r0, [r2, #0]
 800c67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c684:	f380 8811 	msr	BASEPRI, r0
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f7fe feba 	bl	800b408 <vTaskSwitchContext>
 800c694:	f04f 0000 	mov.w	r0, #0
 800c698:	f380 8811 	msr	BASEPRI, r0
 800c69c:	bc09      	pop	{r0, r3}
 800c69e:	6819      	ldr	r1, [r3, #0]
 800c6a0:	6808      	ldr	r0, [r1, #0]
 800c6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a6:	f01e 0f10 	tst.w	lr, #16
 800c6aa:	bf08      	it	eq
 800c6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6b0:	f380 8809 	msr	PSP, r0
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	f3af 8000 	nop.w

0800c6c0 <pxCurrentTCBConst>:
 800c6c0:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop

0800c6c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	607b      	str	r3, [r7, #4]
}
 800c6e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6e2:	f7fe fdd7 	bl	800b294 <xTaskIncrementTick>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6ec:	4b06      	ldr	r3, [pc, #24]	; (800c708 <xPortSysTickHandler+0x40>)
 800c6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6f2:	601a      	str	r2, [r3, #0]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	f383 8811 	msr	BASEPRI, r3
}
 800c6fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c700:	bf00      	nop
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c70c:	b480      	push	{r7}
 800c70e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c710:	4b0b      	ldr	r3, [pc, #44]	; (800c740 <vPortSetupTimerInterrupt+0x34>)
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c716:	4b0b      	ldr	r3, [pc, #44]	; (800c744 <vPortSetupTimerInterrupt+0x38>)
 800c718:	2200      	movs	r2, #0
 800c71a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c71c:	4b0a      	ldr	r3, [pc, #40]	; (800c748 <vPortSetupTimerInterrupt+0x3c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a0a      	ldr	r2, [pc, #40]	; (800c74c <vPortSetupTimerInterrupt+0x40>)
 800c722:	fba2 2303 	umull	r2, r3, r2, r3
 800c726:	099b      	lsrs	r3, r3, #6
 800c728:	4a09      	ldr	r2, [pc, #36]	; (800c750 <vPortSetupTimerInterrupt+0x44>)
 800c72a:	3b01      	subs	r3, #1
 800c72c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c72e:	4b04      	ldr	r3, [pc, #16]	; (800c740 <vPortSetupTimerInterrupt+0x34>)
 800c730:	2207      	movs	r2, #7
 800c732:	601a      	str	r2, [r3, #0]
}
 800c734:	bf00      	nop
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	e000e010 	.word	0xe000e010
 800c744:	e000e018 	.word	0xe000e018
 800c748:	2000002c 	.word	0x2000002c
 800c74c:	10624dd3 	.word	0x10624dd3
 800c750:	e000e014 	.word	0xe000e014

0800c754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c764 <vPortEnableVFP+0x10>
 800c758:	6801      	ldr	r1, [r0, #0]
 800c75a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c75e:	6001      	str	r1, [r0, #0]
 800c760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c762:	bf00      	nop
 800c764:	e000ed88 	.word	0xe000ed88

0800c768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c76e:	f3ef 8305 	mrs	r3, IPSR
 800c772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b0f      	cmp	r3, #15
 800c778:	d914      	bls.n	800c7a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c77a:	4a17      	ldr	r2, [pc, #92]	; (800c7d8 <vPortValidateInterruptPriority+0x70>)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	4413      	add	r3, r2
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c784:	4b15      	ldr	r3, [pc, #84]	; (800c7dc <vPortValidateInterruptPriority+0x74>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	7afa      	ldrb	r2, [r7, #11]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d20a      	bcs.n	800c7a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	607b      	str	r3, [r7, #4]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7a4:	4b0e      	ldr	r3, [pc, #56]	; (800c7e0 <vPortValidateInterruptPriority+0x78>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7ac:	4b0d      	ldr	r3, [pc, #52]	; (800c7e4 <vPortValidateInterruptPriority+0x7c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d90a      	bls.n	800c7ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	603b      	str	r3, [r7, #0]
}
 800c7c6:	bf00      	nop
 800c7c8:	e7fe      	b.n	800c7c8 <vPortValidateInterruptPriority+0x60>
	}
 800c7ca:	bf00      	nop
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	e000e3f0 	.word	0xe000e3f0
 800c7dc:	20000f24 	.word	0x20000f24
 800c7e0:	e000ed0c 	.word	0xe000ed0c
 800c7e4:	20000f28 	.word	0x20000f28

0800c7e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b08a      	sub	sp, #40	; 0x28
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7f4:	f7fe fc92 	bl	800b11c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7f8:	4b5b      	ldr	r3, [pc, #364]	; (800c968 <pvPortMalloc+0x180>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d101      	bne.n	800c804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c800:	f000 f920 	bl	800ca44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c804:	4b59      	ldr	r3, [pc, #356]	; (800c96c <pvPortMalloc+0x184>)
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4013      	ands	r3, r2
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f040 8093 	bne.w	800c938 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d01d      	beq.n	800c854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c818:	2208      	movs	r2, #8
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4413      	add	r3, r2
 800c81e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f003 0307 	and.w	r3, r3, #7
 800c826:	2b00      	cmp	r3, #0
 800c828:	d014      	beq.n	800c854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f023 0307 	bic.w	r3, r3, #7
 800c830:	3308      	adds	r3, #8
 800c832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f003 0307 	and.w	r3, r3, #7
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00a      	beq.n	800c854 <pvPortMalloc+0x6c>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	617b      	str	r3, [r7, #20]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d06e      	beq.n	800c938 <pvPortMalloc+0x150>
 800c85a:	4b45      	ldr	r3, [pc, #276]	; (800c970 <pvPortMalloc+0x188>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	429a      	cmp	r2, r3
 800c862:	d869      	bhi.n	800c938 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c864:	4b43      	ldr	r3, [pc, #268]	; (800c974 <pvPortMalloc+0x18c>)
 800c866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c868:	4b42      	ldr	r3, [pc, #264]	; (800c974 <pvPortMalloc+0x18c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c86e:	e004      	b.n	800c87a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	429a      	cmp	r2, r3
 800c882:	d903      	bls.n	800c88c <pvPortMalloc+0xa4>
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1f1      	bne.n	800c870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c88c:	4b36      	ldr	r3, [pc, #216]	; (800c968 <pvPortMalloc+0x180>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c892:	429a      	cmp	r2, r3
 800c894:	d050      	beq.n	800c938 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2208      	movs	r2, #8
 800c89c:	4413      	add	r3, r2
 800c89e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	2308      	movs	r3, #8
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d91f      	bls.n	800c8f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4413      	add	r3, r2
 800c8be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	f003 0307 	and.w	r3, r3, #7
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00a      	beq.n	800c8e0 <pvPortMalloc+0xf8>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	613b      	str	r3, [r7, #16]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	1ad2      	subs	r2, r2, r3
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8f2:	69b8      	ldr	r0, [r7, #24]
 800c8f4:	f000 f908 	bl	800cb08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8f8:	4b1d      	ldr	r3, [pc, #116]	; (800c970 <pvPortMalloc+0x188>)
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	4a1b      	ldr	r2, [pc, #108]	; (800c970 <pvPortMalloc+0x188>)
 800c904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c906:	4b1a      	ldr	r3, [pc, #104]	; (800c970 <pvPortMalloc+0x188>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	4b1b      	ldr	r3, [pc, #108]	; (800c978 <pvPortMalloc+0x190>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d203      	bcs.n	800c91a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c912:	4b17      	ldr	r3, [pc, #92]	; (800c970 <pvPortMalloc+0x188>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a18      	ldr	r2, [pc, #96]	; (800c978 <pvPortMalloc+0x190>)
 800c918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	685a      	ldr	r2, [r3, #4]
 800c91e:	4b13      	ldr	r3, [pc, #76]	; (800c96c <pvPortMalloc+0x184>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	431a      	orrs	r2, r3
 800c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	2200      	movs	r2, #0
 800c92c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c92e:	4b13      	ldr	r3, [pc, #76]	; (800c97c <pvPortMalloc+0x194>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3301      	adds	r3, #1
 800c934:	4a11      	ldr	r2, [pc, #68]	; (800c97c <pvPortMalloc+0x194>)
 800c936:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c938:	f7fe fbfe 	bl	800b138 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	f003 0307 	and.w	r3, r3, #7
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00a      	beq.n	800c95c <pvPortMalloc+0x174>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	60fb      	str	r3, [r7, #12]
}
 800c958:	bf00      	nop
 800c95a:	e7fe      	b.n	800c95a <pvPortMalloc+0x172>
	return pvReturn;
 800c95c:	69fb      	ldr	r3, [r7, #28]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3728      	adds	r7, #40	; 0x28
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	20004b34 	.word	0x20004b34
 800c96c:	20004b48 	.word	0x20004b48
 800c970:	20004b38 	.word	0x20004b38
 800c974:	20004b2c 	.word	0x20004b2c
 800c978:	20004b3c 	.word	0x20004b3c
 800c97c:	20004b40 	.word	0x20004b40

0800c980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d04d      	beq.n	800ca2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c992:	2308      	movs	r3, #8
 800c994:	425b      	negs	r3, r3
 800c996:	697a      	ldr	r2, [r7, #20]
 800c998:	4413      	add	r3, r2
 800c99a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	685a      	ldr	r2, [r3, #4]
 800c9a4:	4b24      	ldr	r3, [pc, #144]	; (800ca38 <vPortFree+0xb8>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10a      	bne.n	800c9c4 <vPortFree+0x44>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	60fb      	str	r3, [r7, #12]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00a      	beq.n	800c9e2 <vPortFree+0x62>
	__asm volatile
 800c9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d0:	f383 8811 	msr	BASEPRI, r3
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	60bb      	str	r3, [r7, #8]
}
 800c9de:	bf00      	nop
 800c9e0:	e7fe      	b.n	800c9e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	685a      	ldr	r2, [r3, #4]
 800c9e6:	4b14      	ldr	r3, [pc, #80]	; (800ca38 <vPortFree+0xb8>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d01e      	beq.n	800ca2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d11a      	bne.n	800ca2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	4b0e      	ldr	r3, [pc, #56]	; (800ca38 <vPortFree+0xb8>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	43db      	mvns	r3, r3
 800ca02:	401a      	ands	r2, r3
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca08:	f7fe fb88 	bl	800b11c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	4b0a      	ldr	r3, [pc, #40]	; (800ca3c <vPortFree+0xbc>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4413      	add	r3, r2
 800ca16:	4a09      	ldr	r2, [pc, #36]	; (800ca3c <vPortFree+0xbc>)
 800ca18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca1a:	6938      	ldr	r0, [r7, #16]
 800ca1c:	f000 f874 	bl	800cb08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca20:	4b07      	ldr	r3, [pc, #28]	; (800ca40 <vPortFree+0xc0>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3301      	adds	r3, #1
 800ca26:	4a06      	ldr	r2, [pc, #24]	; (800ca40 <vPortFree+0xc0>)
 800ca28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca2a:	f7fe fb85 	bl	800b138 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca2e:	bf00      	nop
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20004b48 	.word	0x20004b48
 800ca3c:	20004b38 	.word	0x20004b38
 800ca40:	20004b44 	.word	0x20004b44

0800ca44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca50:	4b27      	ldr	r3, [pc, #156]	; (800caf0 <prvHeapInit+0xac>)
 800ca52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f003 0307 	and.w	r3, r3, #7
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00c      	beq.n	800ca78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3307      	adds	r3, #7
 800ca62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f023 0307 	bic.w	r3, r3, #7
 800ca6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	4a1f      	ldr	r2, [pc, #124]	; (800caf0 <prvHeapInit+0xac>)
 800ca74:	4413      	add	r3, r2
 800ca76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca7c:	4a1d      	ldr	r2, [pc, #116]	; (800caf4 <prvHeapInit+0xb0>)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca82:	4b1c      	ldr	r3, [pc, #112]	; (800caf4 <prvHeapInit+0xb0>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca90:	2208      	movs	r2, #8
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	1a9b      	subs	r3, r3, r2
 800ca96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f023 0307 	bic.w	r3, r3, #7
 800ca9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	4a15      	ldr	r2, [pc, #84]	; (800caf8 <prvHeapInit+0xb4>)
 800caa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800caa6:	4b14      	ldr	r3, [pc, #80]	; (800caf8 <prvHeapInit+0xb4>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2200      	movs	r2, #0
 800caac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800caae:	4b12      	ldr	r3, [pc, #72]	; (800caf8 <prvHeapInit+0xb4>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	1ad2      	subs	r2, r2, r3
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cac4:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <prvHeapInit+0xb4>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	4a0a      	ldr	r2, [pc, #40]	; (800cafc <prvHeapInit+0xb8>)
 800cad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	4a09      	ldr	r2, [pc, #36]	; (800cb00 <prvHeapInit+0xbc>)
 800cada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cadc:	4b09      	ldr	r3, [pc, #36]	; (800cb04 <prvHeapInit+0xc0>)
 800cade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cae2:	601a      	str	r2, [r3, #0]
}
 800cae4:	bf00      	nop
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	20000f2c 	.word	0x20000f2c
 800caf4:	20004b2c 	.word	0x20004b2c
 800caf8:	20004b34 	.word	0x20004b34
 800cafc:	20004b3c 	.word	0x20004b3c
 800cb00:	20004b38 	.word	0x20004b38
 800cb04:	20004b48 	.word	0x20004b48

0800cb08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb10:	4b28      	ldr	r3, [pc, #160]	; (800cbb4 <prvInsertBlockIntoFreeList+0xac>)
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	e002      	b.n	800cb1c <prvInsertBlockIntoFreeList+0x14>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	60fb      	str	r3, [r7, #12]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d8f7      	bhi.n	800cb16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	4413      	add	r3, r2
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d108      	bne.n	800cb4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	441a      	add	r2, r3
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	441a      	add	r2, r3
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d118      	bne.n	800cb90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	4b15      	ldr	r3, [pc, #84]	; (800cbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d00d      	beq.n	800cb86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	441a      	add	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	e008      	b.n	800cb98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb86:	4b0c      	ldr	r3, [pc, #48]	; (800cbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	e003      	b.n	800cb98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d002      	beq.n	800cba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cba6:	bf00      	nop
 800cba8:	3714      	adds	r7, #20
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	20004b2c 	.word	0x20004b2c
 800cbb8:	20004b34 	.word	0x20004b34

0800cbbc <__errno>:
 800cbbc:	4b01      	ldr	r3, [pc, #4]	; (800cbc4 <__errno+0x8>)
 800cbbe:	6818      	ldr	r0, [r3, #0]
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	20000050 	.word	0x20000050

0800cbc8 <std>:
 800cbc8:	2300      	movs	r3, #0
 800cbca:	b510      	push	{r4, lr}
 800cbcc:	4604      	mov	r4, r0
 800cbce:	e9c0 3300 	strd	r3, r3, [r0]
 800cbd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbd6:	6083      	str	r3, [r0, #8]
 800cbd8:	8181      	strh	r1, [r0, #12]
 800cbda:	6643      	str	r3, [r0, #100]	; 0x64
 800cbdc:	81c2      	strh	r2, [r0, #14]
 800cbde:	6183      	str	r3, [r0, #24]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	2208      	movs	r2, #8
 800cbe4:	305c      	adds	r0, #92	; 0x5c
 800cbe6:	f000 f929 	bl	800ce3c <memset>
 800cbea:	4b05      	ldr	r3, [pc, #20]	; (800cc00 <std+0x38>)
 800cbec:	6263      	str	r3, [r4, #36]	; 0x24
 800cbee:	4b05      	ldr	r3, [pc, #20]	; (800cc04 <std+0x3c>)
 800cbf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cbf2:	4b05      	ldr	r3, [pc, #20]	; (800cc08 <std+0x40>)
 800cbf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cbf6:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <std+0x44>)
 800cbf8:	6224      	str	r4, [r4, #32]
 800cbfa:	6323      	str	r3, [r4, #48]	; 0x30
 800cbfc:	bd10      	pop	{r4, pc}
 800cbfe:	bf00      	nop
 800cc00:	0800d2dd 	.word	0x0800d2dd
 800cc04:	0800d2ff 	.word	0x0800d2ff
 800cc08:	0800d337 	.word	0x0800d337
 800cc0c:	0800d35b 	.word	0x0800d35b

0800cc10 <_cleanup_r>:
 800cc10:	4901      	ldr	r1, [pc, #4]	; (800cc18 <_cleanup_r+0x8>)
 800cc12:	f000 b8af 	b.w	800cd74 <_fwalk_reent>
 800cc16:	bf00      	nop
 800cc18:	0800d635 	.word	0x0800d635

0800cc1c <__sfmoreglue>:
 800cc1c:	b570      	push	{r4, r5, r6, lr}
 800cc1e:	1e4a      	subs	r2, r1, #1
 800cc20:	2568      	movs	r5, #104	; 0x68
 800cc22:	4355      	muls	r5, r2
 800cc24:	460e      	mov	r6, r1
 800cc26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc2a:	f000 f90f 	bl	800ce4c <_malloc_r>
 800cc2e:	4604      	mov	r4, r0
 800cc30:	b140      	cbz	r0, 800cc44 <__sfmoreglue+0x28>
 800cc32:	2100      	movs	r1, #0
 800cc34:	e9c0 1600 	strd	r1, r6, [r0]
 800cc38:	300c      	adds	r0, #12
 800cc3a:	60a0      	str	r0, [r4, #8]
 800cc3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc40:	f000 f8fc 	bl	800ce3c <memset>
 800cc44:	4620      	mov	r0, r4
 800cc46:	bd70      	pop	{r4, r5, r6, pc}

0800cc48 <__sfp_lock_acquire>:
 800cc48:	4801      	ldr	r0, [pc, #4]	; (800cc50 <__sfp_lock_acquire+0x8>)
 800cc4a:	f000 b8d8 	b.w	800cdfe <__retarget_lock_acquire_recursive>
 800cc4e:	bf00      	nop
 800cc50:	20008e84 	.word	0x20008e84

0800cc54 <__sfp_lock_release>:
 800cc54:	4801      	ldr	r0, [pc, #4]	; (800cc5c <__sfp_lock_release+0x8>)
 800cc56:	f000 b8d3 	b.w	800ce00 <__retarget_lock_release_recursive>
 800cc5a:	bf00      	nop
 800cc5c:	20008e84 	.word	0x20008e84

0800cc60 <__sinit_lock_acquire>:
 800cc60:	4801      	ldr	r0, [pc, #4]	; (800cc68 <__sinit_lock_acquire+0x8>)
 800cc62:	f000 b8cc 	b.w	800cdfe <__retarget_lock_acquire_recursive>
 800cc66:	bf00      	nop
 800cc68:	20008e7f 	.word	0x20008e7f

0800cc6c <__sinit_lock_release>:
 800cc6c:	4801      	ldr	r0, [pc, #4]	; (800cc74 <__sinit_lock_release+0x8>)
 800cc6e:	f000 b8c7 	b.w	800ce00 <__retarget_lock_release_recursive>
 800cc72:	bf00      	nop
 800cc74:	20008e7f 	.word	0x20008e7f

0800cc78 <__sinit>:
 800cc78:	b510      	push	{r4, lr}
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	f7ff fff0 	bl	800cc60 <__sinit_lock_acquire>
 800cc80:	69a3      	ldr	r3, [r4, #24]
 800cc82:	b11b      	cbz	r3, 800cc8c <__sinit+0x14>
 800cc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc88:	f7ff bff0 	b.w	800cc6c <__sinit_lock_release>
 800cc8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc90:	6523      	str	r3, [r4, #80]	; 0x50
 800cc92:	4b13      	ldr	r3, [pc, #76]	; (800cce0 <__sinit+0x68>)
 800cc94:	4a13      	ldr	r2, [pc, #76]	; (800cce4 <__sinit+0x6c>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc9a:	42a3      	cmp	r3, r4
 800cc9c:	bf04      	itt	eq
 800cc9e:	2301      	moveq	r3, #1
 800cca0:	61a3      	streq	r3, [r4, #24]
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 f820 	bl	800cce8 <__sfp>
 800cca8:	6060      	str	r0, [r4, #4]
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 f81c 	bl	800cce8 <__sfp>
 800ccb0:	60a0      	str	r0, [r4, #8]
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f000 f818 	bl	800cce8 <__sfp>
 800ccb8:	2200      	movs	r2, #0
 800ccba:	60e0      	str	r0, [r4, #12]
 800ccbc:	2104      	movs	r1, #4
 800ccbe:	6860      	ldr	r0, [r4, #4]
 800ccc0:	f7ff ff82 	bl	800cbc8 <std>
 800ccc4:	68a0      	ldr	r0, [r4, #8]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	2109      	movs	r1, #9
 800ccca:	f7ff ff7d 	bl	800cbc8 <std>
 800ccce:	68e0      	ldr	r0, [r4, #12]
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	2112      	movs	r1, #18
 800ccd4:	f7ff ff78 	bl	800cbc8 <std>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	61a3      	str	r3, [r4, #24]
 800ccdc:	e7d2      	b.n	800cc84 <__sinit+0xc>
 800ccde:	bf00      	nop
 800cce0:	0800eb20 	.word	0x0800eb20
 800cce4:	0800cc11 	.word	0x0800cc11

0800cce8 <__sfp>:
 800cce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccea:	4607      	mov	r7, r0
 800ccec:	f7ff ffac 	bl	800cc48 <__sfp_lock_acquire>
 800ccf0:	4b1e      	ldr	r3, [pc, #120]	; (800cd6c <__sfp+0x84>)
 800ccf2:	681e      	ldr	r6, [r3, #0]
 800ccf4:	69b3      	ldr	r3, [r6, #24]
 800ccf6:	b913      	cbnz	r3, 800ccfe <__sfp+0x16>
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f7ff ffbd 	bl	800cc78 <__sinit>
 800ccfe:	3648      	adds	r6, #72	; 0x48
 800cd00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd04:	3b01      	subs	r3, #1
 800cd06:	d503      	bpl.n	800cd10 <__sfp+0x28>
 800cd08:	6833      	ldr	r3, [r6, #0]
 800cd0a:	b30b      	cbz	r3, 800cd50 <__sfp+0x68>
 800cd0c:	6836      	ldr	r6, [r6, #0]
 800cd0e:	e7f7      	b.n	800cd00 <__sfp+0x18>
 800cd10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd14:	b9d5      	cbnz	r5, 800cd4c <__sfp+0x64>
 800cd16:	4b16      	ldr	r3, [pc, #88]	; (800cd70 <__sfp+0x88>)
 800cd18:	60e3      	str	r3, [r4, #12]
 800cd1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd1e:	6665      	str	r5, [r4, #100]	; 0x64
 800cd20:	f000 f86c 	bl	800cdfc <__retarget_lock_init_recursive>
 800cd24:	f7ff ff96 	bl	800cc54 <__sfp_lock_release>
 800cd28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd30:	6025      	str	r5, [r4, #0]
 800cd32:	61a5      	str	r5, [r4, #24]
 800cd34:	2208      	movs	r2, #8
 800cd36:	4629      	mov	r1, r5
 800cd38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd3c:	f000 f87e 	bl	800ce3c <memset>
 800cd40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd48:	4620      	mov	r0, r4
 800cd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd4c:	3468      	adds	r4, #104	; 0x68
 800cd4e:	e7d9      	b.n	800cd04 <__sfp+0x1c>
 800cd50:	2104      	movs	r1, #4
 800cd52:	4638      	mov	r0, r7
 800cd54:	f7ff ff62 	bl	800cc1c <__sfmoreglue>
 800cd58:	4604      	mov	r4, r0
 800cd5a:	6030      	str	r0, [r6, #0]
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d1d5      	bne.n	800cd0c <__sfp+0x24>
 800cd60:	f7ff ff78 	bl	800cc54 <__sfp_lock_release>
 800cd64:	230c      	movs	r3, #12
 800cd66:	603b      	str	r3, [r7, #0]
 800cd68:	e7ee      	b.n	800cd48 <__sfp+0x60>
 800cd6a:	bf00      	nop
 800cd6c:	0800eb20 	.word	0x0800eb20
 800cd70:	ffff0001 	.word	0xffff0001

0800cd74 <_fwalk_reent>:
 800cd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd78:	4606      	mov	r6, r0
 800cd7a:	4688      	mov	r8, r1
 800cd7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd80:	2700      	movs	r7, #0
 800cd82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd86:	f1b9 0901 	subs.w	r9, r9, #1
 800cd8a:	d505      	bpl.n	800cd98 <_fwalk_reent+0x24>
 800cd8c:	6824      	ldr	r4, [r4, #0]
 800cd8e:	2c00      	cmp	r4, #0
 800cd90:	d1f7      	bne.n	800cd82 <_fwalk_reent+0xe>
 800cd92:	4638      	mov	r0, r7
 800cd94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd98:	89ab      	ldrh	r3, [r5, #12]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d907      	bls.n	800cdae <_fwalk_reent+0x3a>
 800cd9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cda2:	3301      	adds	r3, #1
 800cda4:	d003      	beq.n	800cdae <_fwalk_reent+0x3a>
 800cda6:	4629      	mov	r1, r5
 800cda8:	4630      	mov	r0, r6
 800cdaa:	47c0      	blx	r8
 800cdac:	4307      	orrs	r7, r0
 800cdae:	3568      	adds	r5, #104	; 0x68
 800cdb0:	e7e9      	b.n	800cd86 <_fwalk_reent+0x12>
	...

0800cdb4 <__libc_init_array>:
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	4d0d      	ldr	r5, [pc, #52]	; (800cdec <__libc_init_array+0x38>)
 800cdb8:	4c0d      	ldr	r4, [pc, #52]	; (800cdf0 <__libc_init_array+0x3c>)
 800cdba:	1b64      	subs	r4, r4, r5
 800cdbc:	10a4      	asrs	r4, r4, #2
 800cdbe:	2600      	movs	r6, #0
 800cdc0:	42a6      	cmp	r6, r4
 800cdc2:	d109      	bne.n	800cdd8 <__libc_init_array+0x24>
 800cdc4:	4d0b      	ldr	r5, [pc, #44]	; (800cdf4 <__libc_init_array+0x40>)
 800cdc6:	4c0c      	ldr	r4, [pc, #48]	; (800cdf8 <__libc_init_array+0x44>)
 800cdc8:	f001 fa10 	bl	800e1ec <_init>
 800cdcc:	1b64      	subs	r4, r4, r5
 800cdce:	10a4      	asrs	r4, r4, #2
 800cdd0:	2600      	movs	r6, #0
 800cdd2:	42a6      	cmp	r6, r4
 800cdd4:	d105      	bne.n	800cde2 <__libc_init_array+0x2e>
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}
 800cdd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cddc:	4798      	blx	r3
 800cdde:	3601      	adds	r6, #1
 800cde0:	e7ee      	b.n	800cdc0 <__libc_init_array+0xc>
 800cde2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cde6:	4798      	blx	r3
 800cde8:	3601      	adds	r6, #1
 800cdea:	e7f2      	b.n	800cdd2 <__libc_init_array+0x1e>
 800cdec:	0800eb60 	.word	0x0800eb60
 800cdf0:	0800eb60 	.word	0x0800eb60
 800cdf4:	0800eb60 	.word	0x0800eb60
 800cdf8:	0800eb64 	.word	0x0800eb64

0800cdfc <__retarget_lock_init_recursive>:
 800cdfc:	4770      	bx	lr

0800cdfe <__retarget_lock_acquire_recursive>:
 800cdfe:	4770      	bx	lr

0800ce00 <__retarget_lock_release_recursive>:
 800ce00:	4770      	bx	lr

0800ce02 <memccpy>:
 800ce02:	b510      	push	{r4, lr}
 800ce04:	b2d2      	uxtb	r2, r2
 800ce06:	3901      	subs	r1, #1
 800ce08:	4403      	add	r3, r0
 800ce0a:	4298      	cmp	r0, r3
 800ce0c:	d101      	bne.n	800ce12 <memccpy+0x10>
 800ce0e:	2000      	movs	r0, #0
 800ce10:	e005      	b.n	800ce1e <memccpy+0x1c>
 800ce12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ce16:	f800 4b01 	strb.w	r4, [r0], #1
 800ce1a:	4294      	cmp	r4, r2
 800ce1c:	d1f5      	bne.n	800ce0a <memccpy+0x8>
 800ce1e:	bd10      	pop	{r4, pc}

0800ce20 <memcpy>:
 800ce20:	440a      	add	r2, r1
 800ce22:	4291      	cmp	r1, r2
 800ce24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce28:	d100      	bne.n	800ce2c <memcpy+0xc>
 800ce2a:	4770      	bx	lr
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce36:	4291      	cmp	r1, r2
 800ce38:	d1f9      	bne.n	800ce2e <memcpy+0xe>
 800ce3a:	bd10      	pop	{r4, pc}

0800ce3c <memset>:
 800ce3c:	4402      	add	r2, r0
 800ce3e:	4603      	mov	r3, r0
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d100      	bne.n	800ce46 <memset+0xa>
 800ce44:	4770      	bx	lr
 800ce46:	f803 1b01 	strb.w	r1, [r3], #1
 800ce4a:	e7f9      	b.n	800ce40 <memset+0x4>

0800ce4c <_malloc_r>:
 800ce4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4e:	1ccd      	adds	r5, r1, #3
 800ce50:	f025 0503 	bic.w	r5, r5, #3
 800ce54:	3508      	adds	r5, #8
 800ce56:	2d0c      	cmp	r5, #12
 800ce58:	bf38      	it	cc
 800ce5a:	250c      	movcc	r5, #12
 800ce5c:	2d00      	cmp	r5, #0
 800ce5e:	4606      	mov	r6, r0
 800ce60:	db01      	blt.n	800ce66 <_malloc_r+0x1a>
 800ce62:	42a9      	cmp	r1, r5
 800ce64:	d903      	bls.n	800ce6e <_malloc_r+0x22>
 800ce66:	230c      	movs	r3, #12
 800ce68:	6033      	str	r3, [r6, #0]
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce6e:	f000 fc9b 	bl	800d7a8 <__malloc_lock>
 800ce72:	4921      	ldr	r1, [pc, #132]	; (800cef8 <_malloc_r+0xac>)
 800ce74:	680a      	ldr	r2, [r1, #0]
 800ce76:	4614      	mov	r4, r2
 800ce78:	b99c      	cbnz	r4, 800cea2 <_malloc_r+0x56>
 800ce7a:	4f20      	ldr	r7, [pc, #128]	; (800cefc <_malloc_r+0xb0>)
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	b923      	cbnz	r3, 800ce8a <_malloc_r+0x3e>
 800ce80:	4621      	mov	r1, r4
 800ce82:	4630      	mov	r0, r6
 800ce84:	f000 f934 	bl	800d0f0 <_sbrk_r>
 800ce88:	6038      	str	r0, [r7, #0]
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f000 f92f 	bl	800d0f0 <_sbrk_r>
 800ce92:	1c43      	adds	r3, r0, #1
 800ce94:	d123      	bne.n	800cede <_malloc_r+0x92>
 800ce96:	230c      	movs	r3, #12
 800ce98:	6033      	str	r3, [r6, #0]
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	f000 fc8a 	bl	800d7b4 <__malloc_unlock>
 800cea0:	e7e3      	b.n	800ce6a <_malloc_r+0x1e>
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	1b5b      	subs	r3, r3, r5
 800cea6:	d417      	bmi.n	800ced8 <_malloc_r+0x8c>
 800cea8:	2b0b      	cmp	r3, #11
 800ceaa:	d903      	bls.n	800ceb4 <_malloc_r+0x68>
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	441c      	add	r4, r3
 800ceb0:	6025      	str	r5, [r4, #0]
 800ceb2:	e004      	b.n	800cebe <_malloc_r+0x72>
 800ceb4:	6863      	ldr	r3, [r4, #4]
 800ceb6:	42a2      	cmp	r2, r4
 800ceb8:	bf0c      	ite	eq
 800ceba:	600b      	streq	r3, [r1, #0]
 800cebc:	6053      	strne	r3, [r2, #4]
 800cebe:	4630      	mov	r0, r6
 800cec0:	f000 fc78 	bl	800d7b4 <__malloc_unlock>
 800cec4:	f104 000b 	add.w	r0, r4, #11
 800cec8:	1d23      	adds	r3, r4, #4
 800ceca:	f020 0007 	bic.w	r0, r0, #7
 800cece:	1ac2      	subs	r2, r0, r3
 800ced0:	d0cc      	beq.n	800ce6c <_malloc_r+0x20>
 800ced2:	1a1b      	subs	r3, r3, r0
 800ced4:	50a3      	str	r3, [r4, r2]
 800ced6:	e7c9      	b.n	800ce6c <_malloc_r+0x20>
 800ced8:	4622      	mov	r2, r4
 800ceda:	6864      	ldr	r4, [r4, #4]
 800cedc:	e7cc      	b.n	800ce78 <_malloc_r+0x2c>
 800cede:	1cc4      	adds	r4, r0, #3
 800cee0:	f024 0403 	bic.w	r4, r4, #3
 800cee4:	42a0      	cmp	r0, r4
 800cee6:	d0e3      	beq.n	800ceb0 <_malloc_r+0x64>
 800cee8:	1a21      	subs	r1, r4, r0
 800ceea:	4630      	mov	r0, r6
 800ceec:	f000 f900 	bl	800d0f0 <_sbrk_r>
 800cef0:	3001      	adds	r0, #1
 800cef2:	d1dd      	bne.n	800ceb0 <_malloc_r+0x64>
 800cef4:	e7cf      	b.n	800ce96 <_malloc_r+0x4a>
 800cef6:	bf00      	nop
 800cef8:	20004b4c 	.word	0x20004b4c
 800cefc:	20004b50 	.word	0x20004b50

0800cf00 <iprintf>:
 800cf00:	b40f      	push	{r0, r1, r2, r3}
 800cf02:	4b0a      	ldr	r3, [pc, #40]	; (800cf2c <iprintf+0x2c>)
 800cf04:	b513      	push	{r0, r1, r4, lr}
 800cf06:	681c      	ldr	r4, [r3, #0]
 800cf08:	b124      	cbz	r4, 800cf14 <iprintf+0x14>
 800cf0a:	69a3      	ldr	r3, [r4, #24]
 800cf0c:	b913      	cbnz	r3, 800cf14 <iprintf+0x14>
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f7ff feb2 	bl	800cc78 <__sinit>
 800cf14:	ab05      	add	r3, sp, #20
 800cf16:	9a04      	ldr	r2, [sp, #16]
 800cf18:	68a1      	ldr	r1, [r4, #8]
 800cf1a:	9301      	str	r3, [sp, #4]
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	f000 fe25 	bl	800db6c <_vfiprintf_r>
 800cf22:	b002      	add	sp, #8
 800cf24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf28:	b004      	add	sp, #16
 800cf2a:	4770      	bx	lr
 800cf2c:	20000050 	.word	0x20000050

0800cf30 <_puts_r>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	460e      	mov	r6, r1
 800cf34:	4605      	mov	r5, r0
 800cf36:	b118      	cbz	r0, 800cf40 <_puts_r+0x10>
 800cf38:	6983      	ldr	r3, [r0, #24]
 800cf3a:	b90b      	cbnz	r3, 800cf40 <_puts_r+0x10>
 800cf3c:	f7ff fe9c 	bl	800cc78 <__sinit>
 800cf40:	69ab      	ldr	r3, [r5, #24]
 800cf42:	68ac      	ldr	r4, [r5, #8]
 800cf44:	b913      	cbnz	r3, 800cf4c <_puts_r+0x1c>
 800cf46:	4628      	mov	r0, r5
 800cf48:	f7ff fe96 	bl	800cc78 <__sinit>
 800cf4c:	4b2c      	ldr	r3, [pc, #176]	; (800d000 <_puts_r+0xd0>)
 800cf4e:	429c      	cmp	r4, r3
 800cf50:	d120      	bne.n	800cf94 <_puts_r+0x64>
 800cf52:	686c      	ldr	r4, [r5, #4]
 800cf54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf56:	07db      	lsls	r3, r3, #31
 800cf58:	d405      	bmi.n	800cf66 <_puts_r+0x36>
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	0598      	lsls	r0, r3, #22
 800cf5e:	d402      	bmi.n	800cf66 <_puts_r+0x36>
 800cf60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf62:	f7ff ff4c 	bl	800cdfe <__retarget_lock_acquire_recursive>
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	0719      	lsls	r1, r3, #28
 800cf6a:	d51d      	bpl.n	800cfa8 <_puts_r+0x78>
 800cf6c:	6923      	ldr	r3, [r4, #16]
 800cf6e:	b1db      	cbz	r3, 800cfa8 <_puts_r+0x78>
 800cf70:	3e01      	subs	r6, #1
 800cf72:	68a3      	ldr	r3, [r4, #8]
 800cf74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	60a3      	str	r3, [r4, #8]
 800cf7c:	bb39      	cbnz	r1, 800cfce <_puts_r+0x9e>
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	da38      	bge.n	800cff4 <_puts_r+0xc4>
 800cf82:	4622      	mov	r2, r4
 800cf84:	210a      	movs	r1, #10
 800cf86:	4628      	mov	r0, r5
 800cf88:	f000 f9ec 	bl	800d364 <__swbuf_r>
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	d011      	beq.n	800cfb4 <_puts_r+0x84>
 800cf90:	250a      	movs	r5, #10
 800cf92:	e011      	b.n	800cfb8 <_puts_r+0x88>
 800cf94:	4b1b      	ldr	r3, [pc, #108]	; (800d004 <_puts_r+0xd4>)
 800cf96:	429c      	cmp	r4, r3
 800cf98:	d101      	bne.n	800cf9e <_puts_r+0x6e>
 800cf9a:	68ac      	ldr	r4, [r5, #8]
 800cf9c:	e7da      	b.n	800cf54 <_puts_r+0x24>
 800cf9e:	4b1a      	ldr	r3, [pc, #104]	; (800d008 <_puts_r+0xd8>)
 800cfa0:	429c      	cmp	r4, r3
 800cfa2:	bf08      	it	eq
 800cfa4:	68ec      	ldreq	r4, [r5, #12]
 800cfa6:	e7d5      	b.n	800cf54 <_puts_r+0x24>
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f000 fa3e 	bl	800d42c <__swsetup_r>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d0dd      	beq.n	800cf70 <_puts_r+0x40>
 800cfb4:	f04f 35ff 	mov.w	r5, #4294967295
 800cfb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfba:	07da      	lsls	r2, r3, #31
 800cfbc:	d405      	bmi.n	800cfca <_puts_r+0x9a>
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	059b      	lsls	r3, r3, #22
 800cfc2:	d402      	bmi.n	800cfca <_puts_r+0x9a>
 800cfc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfc6:	f7ff ff1b 	bl	800ce00 <__retarget_lock_release_recursive>
 800cfca:	4628      	mov	r0, r5
 800cfcc:	bd70      	pop	{r4, r5, r6, pc}
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	da04      	bge.n	800cfdc <_puts_r+0xac>
 800cfd2:	69a2      	ldr	r2, [r4, #24]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	dc06      	bgt.n	800cfe6 <_puts_r+0xb6>
 800cfd8:	290a      	cmp	r1, #10
 800cfda:	d004      	beq.n	800cfe6 <_puts_r+0xb6>
 800cfdc:	6823      	ldr	r3, [r4, #0]
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	6022      	str	r2, [r4, #0]
 800cfe2:	7019      	strb	r1, [r3, #0]
 800cfe4:	e7c5      	b.n	800cf72 <_puts_r+0x42>
 800cfe6:	4622      	mov	r2, r4
 800cfe8:	4628      	mov	r0, r5
 800cfea:	f000 f9bb 	bl	800d364 <__swbuf_r>
 800cfee:	3001      	adds	r0, #1
 800cff0:	d1bf      	bne.n	800cf72 <_puts_r+0x42>
 800cff2:	e7df      	b.n	800cfb4 <_puts_r+0x84>
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	250a      	movs	r5, #10
 800cff8:	1c5a      	adds	r2, r3, #1
 800cffa:	6022      	str	r2, [r4, #0]
 800cffc:	701d      	strb	r5, [r3, #0]
 800cffe:	e7db      	b.n	800cfb8 <_puts_r+0x88>
 800d000:	0800eae0 	.word	0x0800eae0
 800d004:	0800eb00 	.word	0x0800eb00
 800d008:	0800eac0 	.word	0x0800eac0

0800d00c <puts>:
 800d00c:	4b02      	ldr	r3, [pc, #8]	; (800d018 <puts+0xc>)
 800d00e:	4601      	mov	r1, r0
 800d010:	6818      	ldr	r0, [r3, #0]
 800d012:	f7ff bf8d 	b.w	800cf30 <_puts_r>
 800d016:	bf00      	nop
 800d018:	20000050 	.word	0x20000050

0800d01c <cleanup_glue>:
 800d01c:	b538      	push	{r3, r4, r5, lr}
 800d01e:	460c      	mov	r4, r1
 800d020:	6809      	ldr	r1, [r1, #0]
 800d022:	4605      	mov	r5, r0
 800d024:	b109      	cbz	r1, 800d02a <cleanup_glue+0xe>
 800d026:	f7ff fff9 	bl	800d01c <cleanup_glue>
 800d02a:	4621      	mov	r1, r4
 800d02c:	4628      	mov	r0, r5
 800d02e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d032:	f000 bbc5 	b.w	800d7c0 <_free_r>
	...

0800d038 <_reclaim_reent>:
 800d038:	4b2c      	ldr	r3, [pc, #176]	; (800d0ec <_reclaim_reent+0xb4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4283      	cmp	r3, r0
 800d03e:	b570      	push	{r4, r5, r6, lr}
 800d040:	4604      	mov	r4, r0
 800d042:	d051      	beq.n	800d0e8 <_reclaim_reent+0xb0>
 800d044:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d046:	b143      	cbz	r3, 800d05a <_reclaim_reent+0x22>
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d14a      	bne.n	800d0e4 <_reclaim_reent+0xac>
 800d04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d050:	6819      	ldr	r1, [r3, #0]
 800d052:	b111      	cbz	r1, 800d05a <_reclaim_reent+0x22>
 800d054:	4620      	mov	r0, r4
 800d056:	f000 fbb3 	bl	800d7c0 <_free_r>
 800d05a:	6961      	ldr	r1, [r4, #20]
 800d05c:	b111      	cbz	r1, 800d064 <_reclaim_reent+0x2c>
 800d05e:	4620      	mov	r0, r4
 800d060:	f000 fbae 	bl	800d7c0 <_free_r>
 800d064:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d066:	b111      	cbz	r1, 800d06e <_reclaim_reent+0x36>
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 fba9 	bl	800d7c0 <_free_r>
 800d06e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d070:	b111      	cbz	r1, 800d078 <_reclaim_reent+0x40>
 800d072:	4620      	mov	r0, r4
 800d074:	f000 fba4 	bl	800d7c0 <_free_r>
 800d078:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d07a:	b111      	cbz	r1, 800d082 <_reclaim_reent+0x4a>
 800d07c:	4620      	mov	r0, r4
 800d07e:	f000 fb9f 	bl	800d7c0 <_free_r>
 800d082:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d084:	b111      	cbz	r1, 800d08c <_reclaim_reent+0x54>
 800d086:	4620      	mov	r0, r4
 800d088:	f000 fb9a 	bl	800d7c0 <_free_r>
 800d08c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d08e:	b111      	cbz	r1, 800d096 <_reclaim_reent+0x5e>
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fb95 	bl	800d7c0 <_free_r>
 800d096:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d098:	b111      	cbz	r1, 800d0a0 <_reclaim_reent+0x68>
 800d09a:	4620      	mov	r0, r4
 800d09c:	f000 fb90 	bl	800d7c0 <_free_r>
 800d0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0a2:	b111      	cbz	r1, 800d0aa <_reclaim_reent+0x72>
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 fb8b 	bl	800d7c0 <_free_r>
 800d0aa:	69a3      	ldr	r3, [r4, #24]
 800d0ac:	b1e3      	cbz	r3, 800d0e8 <_reclaim_reent+0xb0>
 800d0ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	4798      	blx	r3
 800d0b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d0b6:	b1b9      	cbz	r1, 800d0e8 <_reclaim_reent+0xb0>
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0be:	f7ff bfad 	b.w	800d01c <cleanup_glue>
 800d0c2:	5949      	ldr	r1, [r1, r5]
 800d0c4:	b941      	cbnz	r1, 800d0d8 <_reclaim_reent+0xa0>
 800d0c6:	3504      	adds	r5, #4
 800d0c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0ca:	2d80      	cmp	r5, #128	; 0x80
 800d0cc:	68d9      	ldr	r1, [r3, #12]
 800d0ce:	d1f8      	bne.n	800d0c2 <_reclaim_reent+0x8a>
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f000 fb75 	bl	800d7c0 <_free_r>
 800d0d6:	e7ba      	b.n	800d04e <_reclaim_reent+0x16>
 800d0d8:	680e      	ldr	r6, [r1, #0]
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f000 fb70 	bl	800d7c0 <_free_r>
 800d0e0:	4631      	mov	r1, r6
 800d0e2:	e7ef      	b.n	800d0c4 <_reclaim_reent+0x8c>
 800d0e4:	2500      	movs	r5, #0
 800d0e6:	e7ef      	b.n	800d0c8 <_reclaim_reent+0x90>
 800d0e8:	bd70      	pop	{r4, r5, r6, pc}
 800d0ea:	bf00      	nop
 800d0ec:	20000050 	.word	0x20000050

0800d0f0 <_sbrk_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d06      	ldr	r5, [pc, #24]	; (800d10c <_sbrk_r+0x1c>)
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	4608      	mov	r0, r1
 800d0fa:	602b      	str	r3, [r5, #0]
 800d0fc:	f7f5 f828 	bl	8002150 <_sbrk>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d102      	bne.n	800d10a <_sbrk_r+0x1a>
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	b103      	cbz	r3, 800d10a <_sbrk_r+0x1a>
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	bd38      	pop	{r3, r4, r5, pc}
 800d10c:	20008e88 	.word	0x20008e88

0800d110 <setvbuf>:
 800d110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d114:	461d      	mov	r5, r3
 800d116:	4b5d      	ldr	r3, [pc, #372]	; (800d28c <setvbuf+0x17c>)
 800d118:	681f      	ldr	r7, [r3, #0]
 800d11a:	4604      	mov	r4, r0
 800d11c:	460e      	mov	r6, r1
 800d11e:	4690      	mov	r8, r2
 800d120:	b127      	cbz	r7, 800d12c <setvbuf+0x1c>
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	b913      	cbnz	r3, 800d12c <setvbuf+0x1c>
 800d126:	4638      	mov	r0, r7
 800d128:	f7ff fda6 	bl	800cc78 <__sinit>
 800d12c:	4b58      	ldr	r3, [pc, #352]	; (800d290 <setvbuf+0x180>)
 800d12e:	429c      	cmp	r4, r3
 800d130:	d167      	bne.n	800d202 <setvbuf+0xf2>
 800d132:	687c      	ldr	r4, [r7, #4]
 800d134:	f1b8 0f02 	cmp.w	r8, #2
 800d138:	d006      	beq.n	800d148 <setvbuf+0x38>
 800d13a:	f1b8 0f01 	cmp.w	r8, #1
 800d13e:	f200 809f 	bhi.w	800d280 <setvbuf+0x170>
 800d142:	2d00      	cmp	r5, #0
 800d144:	f2c0 809c 	blt.w	800d280 <setvbuf+0x170>
 800d148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d14a:	07db      	lsls	r3, r3, #31
 800d14c:	d405      	bmi.n	800d15a <setvbuf+0x4a>
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	0598      	lsls	r0, r3, #22
 800d152:	d402      	bmi.n	800d15a <setvbuf+0x4a>
 800d154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d156:	f7ff fe52 	bl	800cdfe <__retarget_lock_acquire_recursive>
 800d15a:	4621      	mov	r1, r4
 800d15c:	4638      	mov	r0, r7
 800d15e:	f000 fa69 	bl	800d634 <_fflush_r>
 800d162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d164:	b141      	cbz	r1, 800d178 <setvbuf+0x68>
 800d166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d16a:	4299      	cmp	r1, r3
 800d16c:	d002      	beq.n	800d174 <setvbuf+0x64>
 800d16e:	4638      	mov	r0, r7
 800d170:	f000 fb26 	bl	800d7c0 <_free_r>
 800d174:	2300      	movs	r3, #0
 800d176:	6363      	str	r3, [r4, #52]	; 0x34
 800d178:	2300      	movs	r3, #0
 800d17a:	61a3      	str	r3, [r4, #24]
 800d17c:	6063      	str	r3, [r4, #4]
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	0619      	lsls	r1, r3, #24
 800d182:	d503      	bpl.n	800d18c <setvbuf+0x7c>
 800d184:	6921      	ldr	r1, [r4, #16]
 800d186:	4638      	mov	r0, r7
 800d188:	f000 fb1a 	bl	800d7c0 <_free_r>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d192:	f023 0303 	bic.w	r3, r3, #3
 800d196:	f1b8 0f02 	cmp.w	r8, #2
 800d19a:	81a3      	strh	r3, [r4, #12]
 800d19c:	d06c      	beq.n	800d278 <setvbuf+0x168>
 800d19e:	ab01      	add	r3, sp, #4
 800d1a0:	466a      	mov	r2, sp
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	4638      	mov	r0, r7
 800d1a6:	f000 fa93 	bl	800d6d0 <__swhatbuf_r>
 800d1aa:	89a3      	ldrh	r3, [r4, #12]
 800d1ac:	4318      	orrs	r0, r3
 800d1ae:	81a0      	strh	r0, [r4, #12]
 800d1b0:	2d00      	cmp	r5, #0
 800d1b2:	d130      	bne.n	800d216 <setvbuf+0x106>
 800d1b4:	9d00      	ldr	r5, [sp, #0]
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	f000 faee 	bl	800d798 <malloc>
 800d1bc:	4606      	mov	r6, r0
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d155      	bne.n	800d26e <setvbuf+0x15e>
 800d1c2:	f8dd 9000 	ldr.w	r9, [sp]
 800d1c6:	45a9      	cmp	r9, r5
 800d1c8:	d14a      	bne.n	800d260 <setvbuf+0x150>
 800d1ca:	f04f 35ff 	mov.w	r5, #4294967295
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	60a2      	str	r2, [r4, #8]
 800d1d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d1d6:	6022      	str	r2, [r4, #0]
 800d1d8:	6122      	str	r2, [r4, #16]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e0:	6162      	str	r2, [r4, #20]
 800d1e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1e4:	f043 0302 	orr.w	r3, r3, #2
 800d1e8:	07d2      	lsls	r2, r2, #31
 800d1ea:	81a3      	strh	r3, [r4, #12]
 800d1ec:	d405      	bmi.n	800d1fa <setvbuf+0xea>
 800d1ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d1f2:	d102      	bne.n	800d1fa <setvbuf+0xea>
 800d1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1f6:	f7ff fe03 	bl	800ce00 <__retarget_lock_release_recursive>
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	b003      	add	sp, #12
 800d1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d202:	4b24      	ldr	r3, [pc, #144]	; (800d294 <setvbuf+0x184>)
 800d204:	429c      	cmp	r4, r3
 800d206:	d101      	bne.n	800d20c <setvbuf+0xfc>
 800d208:	68bc      	ldr	r4, [r7, #8]
 800d20a:	e793      	b.n	800d134 <setvbuf+0x24>
 800d20c:	4b22      	ldr	r3, [pc, #136]	; (800d298 <setvbuf+0x188>)
 800d20e:	429c      	cmp	r4, r3
 800d210:	bf08      	it	eq
 800d212:	68fc      	ldreq	r4, [r7, #12]
 800d214:	e78e      	b.n	800d134 <setvbuf+0x24>
 800d216:	2e00      	cmp	r6, #0
 800d218:	d0cd      	beq.n	800d1b6 <setvbuf+0xa6>
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	b913      	cbnz	r3, 800d224 <setvbuf+0x114>
 800d21e:	4638      	mov	r0, r7
 800d220:	f7ff fd2a 	bl	800cc78 <__sinit>
 800d224:	f1b8 0f01 	cmp.w	r8, #1
 800d228:	bf08      	it	eq
 800d22a:	89a3      	ldrheq	r3, [r4, #12]
 800d22c:	6026      	str	r6, [r4, #0]
 800d22e:	bf04      	itt	eq
 800d230:	f043 0301 	orreq.w	r3, r3, #1
 800d234:	81a3      	strheq	r3, [r4, #12]
 800d236:	89a2      	ldrh	r2, [r4, #12]
 800d238:	f012 0308 	ands.w	r3, r2, #8
 800d23c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d240:	d01c      	beq.n	800d27c <setvbuf+0x16c>
 800d242:	07d3      	lsls	r3, r2, #31
 800d244:	bf41      	itttt	mi
 800d246:	2300      	movmi	r3, #0
 800d248:	426d      	negmi	r5, r5
 800d24a:	60a3      	strmi	r3, [r4, #8]
 800d24c:	61a5      	strmi	r5, [r4, #24]
 800d24e:	bf58      	it	pl
 800d250:	60a5      	strpl	r5, [r4, #8]
 800d252:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d254:	f015 0501 	ands.w	r5, r5, #1
 800d258:	d115      	bne.n	800d286 <setvbuf+0x176>
 800d25a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d25e:	e7c8      	b.n	800d1f2 <setvbuf+0xe2>
 800d260:	4648      	mov	r0, r9
 800d262:	f000 fa99 	bl	800d798 <malloc>
 800d266:	4606      	mov	r6, r0
 800d268:	2800      	cmp	r0, #0
 800d26a:	d0ae      	beq.n	800d1ca <setvbuf+0xba>
 800d26c:	464d      	mov	r5, r9
 800d26e:	89a3      	ldrh	r3, [r4, #12]
 800d270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d274:	81a3      	strh	r3, [r4, #12]
 800d276:	e7d0      	b.n	800d21a <setvbuf+0x10a>
 800d278:	2500      	movs	r5, #0
 800d27a:	e7a8      	b.n	800d1ce <setvbuf+0xbe>
 800d27c:	60a3      	str	r3, [r4, #8]
 800d27e:	e7e8      	b.n	800d252 <setvbuf+0x142>
 800d280:	f04f 35ff 	mov.w	r5, #4294967295
 800d284:	e7b9      	b.n	800d1fa <setvbuf+0xea>
 800d286:	2500      	movs	r5, #0
 800d288:	e7b7      	b.n	800d1fa <setvbuf+0xea>
 800d28a:	bf00      	nop
 800d28c:	20000050 	.word	0x20000050
 800d290:	0800eae0 	.word	0x0800eae0
 800d294:	0800eb00 	.word	0x0800eb00
 800d298:	0800eac0 	.word	0x0800eac0

0800d29c <siprintf>:
 800d29c:	b40e      	push	{r1, r2, r3}
 800d29e:	b500      	push	{lr}
 800d2a0:	b09c      	sub	sp, #112	; 0x70
 800d2a2:	ab1d      	add	r3, sp, #116	; 0x74
 800d2a4:	9002      	str	r0, [sp, #8]
 800d2a6:	9006      	str	r0, [sp, #24]
 800d2a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d2ac:	4809      	ldr	r0, [pc, #36]	; (800d2d4 <siprintf+0x38>)
 800d2ae:	9107      	str	r1, [sp, #28]
 800d2b0:	9104      	str	r1, [sp, #16]
 800d2b2:	4909      	ldr	r1, [pc, #36]	; (800d2d8 <siprintf+0x3c>)
 800d2b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2b8:	9105      	str	r1, [sp, #20]
 800d2ba:	6800      	ldr	r0, [r0, #0]
 800d2bc:	9301      	str	r3, [sp, #4]
 800d2be:	a902      	add	r1, sp, #8
 800d2c0:	f000 fb2a 	bl	800d918 <_svfiprintf_r>
 800d2c4:	9b02      	ldr	r3, [sp, #8]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	701a      	strb	r2, [r3, #0]
 800d2ca:	b01c      	add	sp, #112	; 0x70
 800d2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d0:	b003      	add	sp, #12
 800d2d2:	4770      	bx	lr
 800d2d4:	20000050 	.word	0x20000050
 800d2d8:	ffff0208 	.word	0xffff0208

0800d2dc <__sread>:
 800d2dc:	b510      	push	{r4, lr}
 800d2de:	460c      	mov	r4, r1
 800d2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e4:	f000 ff06 	bl	800e0f4 <_read_r>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	bfab      	itete	ge
 800d2ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2ee:	89a3      	ldrhlt	r3, [r4, #12]
 800d2f0:	181b      	addge	r3, r3, r0
 800d2f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2f6:	bfac      	ite	ge
 800d2f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2fa:	81a3      	strhlt	r3, [r4, #12]
 800d2fc:	bd10      	pop	{r4, pc}

0800d2fe <__swrite>:
 800d2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d302:	461f      	mov	r7, r3
 800d304:	898b      	ldrh	r3, [r1, #12]
 800d306:	05db      	lsls	r3, r3, #23
 800d308:	4605      	mov	r5, r0
 800d30a:	460c      	mov	r4, r1
 800d30c:	4616      	mov	r6, r2
 800d30e:	d505      	bpl.n	800d31c <__swrite+0x1e>
 800d310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d314:	2302      	movs	r3, #2
 800d316:	2200      	movs	r2, #0
 800d318:	f000 f9c8 	bl	800d6ac <_lseek_r>
 800d31c:	89a3      	ldrh	r3, [r4, #12]
 800d31e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	4632      	mov	r2, r6
 800d32a:	463b      	mov	r3, r7
 800d32c:	4628      	mov	r0, r5
 800d32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d332:	f000 b869 	b.w	800d408 <_write_r>

0800d336 <__sseek>:
 800d336:	b510      	push	{r4, lr}
 800d338:	460c      	mov	r4, r1
 800d33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d33e:	f000 f9b5 	bl	800d6ac <_lseek_r>
 800d342:	1c43      	adds	r3, r0, #1
 800d344:	89a3      	ldrh	r3, [r4, #12]
 800d346:	bf15      	itete	ne
 800d348:	6560      	strne	r0, [r4, #84]	; 0x54
 800d34a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d34e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d352:	81a3      	strheq	r3, [r4, #12]
 800d354:	bf18      	it	ne
 800d356:	81a3      	strhne	r3, [r4, #12]
 800d358:	bd10      	pop	{r4, pc}

0800d35a <__sclose>:
 800d35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d35e:	f000 b8d3 	b.w	800d508 <_close_r>
	...

0800d364 <__swbuf_r>:
 800d364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d366:	460e      	mov	r6, r1
 800d368:	4614      	mov	r4, r2
 800d36a:	4605      	mov	r5, r0
 800d36c:	b118      	cbz	r0, 800d376 <__swbuf_r+0x12>
 800d36e:	6983      	ldr	r3, [r0, #24]
 800d370:	b90b      	cbnz	r3, 800d376 <__swbuf_r+0x12>
 800d372:	f7ff fc81 	bl	800cc78 <__sinit>
 800d376:	4b21      	ldr	r3, [pc, #132]	; (800d3fc <__swbuf_r+0x98>)
 800d378:	429c      	cmp	r4, r3
 800d37a:	d12b      	bne.n	800d3d4 <__swbuf_r+0x70>
 800d37c:	686c      	ldr	r4, [r5, #4]
 800d37e:	69a3      	ldr	r3, [r4, #24]
 800d380:	60a3      	str	r3, [r4, #8]
 800d382:	89a3      	ldrh	r3, [r4, #12]
 800d384:	071a      	lsls	r2, r3, #28
 800d386:	d52f      	bpl.n	800d3e8 <__swbuf_r+0x84>
 800d388:	6923      	ldr	r3, [r4, #16]
 800d38a:	b36b      	cbz	r3, 800d3e8 <__swbuf_r+0x84>
 800d38c:	6923      	ldr	r3, [r4, #16]
 800d38e:	6820      	ldr	r0, [r4, #0]
 800d390:	1ac0      	subs	r0, r0, r3
 800d392:	6963      	ldr	r3, [r4, #20]
 800d394:	b2f6      	uxtb	r6, r6
 800d396:	4283      	cmp	r3, r0
 800d398:	4637      	mov	r7, r6
 800d39a:	dc04      	bgt.n	800d3a6 <__swbuf_r+0x42>
 800d39c:	4621      	mov	r1, r4
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f000 f948 	bl	800d634 <_fflush_r>
 800d3a4:	bb30      	cbnz	r0, 800d3f4 <__swbuf_r+0x90>
 800d3a6:	68a3      	ldr	r3, [r4, #8]
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	60a3      	str	r3, [r4, #8]
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	1c5a      	adds	r2, r3, #1
 800d3b0:	6022      	str	r2, [r4, #0]
 800d3b2:	701e      	strb	r6, [r3, #0]
 800d3b4:	6963      	ldr	r3, [r4, #20]
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	4283      	cmp	r3, r0
 800d3ba:	d004      	beq.n	800d3c6 <__swbuf_r+0x62>
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	07db      	lsls	r3, r3, #31
 800d3c0:	d506      	bpl.n	800d3d0 <__swbuf_r+0x6c>
 800d3c2:	2e0a      	cmp	r6, #10
 800d3c4:	d104      	bne.n	800d3d0 <__swbuf_r+0x6c>
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	f000 f933 	bl	800d634 <_fflush_r>
 800d3ce:	b988      	cbnz	r0, 800d3f4 <__swbuf_r+0x90>
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3d4:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <__swbuf_r+0x9c>)
 800d3d6:	429c      	cmp	r4, r3
 800d3d8:	d101      	bne.n	800d3de <__swbuf_r+0x7a>
 800d3da:	68ac      	ldr	r4, [r5, #8]
 800d3dc:	e7cf      	b.n	800d37e <__swbuf_r+0x1a>
 800d3de:	4b09      	ldr	r3, [pc, #36]	; (800d404 <__swbuf_r+0xa0>)
 800d3e0:	429c      	cmp	r4, r3
 800d3e2:	bf08      	it	eq
 800d3e4:	68ec      	ldreq	r4, [r5, #12]
 800d3e6:	e7ca      	b.n	800d37e <__swbuf_r+0x1a>
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	f000 f81e 	bl	800d42c <__swsetup_r>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d0cb      	beq.n	800d38c <__swbuf_r+0x28>
 800d3f4:	f04f 37ff 	mov.w	r7, #4294967295
 800d3f8:	e7ea      	b.n	800d3d0 <__swbuf_r+0x6c>
 800d3fa:	bf00      	nop
 800d3fc:	0800eae0 	.word	0x0800eae0
 800d400:	0800eb00 	.word	0x0800eb00
 800d404:	0800eac0 	.word	0x0800eac0

0800d408 <_write_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4d07      	ldr	r5, [pc, #28]	; (800d428 <_write_r+0x20>)
 800d40c:	4604      	mov	r4, r0
 800d40e:	4608      	mov	r0, r1
 800d410:	4611      	mov	r1, r2
 800d412:	2200      	movs	r2, #0
 800d414:	602a      	str	r2, [r5, #0]
 800d416:	461a      	mov	r2, r3
 800d418:	f7f4 fc98 	bl	8001d4c <_write>
 800d41c:	1c43      	adds	r3, r0, #1
 800d41e:	d102      	bne.n	800d426 <_write_r+0x1e>
 800d420:	682b      	ldr	r3, [r5, #0]
 800d422:	b103      	cbz	r3, 800d426 <_write_r+0x1e>
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	bd38      	pop	{r3, r4, r5, pc}
 800d428:	20008e88 	.word	0x20008e88

0800d42c <__swsetup_r>:
 800d42c:	4b32      	ldr	r3, [pc, #200]	; (800d4f8 <__swsetup_r+0xcc>)
 800d42e:	b570      	push	{r4, r5, r6, lr}
 800d430:	681d      	ldr	r5, [r3, #0]
 800d432:	4606      	mov	r6, r0
 800d434:	460c      	mov	r4, r1
 800d436:	b125      	cbz	r5, 800d442 <__swsetup_r+0x16>
 800d438:	69ab      	ldr	r3, [r5, #24]
 800d43a:	b913      	cbnz	r3, 800d442 <__swsetup_r+0x16>
 800d43c:	4628      	mov	r0, r5
 800d43e:	f7ff fc1b 	bl	800cc78 <__sinit>
 800d442:	4b2e      	ldr	r3, [pc, #184]	; (800d4fc <__swsetup_r+0xd0>)
 800d444:	429c      	cmp	r4, r3
 800d446:	d10f      	bne.n	800d468 <__swsetup_r+0x3c>
 800d448:	686c      	ldr	r4, [r5, #4]
 800d44a:	89a3      	ldrh	r3, [r4, #12]
 800d44c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d450:	0719      	lsls	r1, r3, #28
 800d452:	d42c      	bmi.n	800d4ae <__swsetup_r+0x82>
 800d454:	06dd      	lsls	r5, r3, #27
 800d456:	d411      	bmi.n	800d47c <__swsetup_r+0x50>
 800d458:	2309      	movs	r3, #9
 800d45a:	6033      	str	r3, [r6, #0]
 800d45c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	f04f 30ff 	mov.w	r0, #4294967295
 800d466:	e03e      	b.n	800d4e6 <__swsetup_r+0xba>
 800d468:	4b25      	ldr	r3, [pc, #148]	; (800d500 <__swsetup_r+0xd4>)
 800d46a:	429c      	cmp	r4, r3
 800d46c:	d101      	bne.n	800d472 <__swsetup_r+0x46>
 800d46e:	68ac      	ldr	r4, [r5, #8]
 800d470:	e7eb      	b.n	800d44a <__swsetup_r+0x1e>
 800d472:	4b24      	ldr	r3, [pc, #144]	; (800d504 <__swsetup_r+0xd8>)
 800d474:	429c      	cmp	r4, r3
 800d476:	bf08      	it	eq
 800d478:	68ec      	ldreq	r4, [r5, #12]
 800d47a:	e7e6      	b.n	800d44a <__swsetup_r+0x1e>
 800d47c:	0758      	lsls	r0, r3, #29
 800d47e:	d512      	bpl.n	800d4a6 <__swsetup_r+0x7a>
 800d480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d482:	b141      	cbz	r1, 800d496 <__swsetup_r+0x6a>
 800d484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d488:	4299      	cmp	r1, r3
 800d48a:	d002      	beq.n	800d492 <__swsetup_r+0x66>
 800d48c:	4630      	mov	r0, r6
 800d48e:	f000 f997 	bl	800d7c0 <_free_r>
 800d492:	2300      	movs	r3, #0
 800d494:	6363      	str	r3, [r4, #52]	; 0x34
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d49c:	81a3      	strh	r3, [r4, #12]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	6063      	str	r3, [r4, #4]
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	6023      	str	r3, [r4, #0]
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	f043 0308 	orr.w	r3, r3, #8
 800d4ac:	81a3      	strh	r3, [r4, #12]
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	b94b      	cbnz	r3, 800d4c6 <__swsetup_r+0x9a>
 800d4b2:	89a3      	ldrh	r3, [r4, #12]
 800d4b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4bc:	d003      	beq.n	800d4c6 <__swsetup_r+0x9a>
 800d4be:	4621      	mov	r1, r4
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	f000 f929 	bl	800d718 <__smakebuf_r>
 800d4c6:	89a0      	ldrh	r0, [r4, #12]
 800d4c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4cc:	f010 0301 	ands.w	r3, r0, #1
 800d4d0:	d00a      	beq.n	800d4e8 <__swsetup_r+0xbc>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60a3      	str	r3, [r4, #8]
 800d4d6:	6963      	ldr	r3, [r4, #20]
 800d4d8:	425b      	negs	r3, r3
 800d4da:	61a3      	str	r3, [r4, #24]
 800d4dc:	6923      	ldr	r3, [r4, #16]
 800d4de:	b943      	cbnz	r3, 800d4f2 <__swsetup_r+0xc6>
 800d4e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4e4:	d1ba      	bne.n	800d45c <__swsetup_r+0x30>
 800d4e6:	bd70      	pop	{r4, r5, r6, pc}
 800d4e8:	0781      	lsls	r1, r0, #30
 800d4ea:	bf58      	it	pl
 800d4ec:	6963      	ldrpl	r3, [r4, #20]
 800d4ee:	60a3      	str	r3, [r4, #8]
 800d4f0:	e7f4      	b.n	800d4dc <__swsetup_r+0xb0>
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	e7f7      	b.n	800d4e6 <__swsetup_r+0xba>
 800d4f6:	bf00      	nop
 800d4f8:	20000050 	.word	0x20000050
 800d4fc:	0800eae0 	.word	0x0800eae0
 800d500:	0800eb00 	.word	0x0800eb00
 800d504:	0800eac0 	.word	0x0800eac0

0800d508 <_close_r>:
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4d06      	ldr	r5, [pc, #24]	; (800d524 <_close_r+0x1c>)
 800d50c:	2300      	movs	r3, #0
 800d50e:	4604      	mov	r4, r0
 800d510:	4608      	mov	r0, r1
 800d512:	602b      	str	r3, [r5, #0]
 800d514:	f7f4 fc46 	bl	8001da4 <_close>
 800d518:	1c43      	adds	r3, r0, #1
 800d51a:	d102      	bne.n	800d522 <_close_r+0x1a>
 800d51c:	682b      	ldr	r3, [r5, #0]
 800d51e:	b103      	cbz	r3, 800d522 <_close_r+0x1a>
 800d520:	6023      	str	r3, [r4, #0]
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	20008e88 	.word	0x20008e88

0800d528 <__sflush_r>:
 800d528:	898a      	ldrh	r2, [r1, #12]
 800d52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52e:	4605      	mov	r5, r0
 800d530:	0710      	lsls	r0, r2, #28
 800d532:	460c      	mov	r4, r1
 800d534:	d458      	bmi.n	800d5e8 <__sflush_r+0xc0>
 800d536:	684b      	ldr	r3, [r1, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	dc05      	bgt.n	800d548 <__sflush_r+0x20>
 800d53c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d53e:	2b00      	cmp	r3, #0
 800d540:	dc02      	bgt.n	800d548 <__sflush_r+0x20>
 800d542:	2000      	movs	r0, #0
 800d544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d54a:	2e00      	cmp	r6, #0
 800d54c:	d0f9      	beq.n	800d542 <__sflush_r+0x1a>
 800d54e:	2300      	movs	r3, #0
 800d550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d554:	682f      	ldr	r7, [r5, #0]
 800d556:	602b      	str	r3, [r5, #0]
 800d558:	d032      	beq.n	800d5c0 <__sflush_r+0x98>
 800d55a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	075a      	lsls	r2, r3, #29
 800d560:	d505      	bpl.n	800d56e <__sflush_r+0x46>
 800d562:	6863      	ldr	r3, [r4, #4]
 800d564:	1ac0      	subs	r0, r0, r3
 800d566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d568:	b10b      	cbz	r3, 800d56e <__sflush_r+0x46>
 800d56a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d56c:	1ac0      	subs	r0, r0, r3
 800d56e:	2300      	movs	r3, #0
 800d570:	4602      	mov	r2, r0
 800d572:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d574:	6a21      	ldr	r1, [r4, #32]
 800d576:	4628      	mov	r0, r5
 800d578:	47b0      	blx	r6
 800d57a:	1c43      	adds	r3, r0, #1
 800d57c:	89a3      	ldrh	r3, [r4, #12]
 800d57e:	d106      	bne.n	800d58e <__sflush_r+0x66>
 800d580:	6829      	ldr	r1, [r5, #0]
 800d582:	291d      	cmp	r1, #29
 800d584:	d82c      	bhi.n	800d5e0 <__sflush_r+0xb8>
 800d586:	4a2a      	ldr	r2, [pc, #168]	; (800d630 <__sflush_r+0x108>)
 800d588:	40ca      	lsrs	r2, r1
 800d58a:	07d6      	lsls	r6, r2, #31
 800d58c:	d528      	bpl.n	800d5e0 <__sflush_r+0xb8>
 800d58e:	2200      	movs	r2, #0
 800d590:	6062      	str	r2, [r4, #4]
 800d592:	04d9      	lsls	r1, r3, #19
 800d594:	6922      	ldr	r2, [r4, #16]
 800d596:	6022      	str	r2, [r4, #0]
 800d598:	d504      	bpl.n	800d5a4 <__sflush_r+0x7c>
 800d59a:	1c42      	adds	r2, r0, #1
 800d59c:	d101      	bne.n	800d5a2 <__sflush_r+0x7a>
 800d59e:	682b      	ldr	r3, [r5, #0]
 800d5a0:	b903      	cbnz	r3, 800d5a4 <__sflush_r+0x7c>
 800d5a2:	6560      	str	r0, [r4, #84]	; 0x54
 800d5a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5a6:	602f      	str	r7, [r5, #0]
 800d5a8:	2900      	cmp	r1, #0
 800d5aa:	d0ca      	beq.n	800d542 <__sflush_r+0x1a>
 800d5ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5b0:	4299      	cmp	r1, r3
 800d5b2:	d002      	beq.n	800d5ba <__sflush_r+0x92>
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	f000 f903 	bl	800d7c0 <_free_r>
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	6360      	str	r0, [r4, #52]	; 0x34
 800d5be:	e7c1      	b.n	800d544 <__sflush_r+0x1c>
 800d5c0:	6a21      	ldr	r1, [r4, #32]
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	47b0      	blx	r6
 800d5c8:	1c41      	adds	r1, r0, #1
 800d5ca:	d1c7      	bne.n	800d55c <__sflush_r+0x34>
 800d5cc:	682b      	ldr	r3, [r5, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d0c4      	beq.n	800d55c <__sflush_r+0x34>
 800d5d2:	2b1d      	cmp	r3, #29
 800d5d4:	d001      	beq.n	800d5da <__sflush_r+0xb2>
 800d5d6:	2b16      	cmp	r3, #22
 800d5d8:	d101      	bne.n	800d5de <__sflush_r+0xb6>
 800d5da:	602f      	str	r7, [r5, #0]
 800d5dc:	e7b1      	b.n	800d542 <__sflush_r+0x1a>
 800d5de:	89a3      	ldrh	r3, [r4, #12]
 800d5e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5e4:	81a3      	strh	r3, [r4, #12]
 800d5e6:	e7ad      	b.n	800d544 <__sflush_r+0x1c>
 800d5e8:	690f      	ldr	r7, [r1, #16]
 800d5ea:	2f00      	cmp	r7, #0
 800d5ec:	d0a9      	beq.n	800d542 <__sflush_r+0x1a>
 800d5ee:	0793      	lsls	r3, r2, #30
 800d5f0:	680e      	ldr	r6, [r1, #0]
 800d5f2:	bf08      	it	eq
 800d5f4:	694b      	ldreq	r3, [r1, #20]
 800d5f6:	600f      	str	r7, [r1, #0]
 800d5f8:	bf18      	it	ne
 800d5fa:	2300      	movne	r3, #0
 800d5fc:	eba6 0807 	sub.w	r8, r6, r7
 800d600:	608b      	str	r3, [r1, #8]
 800d602:	f1b8 0f00 	cmp.w	r8, #0
 800d606:	dd9c      	ble.n	800d542 <__sflush_r+0x1a>
 800d608:	6a21      	ldr	r1, [r4, #32]
 800d60a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d60c:	4643      	mov	r3, r8
 800d60e:	463a      	mov	r2, r7
 800d610:	4628      	mov	r0, r5
 800d612:	47b0      	blx	r6
 800d614:	2800      	cmp	r0, #0
 800d616:	dc06      	bgt.n	800d626 <__sflush_r+0xfe>
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d61e:	81a3      	strh	r3, [r4, #12]
 800d620:	f04f 30ff 	mov.w	r0, #4294967295
 800d624:	e78e      	b.n	800d544 <__sflush_r+0x1c>
 800d626:	4407      	add	r7, r0
 800d628:	eba8 0800 	sub.w	r8, r8, r0
 800d62c:	e7e9      	b.n	800d602 <__sflush_r+0xda>
 800d62e:	bf00      	nop
 800d630:	20400001 	.word	0x20400001

0800d634 <_fflush_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	690b      	ldr	r3, [r1, #16]
 800d638:	4605      	mov	r5, r0
 800d63a:	460c      	mov	r4, r1
 800d63c:	b913      	cbnz	r3, 800d644 <_fflush_r+0x10>
 800d63e:	2500      	movs	r5, #0
 800d640:	4628      	mov	r0, r5
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	b118      	cbz	r0, 800d64e <_fflush_r+0x1a>
 800d646:	6983      	ldr	r3, [r0, #24]
 800d648:	b90b      	cbnz	r3, 800d64e <_fflush_r+0x1a>
 800d64a:	f7ff fb15 	bl	800cc78 <__sinit>
 800d64e:	4b14      	ldr	r3, [pc, #80]	; (800d6a0 <_fflush_r+0x6c>)
 800d650:	429c      	cmp	r4, r3
 800d652:	d11b      	bne.n	800d68c <_fflush_r+0x58>
 800d654:	686c      	ldr	r4, [r5, #4]
 800d656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d0ef      	beq.n	800d63e <_fflush_r+0xa>
 800d65e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d660:	07d0      	lsls	r0, r2, #31
 800d662:	d404      	bmi.n	800d66e <_fflush_r+0x3a>
 800d664:	0599      	lsls	r1, r3, #22
 800d666:	d402      	bmi.n	800d66e <_fflush_r+0x3a>
 800d668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d66a:	f7ff fbc8 	bl	800cdfe <__retarget_lock_acquire_recursive>
 800d66e:	4628      	mov	r0, r5
 800d670:	4621      	mov	r1, r4
 800d672:	f7ff ff59 	bl	800d528 <__sflush_r>
 800d676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d678:	07da      	lsls	r2, r3, #31
 800d67a:	4605      	mov	r5, r0
 800d67c:	d4e0      	bmi.n	800d640 <_fflush_r+0xc>
 800d67e:	89a3      	ldrh	r3, [r4, #12]
 800d680:	059b      	lsls	r3, r3, #22
 800d682:	d4dd      	bmi.n	800d640 <_fflush_r+0xc>
 800d684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d686:	f7ff fbbb 	bl	800ce00 <__retarget_lock_release_recursive>
 800d68a:	e7d9      	b.n	800d640 <_fflush_r+0xc>
 800d68c:	4b05      	ldr	r3, [pc, #20]	; (800d6a4 <_fflush_r+0x70>)
 800d68e:	429c      	cmp	r4, r3
 800d690:	d101      	bne.n	800d696 <_fflush_r+0x62>
 800d692:	68ac      	ldr	r4, [r5, #8]
 800d694:	e7df      	b.n	800d656 <_fflush_r+0x22>
 800d696:	4b04      	ldr	r3, [pc, #16]	; (800d6a8 <_fflush_r+0x74>)
 800d698:	429c      	cmp	r4, r3
 800d69a:	bf08      	it	eq
 800d69c:	68ec      	ldreq	r4, [r5, #12]
 800d69e:	e7da      	b.n	800d656 <_fflush_r+0x22>
 800d6a0:	0800eae0 	.word	0x0800eae0
 800d6a4:	0800eb00 	.word	0x0800eb00
 800d6a8:	0800eac0 	.word	0x0800eac0

0800d6ac <_lseek_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	4d07      	ldr	r5, [pc, #28]	; (800d6cc <_lseek_r+0x20>)
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	4608      	mov	r0, r1
 800d6b4:	4611      	mov	r1, r2
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	602a      	str	r2, [r5, #0]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	f7f4 fb89 	bl	8001dd2 <_lseek>
 800d6c0:	1c43      	adds	r3, r0, #1
 800d6c2:	d102      	bne.n	800d6ca <_lseek_r+0x1e>
 800d6c4:	682b      	ldr	r3, [r5, #0]
 800d6c6:	b103      	cbz	r3, 800d6ca <_lseek_r+0x1e>
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	bd38      	pop	{r3, r4, r5, pc}
 800d6cc:	20008e88 	.word	0x20008e88

0800d6d0 <__swhatbuf_r>:
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	460e      	mov	r6, r1
 800d6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6d8:	2900      	cmp	r1, #0
 800d6da:	b096      	sub	sp, #88	; 0x58
 800d6dc:	4614      	mov	r4, r2
 800d6de:	461d      	mov	r5, r3
 800d6e0:	da07      	bge.n	800d6f2 <__swhatbuf_r+0x22>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	602b      	str	r3, [r5, #0]
 800d6e6:	89b3      	ldrh	r3, [r6, #12]
 800d6e8:	061a      	lsls	r2, r3, #24
 800d6ea:	d410      	bmi.n	800d70e <__swhatbuf_r+0x3e>
 800d6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6f0:	e00e      	b.n	800d710 <__swhatbuf_r+0x40>
 800d6f2:	466a      	mov	r2, sp
 800d6f4:	f000 fd10 	bl	800e118 <_fstat_r>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	dbf2      	blt.n	800d6e2 <__swhatbuf_r+0x12>
 800d6fc:	9a01      	ldr	r2, [sp, #4]
 800d6fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d702:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d706:	425a      	negs	r2, r3
 800d708:	415a      	adcs	r2, r3
 800d70a:	602a      	str	r2, [r5, #0]
 800d70c:	e7ee      	b.n	800d6ec <__swhatbuf_r+0x1c>
 800d70e:	2340      	movs	r3, #64	; 0x40
 800d710:	2000      	movs	r0, #0
 800d712:	6023      	str	r3, [r4, #0]
 800d714:	b016      	add	sp, #88	; 0x58
 800d716:	bd70      	pop	{r4, r5, r6, pc}

0800d718 <__smakebuf_r>:
 800d718:	898b      	ldrh	r3, [r1, #12]
 800d71a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d71c:	079d      	lsls	r5, r3, #30
 800d71e:	4606      	mov	r6, r0
 800d720:	460c      	mov	r4, r1
 800d722:	d507      	bpl.n	800d734 <__smakebuf_r+0x1c>
 800d724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d728:	6023      	str	r3, [r4, #0]
 800d72a:	6123      	str	r3, [r4, #16]
 800d72c:	2301      	movs	r3, #1
 800d72e:	6163      	str	r3, [r4, #20]
 800d730:	b002      	add	sp, #8
 800d732:	bd70      	pop	{r4, r5, r6, pc}
 800d734:	ab01      	add	r3, sp, #4
 800d736:	466a      	mov	r2, sp
 800d738:	f7ff ffca 	bl	800d6d0 <__swhatbuf_r>
 800d73c:	9900      	ldr	r1, [sp, #0]
 800d73e:	4605      	mov	r5, r0
 800d740:	4630      	mov	r0, r6
 800d742:	f7ff fb83 	bl	800ce4c <_malloc_r>
 800d746:	b948      	cbnz	r0, 800d75c <__smakebuf_r+0x44>
 800d748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d74c:	059a      	lsls	r2, r3, #22
 800d74e:	d4ef      	bmi.n	800d730 <__smakebuf_r+0x18>
 800d750:	f023 0303 	bic.w	r3, r3, #3
 800d754:	f043 0302 	orr.w	r3, r3, #2
 800d758:	81a3      	strh	r3, [r4, #12]
 800d75a:	e7e3      	b.n	800d724 <__smakebuf_r+0xc>
 800d75c:	4b0d      	ldr	r3, [pc, #52]	; (800d794 <__smakebuf_r+0x7c>)
 800d75e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d760:	89a3      	ldrh	r3, [r4, #12]
 800d762:	6020      	str	r0, [r4, #0]
 800d764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d768:	81a3      	strh	r3, [r4, #12]
 800d76a:	9b00      	ldr	r3, [sp, #0]
 800d76c:	6163      	str	r3, [r4, #20]
 800d76e:	9b01      	ldr	r3, [sp, #4]
 800d770:	6120      	str	r0, [r4, #16]
 800d772:	b15b      	cbz	r3, 800d78c <__smakebuf_r+0x74>
 800d774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d778:	4630      	mov	r0, r6
 800d77a:	f000 fcdf 	bl	800e13c <_isatty_r>
 800d77e:	b128      	cbz	r0, 800d78c <__smakebuf_r+0x74>
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	f023 0303 	bic.w	r3, r3, #3
 800d786:	f043 0301 	orr.w	r3, r3, #1
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	89a0      	ldrh	r0, [r4, #12]
 800d78e:	4305      	orrs	r5, r0
 800d790:	81a5      	strh	r5, [r4, #12]
 800d792:	e7cd      	b.n	800d730 <__smakebuf_r+0x18>
 800d794:	0800cc11 	.word	0x0800cc11

0800d798 <malloc>:
 800d798:	4b02      	ldr	r3, [pc, #8]	; (800d7a4 <malloc+0xc>)
 800d79a:	4601      	mov	r1, r0
 800d79c:	6818      	ldr	r0, [r3, #0]
 800d79e:	f7ff bb55 	b.w	800ce4c <_malloc_r>
 800d7a2:	bf00      	nop
 800d7a4:	20000050 	.word	0x20000050

0800d7a8 <__malloc_lock>:
 800d7a8:	4801      	ldr	r0, [pc, #4]	; (800d7b0 <__malloc_lock+0x8>)
 800d7aa:	f7ff bb28 	b.w	800cdfe <__retarget_lock_acquire_recursive>
 800d7ae:	bf00      	nop
 800d7b0:	20008e80 	.word	0x20008e80

0800d7b4 <__malloc_unlock>:
 800d7b4:	4801      	ldr	r0, [pc, #4]	; (800d7bc <__malloc_unlock+0x8>)
 800d7b6:	f7ff bb23 	b.w	800ce00 <__retarget_lock_release_recursive>
 800d7ba:	bf00      	nop
 800d7bc:	20008e80 	.word	0x20008e80

0800d7c0 <_free_r>:
 800d7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7c2:	2900      	cmp	r1, #0
 800d7c4:	d048      	beq.n	800d858 <_free_r+0x98>
 800d7c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ca:	9001      	str	r0, [sp, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f1a1 0404 	sub.w	r4, r1, #4
 800d7d2:	bfb8      	it	lt
 800d7d4:	18e4      	addlt	r4, r4, r3
 800d7d6:	f7ff ffe7 	bl	800d7a8 <__malloc_lock>
 800d7da:	4a20      	ldr	r2, [pc, #128]	; (800d85c <_free_r+0x9c>)
 800d7dc:	9801      	ldr	r0, [sp, #4]
 800d7de:	6813      	ldr	r3, [r2, #0]
 800d7e0:	4615      	mov	r5, r2
 800d7e2:	b933      	cbnz	r3, 800d7f2 <_free_r+0x32>
 800d7e4:	6063      	str	r3, [r4, #4]
 800d7e6:	6014      	str	r4, [r2, #0]
 800d7e8:	b003      	add	sp, #12
 800d7ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7ee:	f7ff bfe1 	b.w	800d7b4 <__malloc_unlock>
 800d7f2:	42a3      	cmp	r3, r4
 800d7f4:	d90b      	bls.n	800d80e <_free_r+0x4e>
 800d7f6:	6821      	ldr	r1, [r4, #0]
 800d7f8:	1862      	adds	r2, r4, r1
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	bf04      	itt	eq
 800d7fe:	681a      	ldreq	r2, [r3, #0]
 800d800:	685b      	ldreq	r3, [r3, #4]
 800d802:	6063      	str	r3, [r4, #4]
 800d804:	bf04      	itt	eq
 800d806:	1852      	addeq	r2, r2, r1
 800d808:	6022      	streq	r2, [r4, #0]
 800d80a:	602c      	str	r4, [r5, #0]
 800d80c:	e7ec      	b.n	800d7e8 <_free_r+0x28>
 800d80e:	461a      	mov	r2, r3
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	b10b      	cbz	r3, 800d818 <_free_r+0x58>
 800d814:	42a3      	cmp	r3, r4
 800d816:	d9fa      	bls.n	800d80e <_free_r+0x4e>
 800d818:	6811      	ldr	r1, [r2, #0]
 800d81a:	1855      	adds	r5, r2, r1
 800d81c:	42a5      	cmp	r5, r4
 800d81e:	d10b      	bne.n	800d838 <_free_r+0x78>
 800d820:	6824      	ldr	r4, [r4, #0]
 800d822:	4421      	add	r1, r4
 800d824:	1854      	adds	r4, r2, r1
 800d826:	42a3      	cmp	r3, r4
 800d828:	6011      	str	r1, [r2, #0]
 800d82a:	d1dd      	bne.n	800d7e8 <_free_r+0x28>
 800d82c:	681c      	ldr	r4, [r3, #0]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	6053      	str	r3, [r2, #4]
 800d832:	4421      	add	r1, r4
 800d834:	6011      	str	r1, [r2, #0]
 800d836:	e7d7      	b.n	800d7e8 <_free_r+0x28>
 800d838:	d902      	bls.n	800d840 <_free_r+0x80>
 800d83a:	230c      	movs	r3, #12
 800d83c:	6003      	str	r3, [r0, #0]
 800d83e:	e7d3      	b.n	800d7e8 <_free_r+0x28>
 800d840:	6825      	ldr	r5, [r4, #0]
 800d842:	1961      	adds	r1, r4, r5
 800d844:	428b      	cmp	r3, r1
 800d846:	bf04      	itt	eq
 800d848:	6819      	ldreq	r1, [r3, #0]
 800d84a:	685b      	ldreq	r3, [r3, #4]
 800d84c:	6063      	str	r3, [r4, #4]
 800d84e:	bf04      	itt	eq
 800d850:	1949      	addeq	r1, r1, r5
 800d852:	6021      	streq	r1, [r4, #0]
 800d854:	6054      	str	r4, [r2, #4]
 800d856:	e7c7      	b.n	800d7e8 <_free_r+0x28>
 800d858:	b003      	add	sp, #12
 800d85a:	bd30      	pop	{r4, r5, pc}
 800d85c:	20004b4c 	.word	0x20004b4c

0800d860 <__ssputs_r>:
 800d860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d864:	688e      	ldr	r6, [r1, #8]
 800d866:	429e      	cmp	r6, r3
 800d868:	4682      	mov	sl, r0
 800d86a:	460c      	mov	r4, r1
 800d86c:	4690      	mov	r8, r2
 800d86e:	461f      	mov	r7, r3
 800d870:	d838      	bhi.n	800d8e4 <__ssputs_r+0x84>
 800d872:	898a      	ldrh	r2, [r1, #12]
 800d874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d878:	d032      	beq.n	800d8e0 <__ssputs_r+0x80>
 800d87a:	6825      	ldr	r5, [r4, #0]
 800d87c:	6909      	ldr	r1, [r1, #16]
 800d87e:	eba5 0901 	sub.w	r9, r5, r1
 800d882:	6965      	ldr	r5, [r4, #20]
 800d884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d88c:	3301      	adds	r3, #1
 800d88e:	444b      	add	r3, r9
 800d890:	106d      	asrs	r5, r5, #1
 800d892:	429d      	cmp	r5, r3
 800d894:	bf38      	it	cc
 800d896:	461d      	movcc	r5, r3
 800d898:	0553      	lsls	r3, r2, #21
 800d89a:	d531      	bpl.n	800d900 <__ssputs_r+0xa0>
 800d89c:	4629      	mov	r1, r5
 800d89e:	f7ff fad5 	bl	800ce4c <_malloc_r>
 800d8a2:	4606      	mov	r6, r0
 800d8a4:	b950      	cbnz	r0, 800d8bc <__ssputs_r+0x5c>
 800d8a6:	230c      	movs	r3, #12
 800d8a8:	f8ca 3000 	str.w	r3, [sl]
 800d8ac:	89a3      	ldrh	r3, [r4, #12]
 800d8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8b2:	81a3      	strh	r3, [r4, #12]
 800d8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8bc:	6921      	ldr	r1, [r4, #16]
 800d8be:	464a      	mov	r2, r9
 800d8c0:	f7ff faae 	bl	800ce20 <memcpy>
 800d8c4:	89a3      	ldrh	r3, [r4, #12]
 800d8c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8ce:	81a3      	strh	r3, [r4, #12]
 800d8d0:	6126      	str	r6, [r4, #16]
 800d8d2:	6165      	str	r5, [r4, #20]
 800d8d4:	444e      	add	r6, r9
 800d8d6:	eba5 0509 	sub.w	r5, r5, r9
 800d8da:	6026      	str	r6, [r4, #0]
 800d8dc:	60a5      	str	r5, [r4, #8]
 800d8de:	463e      	mov	r6, r7
 800d8e0:	42be      	cmp	r6, r7
 800d8e2:	d900      	bls.n	800d8e6 <__ssputs_r+0x86>
 800d8e4:	463e      	mov	r6, r7
 800d8e6:	4632      	mov	r2, r6
 800d8e8:	6820      	ldr	r0, [r4, #0]
 800d8ea:	4641      	mov	r1, r8
 800d8ec:	f000 fc36 	bl	800e15c <memmove>
 800d8f0:	68a3      	ldr	r3, [r4, #8]
 800d8f2:	6822      	ldr	r2, [r4, #0]
 800d8f4:	1b9b      	subs	r3, r3, r6
 800d8f6:	4432      	add	r2, r6
 800d8f8:	60a3      	str	r3, [r4, #8]
 800d8fa:	6022      	str	r2, [r4, #0]
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	e7db      	b.n	800d8b8 <__ssputs_r+0x58>
 800d900:	462a      	mov	r2, r5
 800d902:	f000 fc45 	bl	800e190 <_realloc_r>
 800d906:	4606      	mov	r6, r0
 800d908:	2800      	cmp	r0, #0
 800d90a:	d1e1      	bne.n	800d8d0 <__ssputs_r+0x70>
 800d90c:	6921      	ldr	r1, [r4, #16]
 800d90e:	4650      	mov	r0, sl
 800d910:	f7ff ff56 	bl	800d7c0 <_free_r>
 800d914:	e7c7      	b.n	800d8a6 <__ssputs_r+0x46>
	...

0800d918 <_svfiprintf_r>:
 800d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91c:	4698      	mov	r8, r3
 800d91e:	898b      	ldrh	r3, [r1, #12]
 800d920:	061b      	lsls	r3, r3, #24
 800d922:	b09d      	sub	sp, #116	; 0x74
 800d924:	4607      	mov	r7, r0
 800d926:	460d      	mov	r5, r1
 800d928:	4614      	mov	r4, r2
 800d92a:	d50e      	bpl.n	800d94a <_svfiprintf_r+0x32>
 800d92c:	690b      	ldr	r3, [r1, #16]
 800d92e:	b963      	cbnz	r3, 800d94a <_svfiprintf_r+0x32>
 800d930:	2140      	movs	r1, #64	; 0x40
 800d932:	f7ff fa8b 	bl	800ce4c <_malloc_r>
 800d936:	6028      	str	r0, [r5, #0]
 800d938:	6128      	str	r0, [r5, #16]
 800d93a:	b920      	cbnz	r0, 800d946 <_svfiprintf_r+0x2e>
 800d93c:	230c      	movs	r3, #12
 800d93e:	603b      	str	r3, [r7, #0]
 800d940:	f04f 30ff 	mov.w	r0, #4294967295
 800d944:	e0d1      	b.n	800daea <_svfiprintf_r+0x1d2>
 800d946:	2340      	movs	r3, #64	; 0x40
 800d948:	616b      	str	r3, [r5, #20]
 800d94a:	2300      	movs	r3, #0
 800d94c:	9309      	str	r3, [sp, #36]	; 0x24
 800d94e:	2320      	movs	r3, #32
 800d950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d954:	f8cd 800c 	str.w	r8, [sp, #12]
 800d958:	2330      	movs	r3, #48	; 0x30
 800d95a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db04 <_svfiprintf_r+0x1ec>
 800d95e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d962:	f04f 0901 	mov.w	r9, #1
 800d966:	4623      	mov	r3, r4
 800d968:	469a      	mov	sl, r3
 800d96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d96e:	b10a      	cbz	r2, 800d974 <_svfiprintf_r+0x5c>
 800d970:	2a25      	cmp	r2, #37	; 0x25
 800d972:	d1f9      	bne.n	800d968 <_svfiprintf_r+0x50>
 800d974:	ebba 0b04 	subs.w	fp, sl, r4
 800d978:	d00b      	beq.n	800d992 <_svfiprintf_r+0x7a>
 800d97a:	465b      	mov	r3, fp
 800d97c:	4622      	mov	r2, r4
 800d97e:	4629      	mov	r1, r5
 800d980:	4638      	mov	r0, r7
 800d982:	f7ff ff6d 	bl	800d860 <__ssputs_r>
 800d986:	3001      	adds	r0, #1
 800d988:	f000 80aa 	beq.w	800dae0 <_svfiprintf_r+0x1c8>
 800d98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d98e:	445a      	add	r2, fp
 800d990:	9209      	str	r2, [sp, #36]	; 0x24
 800d992:	f89a 3000 	ldrb.w	r3, [sl]
 800d996:	2b00      	cmp	r3, #0
 800d998:	f000 80a2 	beq.w	800dae0 <_svfiprintf_r+0x1c8>
 800d99c:	2300      	movs	r3, #0
 800d99e:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9a6:	f10a 0a01 	add.w	sl, sl, #1
 800d9aa:	9304      	str	r3, [sp, #16]
 800d9ac:	9307      	str	r3, [sp, #28]
 800d9ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9b2:	931a      	str	r3, [sp, #104]	; 0x68
 800d9b4:	4654      	mov	r4, sl
 800d9b6:	2205      	movs	r2, #5
 800d9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9bc:	4851      	ldr	r0, [pc, #324]	; (800db04 <_svfiprintf_r+0x1ec>)
 800d9be:	f7f2 fc17 	bl	80001f0 <memchr>
 800d9c2:	9a04      	ldr	r2, [sp, #16]
 800d9c4:	b9d8      	cbnz	r0, 800d9fe <_svfiprintf_r+0xe6>
 800d9c6:	06d0      	lsls	r0, r2, #27
 800d9c8:	bf44      	itt	mi
 800d9ca:	2320      	movmi	r3, #32
 800d9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9d0:	0711      	lsls	r1, r2, #28
 800d9d2:	bf44      	itt	mi
 800d9d4:	232b      	movmi	r3, #43	; 0x2b
 800d9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9da:	f89a 3000 	ldrb.w	r3, [sl]
 800d9de:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e0:	d015      	beq.n	800da0e <_svfiprintf_r+0xf6>
 800d9e2:	9a07      	ldr	r2, [sp, #28]
 800d9e4:	4654      	mov	r4, sl
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	f04f 0c0a 	mov.w	ip, #10
 800d9ec:	4621      	mov	r1, r4
 800d9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9f2:	3b30      	subs	r3, #48	; 0x30
 800d9f4:	2b09      	cmp	r3, #9
 800d9f6:	d94e      	bls.n	800da96 <_svfiprintf_r+0x17e>
 800d9f8:	b1b0      	cbz	r0, 800da28 <_svfiprintf_r+0x110>
 800d9fa:	9207      	str	r2, [sp, #28]
 800d9fc:	e014      	b.n	800da28 <_svfiprintf_r+0x110>
 800d9fe:	eba0 0308 	sub.w	r3, r0, r8
 800da02:	fa09 f303 	lsl.w	r3, r9, r3
 800da06:	4313      	orrs	r3, r2
 800da08:	9304      	str	r3, [sp, #16]
 800da0a:	46a2      	mov	sl, r4
 800da0c:	e7d2      	b.n	800d9b4 <_svfiprintf_r+0x9c>
 800da0e:	9b03      	ldr	r3, [sp, #12]
 800da10:	1d19      	adds	r1, r3, #4
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	9103      	str	r1, [sp, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	bfbb      	ittet	lt
 800da1a:	425b      	neglt	r3, r3
 800da1c:	f042 0202 	orrlt.w	r2, r2, #2
 800da20:	9307      	strge	r3, [sp, #28]
 800da22:	9307      	strlt	r3, [sp, #28]
 800da24:	bfb8      	it	lt
 800da26:	9204      	strlt	r2, [sp, #16]
 800da28:	7823      	ldrb	r3, [r4, #0]
 800da2a:	2b2e      	cmp	r3, #46	; 0x2e
 800da2c:	d10c      	bne.n	800da48 <_svfiprintf_r+0x130>
 800da2e:	7863      	ldrb	r3, [r4, #1]
 800da30:	2b2a      	cmp	r3, #42	; 0x2a
 800da32:	d135      	bne.n	800daa0 <_svfiprintf_r+0x188>
 800da34:	9b03      	ldr	r3, [sp, #12]
 800da36:	1d1a      	adds	r2, r3, #4
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	9203      	str	r2, [sp, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	bfb8      	it	lt
 800da40:	f04f 33ff 	movlt.w	r3, #4294967295
 800da44:	3402      	adds	r4, #2
 800da46:	9305      	str	r3, [sp, #20]
 800da48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db14 <_svfiprintf_r+0x1fc>
 800da4c:	7821      	ldrb	r1, [r4, #0]
 800da4e:	2203      	movs	r2, #3
 800da50:	4650      	mov	r0, sl
 800da52:	f7f2 fbcd 	bl	80001f0 <memchr>
 800da56:	b140      	cbz	r0, 800da6a <_svfiprintf_r+0x152>
 800da58:	2340      	movs	r3, #64	; 0x40
 800da5a:	eba0 000a 	sub.w	r0, r0, sl
 800da5e:	fa03 f000 	lsl.w	r0, r3, r0
 800da62:	9b04      	ldr	r3, [sp, #16]
 800da64:	4303      	orrs	r3, r0
 800da66:	3401      	adds	r4, #1
 800da68:	9304      	str	r3, [sp, #16]
 800da6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da6e:	4826      	ldr	r0, [pc, #152]	; (800db08 <_svfiprintf_r+0x1f0>)
 800da70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da74:	2206      	movs	r2, #6
 800da76:	f7f2 fbbb 	bl	80001f0 <memchr>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d038      	beq.n	800daf0 <_svfiprintf_r+0x1d8>
 800da7e:	4b23      	ldr	r3, [pc, #140]	; (800db0c <_svfiprintf_r+0x1f4>)
 800da80:	bb1b      	cbnz	r3, 800daca <_svfiprintf_r+0x1b2>
 800da82:	9b03      	ldr	r3, [sp, #12]
 800da84:	3307      	adds	r3, #7
 800da86:	f023 0307 	bic.w	r3, r3, #7
 800da8a:	3308      	adds	r3, #8
 800da8c:	9303      	str	r3, [sp, #12]
 800da8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da90:	4433      	add	r3, r6
 800da92:	9309      	str	r3, [sp, #36]	; 0x24
 800da94:	e767      	b.n	800d966 <_svfiprintf_r+0x4e>
 800da96:	fb0c 3202 	mla	r2, ip, r2, r3
 800da9a:	460c      	mov	r4, r1
 800da9c:	2001      	movs	r0, #1
 800da9e:	e7a5      	b.n	800d9ec <_svfiprintf_r+0xd4>
 800daa0:	2300      	movs	r3, #0
 800daa2:	3401      	adds	r4, #1
 800daa4:	9305      	str	r3, [sp, #20]
 800daa6:	4619      	mov	r1, r3
 800daa8:	f04f 0c0a 	mov.w	ip, #10
 800daac:	4620      	mov	r0, r4
 800daae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dab2:	3a30      	subs	r2, #48	; 0x30
 800dab4:	2a09      	cmp	r2, #9
 800dab6:	d903      	bls.n	800dac0 <_svfiprintf_r+0x1a8>
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d0c5      	beq.n	800da48 <_svfiprintf_r+0x130>
 800dabc:	9105      	str	r1, [sp, #20]
 800dabe:	e7c3      	b.n	800da48 <_svfiprintf_r+0x130>
 800dac0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dac4:	4604      	mov	r4, r0
 800dac6:	2301      	movs	r3, #1
 800dac8:	e7f0      	b.n	800daac <_svfiprintf_r+0x194>
 800daca:	ab03      	add	r3, sp, #12
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	462a      	mov	r2, r5
 800dad0:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <_svfiprintf_r+0x1f8>)
 800dad2:	a904      	add	r1, sp, #16
 800dad4:	4638      	mov	r0, r7
 800dad6:	f3af 8000 	nop.w
 800dada:	1c42      	adds	r2, r0, #1
 800dadc:	4606      	mov	r6, r0
 800dade:	d1d6      	bne.n	800da8e <_svfiprintf_r+0x176>
 800dae0:	89ab      	ldrh	r3, [r5, #12]
 800dae2:	065b      	lsls	r3, r3, #25
 800dae4:	f53f af2c 	bmi.w	800d940 <_svfiprintf_r+0x28>
 800dae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daea:	b01d      	add	sp, #116	; 0x74
 800daec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf0:	ab03      	add	r3, sp, #12
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	462a      	mov	r2, r5
 800daf6:	4b06      	ldr	r3, [pc, #24]	; (800db10 <_svfiprintf_r+0x1f8>)
 800daf8:	a904      	add	r1, sp, #16
 800dafa:	4638      	mov	r0, r7
 800dafc:	f000 f9d4 	bl	800dea8 <_printf_i>
 800db00:	e7eb      	b.n	800dada <_svfiprintf_r+0x1c2>
 800db02:	bf00      	nop
 800db04:	0800eb24 	.word	0x0800eb24
 800db08:	0800eb2e 	.word	0x0800eb2e
 800db0c:	00000000 	.word	0x00000000
 800db10:	0800d861 	.word	0x0800d861
 800db14:	0800eb2a 	.word	0x0800eb2a

0800db18 <__sfputc_r>:
 800db18:	6893      	ldr	r3, [r2, #8]
 800db1a:	3b01      	subs	r3, #1
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	b410      	push	{r4}
 800db20:	6093      	str	r3, [r2, #8]
 800db22:	da08      	bge.n	800db36 <__sfputc_r+0x1e>
 800db24:	6994      	ldr	r4, [r2, #24]
 800db26:	42a3      	cmp	r3, r4
 800db28:	db01      	blt.n	800db2e <__sfputc_r+0x16>
 800db2a:	290a      	cmp	r1, #10
 800db2c:	d103      	bne.n	800db36 <__sfputc_r+0x1e>
 800db2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db32:	f7ff bc17 	b.w	800d364 <__swbuf_r>
 800db36:	6813      	ldr	r3, [r2, #0]
 800db38:	1c58      	adds	r0, r3, #1
 800db3a:	6010      	str	r0, [r2, #0]
 800db3c:	7019      	strb	r1, [r3, #0]
 800db3e:	4608      	mov	r0, r1
 800db40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <__sfputs_r>:
 800db46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db48:	4606      	mov	r6, r0
 800db4a:	460f      	mov	r7, r1
 800db4c:	4614      	mov	r4, r2
 800db4e:	18d5      	adds	r5, r2, r3
 800db50:	42ac      	cmp	r4, r5
 800db52:	d101      	bne.n	800db58 <__sfputs_r+0x12>
 800db54:	2000      	movs	r0, #0
 800db56:	e007      	b.n	800db68 <__sfputs_r+0x22>
 800db58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5c:	463a      	mov	r2, r7
 800db5e:	4630      	mov	r0, r6
 800db60:	f7ff ffda 	bl	800db18 <__sfputc_r>
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	d1f3      	bne.n	800db50 <__sfputs_r+0xa>
 800db68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db6c <_vfiprintf_r>:
 800db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db70:	460d      	mov	r5, r1
 800db72:	b09d      	sub	sp, #116	; 0x74
 800db74:	4614      	mov	r4, r2
 800db76:	4698      	mov	r8, r3
 800db78:	4606      	mov	r6, r0
 800db7a:	b118      	cbz	r0, 800db84 <_vfiprintf_r+0x18>
 800db7c:	6983      	ldr	r3, [r0, #24]
 800db7e:	b90b      	cbnz	r3, 800db84 <_vfiprintf_r+0x18>
 800db80:	f7ff f87a 	bl	800cc78 <__sinit>
 800db84:	4b89      	ldr	r3, [pc, #548]	; (800ddac <_vfiprintf_r+0x240>)
 800db86:	429d      	cmp	r5, r3
 800db88:	d11b      	bne.n	800dbc2 <_vfiprintf_r+0x56>
 800db8a:	6875      	ldr	r5, [r6, #4]
 800db8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db8e:	07d9      	lsls	r1, r3, #31
 800db90:	d405      	bmi.n	800db9e <_vfiprintf_r+0x32>
 800db92:	89ab      	ldrh	r3, [r5, #12]
 800db94:	059a      	lsls	r2, r3, #22
 800db96:	d402      	bmi.n	800db9e <_vfiprintf_r+0x32>
 800db98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db9a:	f7ff f930 	bl	800cdfe <__retarget_lock_acquire_recursive>
 800db9e:	89ab      	ldrh	r3, [r5, #12]
 800dba0:	071b      	lsls	r3, r3, #28
 800dba2:	d501      	bpl.n	800dba8 <_vfiprintf_r+0x3c>
 800dba4:	692b      	ldr	r3, [r5, #16]
 800dba6:	b9eb      	cbnz	r3, 800dbe4 <_vfiprintf_r+0x78>
 800dba8:	4629      	mov	r1, r5
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f7ff fc3e 	bl	800d42c <__swsetup_r>
 800dbb0:	b1c0      	cbz	r0, 800dbe4 <_vfiprintf_r+0x78>
 800dbb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbb4:	07dc      	lsls	r4, r3, #31
 800dbb6:	d50e      	bpl.n	800dbd6 <_vfiprintf_r+0x6a>
 800dbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbbc:	b01d      	add	sp, #116	; 0x74
 800dbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc2:	4b7b      	ldr	r3, [pc, #492]	; (800ddb0 <_vfiprintf_r+0x244>)
 800dbc4:	429d      	cmp	r5, r3
 800dbc6:	d101      	bne.n	800dbcc <_vfiprintf_r+0x60>
 800dbc8:	68b5      	ldr	r5, [r6, #8]
 800dbca:	e7df      	b.n	800db8c <_vfiprintf_r+0x20>
 800dbcc:	4b79      	ldr	r3, [pc, #484]	; (800ddb4 <_vfiprintf_r+0x248>)
 800dbce:	429d      	cmp	r5, r3
 800dbd0:	bf08      	it	eq
 800dbd2:	68f5      	ldreq	r5, [r6, #12]
 800dbd4:	e7da      	b.n	800db8c <_vfiprintf_r+0x20>
 800dbd6:	89ab      	ldrh	r3, [r5, #12]
 800dbd8:	0598      	lsls	r0, r3, #22
 800dbda:	d4ed      	bmi.n	800dbb8 <_vfiprintf_r+0x4c>
 800dbdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbde:	f7ff f90f 	bl	800ce00 <__retarget_lock_release_recursive>
 800dbe2:	e7e9      	b.n	800dbb8 <_vfiprintf_r+0x4c>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe8:	2320      	movs	r3, #32
 800dbea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbee:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbf2:	2330      	movs	r3, #48	; 0x30
 800dbf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ddb8 <_vfiprintf_r+0x24c>
 800dbf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbfc:	f04f 0901 	mov.w	r9, #1
 800dc00:	4623      	mov	r3, r4
 800dc02:	469a      	mov	sl, r3
 800dc04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc08:	b10a      	cbz	r2, 800dc0e <_vfiprintf_r+0xa2>
 800dc0a:	2a25      	cmp	r2, #37	; 0x25
 800dc0c:	d1f9      	bne.n	800dc02 <_vfiprintf_r+0x96>
 800dc0e:	ebba 0b04 	subs.w	fp, sl, r4
 800dc12:	d00b      	beq.n	800dc2c <_vfiprintf_r+0xc0>
 800dc14:	465b      	mov	r3, fp
 800dc16:	4622      	mov	r2, r4
 800dc18:	4629      	mov	r1, r5
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	f7ff ff93 	bl	800db46 <__sfputs_r>
 800dc20:	3001      	adds	r0, #1
 800dc22:	f000 80aa 	beq.w	800dd7a <_vfiprintf_r+0x20e>
 800dc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc28:	445a      	add	r2, fp
 800dc2a:	9209      	str	r2, [sp, #36]	; 0x24
 800dc2c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f000 80a2 	beq.w	800dd7a <_vfiprintf_r+0x20e>
 800dc36:	2300      	movs	r3, #0
 800dc38:	f04f 32ff 	mov.w	r2, #4294967295
 800dc3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc40:	f10a 0a01 	add.w	sl, sl, #1
 800dc44:	9304      	str	r3, [sp, #16]
 800dc46:	9307      	str	r3, [sp, #28]
 800dc48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc4c:	931a      	str	r3, [sp, #104]	; 0x68
 800dc4e:	4654      	mov	r4, sl
 800dc50:	2205      	movs	r2, #5
 800dc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc56:	4858      	ldr	r0, [pc, #352]	; (800ddb8 <_vfiprintf_r+0x24c>)
 800dc58:	f7f2 faca 	bl	80001f0 <memchr>
 800dc5c:	9a04      	ldr	r2, [sp, #16]
 800dc5e:	b9d8      	cbnz	r0, 800dc98 <_vfiprintf_r+0x12c>
 800dc60:	06d1      	lsls	r1, r2, #27
 800dc62:	bf44      	itt	mi
 800dc64:	2320      	movmi	r3, #32
 800dc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc6a:	0713      	lsls	r3, r2, #28
 800dc6c:	bf44      	itt	mi
 800dc6e:	232b      	movmi	r3, #43	; 0x2b
 800dc70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc74:	f89a 3000 	ldrb.w	r3, [sl]
 800dc78:	2b2a      	cmp	r3, #42	; 0x2a
 800dc7a:	d015      	beq.n	800dca8 <_vfiprintf_r+0x13c>
 800dc7c:	9a07      	ldr	r2, [sp, #28]
 800dc7e:	4654      	mov	r4, sl
 800dc80:	2000      	movs	r0, #0
 800dc82:	f04f 0c0a 	mov.w	ip, #10
 800dc86:	4621      	mov	r1, r4
 800dc88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc8c:	3b30      	subs	r3, #48	; 0x30
 800dc8e:	2b09      	cmp	r3, #9
 800dc90:	d94e      	bls.n	800dd30 <_vfiprintf_r+0x1c4>
 800dc92:	b1b0      	cbz	r0, 800dcc2 <_vfiprintf_r+0x156>
 800dc94:	9207      	str	r2, [sp, #28]
 800dc96:	e014      	b.n	800dcc2 <_vfiprintf_r+0x156>
 800dc98:	eba0 0308 	sub.w	r3, r0, r8
 800dc9c:	fa09 f303 	lsl.w	r3, r9, r3
 800dca0:	4313      	orrs	r3, r2
 800dca2:	9304      	str	r3, [sp, #16]
 800dca4:	46a2      	mov	sl, r4
 800dca6:	e7d2      	b.n	800dc4e <_vfiprintf_r+0xe2>
 800dca8:	9b03      	ldr	r3, [sp, #12]
 800dcaa:	1d19      	adds	r1, r3, #4
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	9103      	str	r1, [sp, #12]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	bfbb      	ittet	lt
 800dcb4:	425b      	neglt	r3, r3
 800dcb6:	f042 0202 	orrlt.w	r2, r2, #2
 800dcba:	9307      	strge	r3, [sp, #28]
 800dcbc:	9307      	strlt	r3, [sp, #28]
 800dcbe:	bfb8      	it	lt
 800dcc0:	9204      	strlt	r2, [sp, #16]
 800dcc2:	7823      	ldrb	r3, [r4, #0]
 800dcc4:	2b2e      	cmp	r3, #46	; 0x2e
 800dcc6:	d10c      	bne.n	800dce2 <_vfiprintf_r+0x176>
 800dcc8:	7863      	ldrb	r3, [r4, #1]
 800dcca:	2b2a      	cmp	r3, #42	; 0x2a
 800dccc:	d135      	bne.n	800dd3a <_vfiprintf_r+0x1ce>
 800dcce:	9b03      	ldr	r3, [sp, #12]
 800dcd0:	1d1a      	adds	r2, r3, #4
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	9203      	str	r2, [sp, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfb8      	it	lt
 800dcda:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcde:	3402      	adds	r4, #2
 800dce0:	9305      	str	r3, [sp, #20]
 800dce2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ddc8 <_vfiprintf_r+0x25c>
 800dce6:	7821      	ldrb	r1, [r4, #0]
 800dce8:	2203      	movs	r2, #3
 800dcea:	4650      	mov	r0, sl
 800dcec:	f7f2 fa80 	bl	80001f0 <memchr>
 800dcf0:	b140      	cbz	r0, 800dd04 <_vfiprintf_r+0x198>
 800dcf2:	2340      	movs	r3, #64	; 0x40
 800dcf4:	eba0 000a 	sub.w	r0, r0, sl
 800dcf8:	fa03 f000 	lsl.w	r0, r3, r0
 800dcfc:	9b04      	ldr	r3, [sp, #16]
 800dcfe:	4303      	orrs	r3, r0
 800dd00:	3401      	adds	r4, #1
 800dd02:	9304      	str	r3, [sp, #16]
 800dd04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd08:	482c      	ldr	r0, [pc, #176]	; (800ddbc <_vfiprintf_r+0x250>)
 800dd0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd0e:	2206      	movs	r2, #6
 800dd10:	f7f2 fa6e 	bl	80001f0 <memchr>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d03f      	beq.n	800dd98 <_vfiprintf_r+0x22c>
 800dd18:	4b29      	ldr	r3, [pc, #164]	; (800ddc0 <_vfiprintf_r+0x254>)
 800dd1a:	bb1b      	cbnz	r3, 800dd64 <_vfiprintf_r+0x1f8>
 800dd1c:	9b03      	ldr	r3, [sp, #12]
 800dd1e:	3307      	adds	r3, #7
 800dd20:	f023 0307 	bic.w	r3, r3, #7
 800dd24:	3308      	adds	r3, #8
 800dd26:	9303      	str	r3, [sp, #12]
 800dd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd2a:	443b      	add	r3, r7
 800dd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd2e:	e767      	b.n	800dc00 <_vfiprintf_r+0x94>
 800dd30:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd34:	460c      	mov	r4, r1
 800dd36:	2001      	movs	r0, #1
 800dd38:	e7a5      	b.n	800dc86 <_vfiprintf_r+0x11a>
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	3401      	adds	r4, #1
 800dd3e:	9305      	str	r3, [sp, #20]
 800dd40:	4619      	mov	r1, r3
 800dd42:	f04f 0c0a 	mov.w	ip, #10
 800dd46:	4620      	mov	r0, r4
 800dd48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd4c:	3a30      	subs	r2, #48	; 0x30
 800dd4e:	2a09      	cmp	r2, #9
 800dd50:	d903      	bls.n	800dd5a <_vfiprintf_r+0x1ee>
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0c5      	beq.n	800dce2 <_vfiprintf_r+0x176>
 800dd56:	9105      	str	r1, [sp, #20]
 800dd58:	e7c3      	b.n	800dce2 <_vfiprintf_r+0x176>
 800dd5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd5e:	4604      	mov	r4, r0
 800dd60:	2301      	movs	r3, #1
 800dd62:	e7f0      	b.n	800dd46 <_vfiprintf_r+0x1da>
 800dd64:	ab03      	add	r3, sp, #12
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	462a      	mov	r2, r5
 800dd6a:	4b16      	ldr	r3, [pc, #88]	; (800ddc4 <_vfiprintf_r+0x258>)
 800dd6c:	a904      	add	r1, sp, #16
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f3af 8000 	nop.w
 800dd74:	4607      	mov	r7, r0
 800dd76:	1c78      	adds	r0, r7, #1
 800dd78:	d1d6      	bne.n	800dd28 <_vfiprintf_r+0x1bc>
 800dd7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd7c:	07d9      	lsls	r1, r3, #31
 800dd7e:	d405      	bmi.n	800dd8c <_vfiprintf_r+0x220>
 800dd80:	89ab      	ldrh	r3, [r5, #12]
 800dd82:	059a      	lsls	r2, r3, #22
 800dd84:	d402      	bmi.n	800dd8c <_vfiprintf_r+0x220>
 800dd86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd88:	f7ff f83a 	bl	800ce00 <__retarget_lock_release_recursive>
 800dd8c:	89ab      	ldrh	r3, [r5, #12]
 800dd8e:	065b      	lsls	r3, r3, #25
 800dd90:	f53f af12 	bmi.w	800dbb8 <_vfiprintf_r+0x4c>
 800dd94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd96:	e711      	b.n	800dbbc <_vfiprintf_r+0x50>
 800dd98:	ab03      	add	r3, sp, #12
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	462a      	mov	r2, r5
 800dd9e:	4b09      	ldr	r3, [pc, #36]	; (800ddc4 <_vfiprintf_r+0x258>)
 800dda0:	a904      	add	r1, sp, #16
 800dda2:	4630      	mov	r0, r6
 800dda4:	f000 f880 	bl	800dea8 <_printf_i>
 800dda8:	e7e4      	b.n	800dd74 <_vfiprintf_r+0x208>
 800ddaa:	bf00      	nop
 800ddac:	0800eae0 	.word	0x0800eae0
 800ddb0:	0800eb00 	.word	0x0800eb00
 800ddb4:	0800eac0 	.word	0x0800eac0
 800ddb8:	0800eb24 	.word	0x0800eb24
 800ddbc:	0800eb2e 	.word	0x0800eb2e
 800ddc0:	00000000 	.word	0x00000000
 800ddc4:	0800db47 	.word	0x0800db47
 800ddc8:	0800eb2a 	.word	0x0800eb2a

0800ddcc <_printf_common>:
 800ddcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd0:	4616      	mov	r6, r2
 800ddd2:	4699      	mov	r9, r3
 800ddd4:	688a      	ldr	r2, [r1, #8]
 800ddd6:	690b      	ldr	r3, [r1, #16]
 800ddd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dddc:	4293      	cmp	r3, r2
 800ddde:	bfb8      	it	lt
 800dde0:	4613      	movlt	r3, r2
 800dde2:	6033      	str	r3, [r6, #0]
 800dde4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dde8:	4607      	mov	r7, r0
 800ddea:	460c      	mov	r4, r1
 800ddec:	b10a      	cbz	r2, 800ddf2 <_printf_common+0x26>
 800ddee:	3301      	adds	r3, #1
 800ddf0:	6033      	str	r3, [r6, #0]
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	0699      	lsls	r1, r3, #26
 800ddf6:	bf42      	ittt	mi
 800ddf8:	6833      	ldrmi	r3, [r6, #0]
 800ddfa:	3302      	addmi	r3, #2
 800ddfc:	6033      	strmi	r3, [r6, #0]
 800ddfe:	6825      	ldr	r5, [r4, #0]
 800de00:	f015 0506 	ands.w	r5, r5, #6
 800de04:	d106      	bne.n	800de14 <_printf_common+0x48>
 800de06:	f104 0a19 	add.w	sl, r4, #25
 800de0a:	68e3      	ldr	r3, [r4, #12]
 800de0c:	6832      	ldr	r2, [r6, #0]
 800de0e:	1a9b      	subs	r3, r3, r2
 800de10:	42ab      	cmp	r3, r5
 800de12:	dc26      	bgt.n	800de62 <_printf_common+0x96>
 800de14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de18:	1e13      	subs	r3, r2, #0
 800de1a:	6822      	ldr	r2, [r4, #0]
 800de1c:	bf18      	it	ne
 800de1e:	2301      	movne	r3, #1
 800de20:	0692      	lsls	r2, r2, #26
 800de22:	d42b      	bmi.n	800de7c <_printf_common+0xb0>
 800de24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de28:	4649      	mov	r1, r9
 800de2a:	4638      	mov	r0, r7
 800de2c:	47c0      	blx	r8
 800de2e:	3001      	adds	r0, #1
 800de30:	d01e      	beq.n	800de70 <_printf_common+0xa4>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	68e5      	ldr	r5, [r4, #12]
 800de36:	6832      	ldr	r2, [r6, #0]
 800de38:	f003 0306 	and.w	r3, r3, #6
 800de3c:	2b04      	cmp	r3, #4
 800de3e:	bf08      	it	eq
 800de40:	1aad      	subeq	r5, r5, r2
 800de42:	68a3      	ldr	r3, [r4, #8]
 800de44:	6922      	ldr	r2, [r4, #16]
 800de46:	bf0c      	ite	eq
 800de48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de4c:	2500      	movne	r5, #0
 800de4e:	4293      	cmp	r3, r2
 800de50:	bfc4      	itt	gt
 800de52:	1a9b      	subgt	r3, r3, r2
 800de54:	18ed      	addgt	r5, r5, r3
 800de56:	2600      	movs	r6, #0
 800de58:	341a      	adds	r4, #26
 800de5a:	42b5      	cmp	r5, r6
 800de5c:	d11a      	bne.n	800de94 <_printf_common+0xc8>
 800de5e:	2000      	movs	r0, #0
 800de60:	e008      	b.n	800de74 <_printf_common+0xa8>
 800de62:	2301      	movs	r3, #1
 800de64:	4652      	mov	r2, sl
 800de66:	4649      	mov	r1, r9
 800de68:	4638      	mov	r0, r7
 800de6a:	47c0      	blx	r8
 800de6c:	3001      	adds	r0, #1
 800de6e:	d103      	bne.n	800de78 <_printf_common+0xac>
 800de70:	f04f 30ff 	mov.w	r0, #4294967295
 800de74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de78:	3501      	adds	r5, #1
 800de7a:	e7c6      	b.n	800de0a <_printf_common+0x3e>
 800de7c:	18e1      	adds	r1, r4, r3
 800de7e:	1c5a      	adds	r2, r3, #1
 800de80:	2030      	movs	r0, #48	; 0x30
 800de82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de86:	4422      	add	r2, r4
 800de88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de90:	3302      	adds	r3, #2
 800de92:	e7c7      	b.n	800de24 <_printf_common+0x58>
 800de94:	2301      	movs	r3, #1
 800de96:	4622      	mov	r2, r4
 800de98:	4649      	mov	r1, r9
 800de9a:	4638      	mov	r0, r7
 800de9c:	47c0      	blx	r8
 800de9e:	3001      	adds	r0, #1
 800dea0:	d0e6      	beq.n	800de70 <_printf_common+0xa4>
 800dea2:	3601      	adds	r6, #1
 800dea4:	e7d9      	b.n	800de5a <_printf_common+0x8e>
	...

0800dea8 <_printf_i>:
 800dea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800deac:	460c      	mov	r4, r1
 800deae:	4691      	mov	r9, r2
 800deb0:	7e27      	ldrb	r7, [r4, #24]
 800deb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800deb4:	2f78      	cmp	r7, #120	; 0x78
 800deb6:	4680      	mov	r8, r0
 800deb8:	469a      	mov	sl, r3
 800deba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800debe:	d807      	bhi.n	800ded0 <_printf_i+0x28>
 800dec0:	2f62      	cmp	r7, #98	; 0x62
 800dec2:	d80a      	bhi.n	800deda <_printf_i+0x32>
 800dec4:	2f00      	cmp	r7, #0
 800dec6:	f000 80d8 	beq.w	800e07a <_printf_i+0x1d2>
 800deca:	2f58      	cmp	r7, #88	; 0x58
 800decc:	f000 80a3 	beq.w	800e016 <_printf_i+0x16e>
 800ded0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ded4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ded8:	e03a      	b.n	800df50 <_printf_i+0xa8>
 800deda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dede:	2b15      	cmp	r3, #21
 800dee0:	d8f6      	bhi.n	800ded0 <_printf_i+0x28>
 800dee2:	a001      	add	r0, pc, #4	; (adr r0, 800dee8 <_printf_i+0x40>)
 800dee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dee8:	0800df41 	.word	0x0800df41
 800deec:	0800df55 	.word	0x0800df55
 800def0:	0800ded1 	.word	0x0800ded1
 800def4:	0800ded1 	.word	0x0800ded1
 800def8:	0800ded1 	.word	0x0800ded1
 800defc:	0800ded1 	.word	0x0800ded1
 800df00:	0800df55 	.word	0x0800df55
 800df04:	0800ded1 	.word	0x0800ded1
 800df08:	0800ded1 	.word	0x0800ded1
 800df0c:	0800ded1 	.word	0x0800ded1
 800df10:	0800ded1 	.word	0x0800ded1
 800df14:	0800e061 	.word	0x0800e061
 800df18:	0800df85 	.word	0x0800df85
 800df1c:	0800e043 	.word	0x0800e043
 800df20:	0800ded1 	.word	0x0800ded1
 800df24:	0800ded1 	.word	0x0800ded1
 800df28:	0800e083 	.word	0x0800e083
 800df2c:	0800ded1 	.word	0x0800ded1
 800df30:	0800df85 	.word	0x0800df85
 800df34:	0800ded1 	.word	0x0800ded1
 800df38:	0800ded1 	.word	0x0800ded1
 800df3c:	0800e04b 	.word	0x0800e04b
 800df40:	680b      	ldr	r3, [r1, #0]
 800df42:	1d1a      	adds	r2, r3, #4
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	600a      	str	r2, [r1, #0]
 800df48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df50:	2301      	movs	r3, #1
 800df52:	e0a3      	b.n	800e09c <_printf_i+0x1f4>
 800df54:	6825      	ldr	r5, [r4, #0]
 800df56:	6808      	ldr	r0, [r1, #0]
 800df58:	062e      	lsls	r6, r5, #24
 800df5a:	f100 0304 	add.w	r3, r0, #4
 800df5e:	d50a      	bpl.n	800df76 <_printf_i+0xce>
 800df60:	6805      	ldr	r5, [r0, #0]
 800df62:	600b      	str	r3, [r1, #0]
 800df64:	2d00      	cmp	r5, #0
 800df66:	da03      	bge.n	800df70 <_printf_i+0xc8>
 800df68:	232d      	movs	r3, #45	; 0x2d
 800df6a:	426d      	negs	r5, r5
 800df6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df70:	485e      	ldr	r0, [pc, #376]	; (800e0ec <_printf_i+0x244>)
 800df72:	230a      	movs	r3, #10
 800df74:	e019      	b.n	800dfaa <_printf_i+0x102>
 800df76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800df7a:	6805      	ldr	r5, [r0, #0]
 800df7c:	600b      	str	r3, [r1, #0]
 800df7e:	bf18      	it	ne
 800df80:	b22d      	sxthne	r5, r5
 800df82:	e7ef      	b.n	800df64 <_printf_i+0xbc>
 800df84:	680b      	ldr	r3, [r1, #0]
 800df86:	6825      	ldr	r5, [r4, #0]
 800df88:	1d18      	adds	r0, r3, #4
 800df8a:	6008      	str	r0, [r1, #0]
 800df8c:	0628      	lsls	r0, r5, #24
 800df8e:	d501      	bpl.n	800df94 <_printf_i+0xec>
 800df90:	681d      	ldr	r5, [r3, #0]
 800df92:	e002      	b.n	800df9a <_printf_i+0xf2>
 800df94:	0669      	lsls	r1, r5, #25
 800df96:	d5fb      	bpl.n	800df90 <_printf_i+0xe8>
 800df98:	881d      	ldrh	r5, [r3, #0]
 800df9a:	4854      	ldr	r0, [pc, #336]	; (800e0ec <_printf_i+0x244>)
 800df9c:	2f6f      	cmp	r7, #111	; 0x6f
 800df9e:	bf0c      	ite	eq
 800dfa0:	2308      	moveq	r3, #8
 800dfa2:	230a      	movne	r3, #10
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfaa:	6866      	ldr	r6, [r4, #4]
 800dfac:	60a6      	str	r6, [r4, #8]
 800dfae:	2e00      	cmp	r6, #0
 800dfb0:	bfa2      	ittt	ge
 800dfb2:	6821      	ldrge	r1, [r4, #0]
 800dfb4:	f021 0104 	bicge.w	r1, r1, #4
 800dfb8:	6021      	strge	r1, [r4, #0]
 800dfba:	b90d      	cbnz	r5, 800dfc0 <_printf_i+0x118>
 800dfbc:	2e00      	cmp	r6, #0
 800dfbe:	d04d      	beq.n	800e05c <_printf_i+0x1b4>
 800dfc0:	4616      	mov	r6, r2
 800dfc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800dfc6:	fb03 5711 	mls	r7, r3, r1, r5
 800dfca:	5dc7      	ldrb	r7, [r0, r7]
 800dfcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dfd0:	462f      	mov	r7, r5
 800dfd2:	42bb      	cmp	r3, r7
 800dfd4:	460d      	mov	r5, r1
 800dfd6:	d9f4      	bls.n	800dfc2 <_printf_i+0x11a>
 800dfd8:	2b08      	cmp	r3, #8
 800dfda:	d10b      	bne.n	800dff4 <_printf_i+0x14c>
 800dfdc:	6823      	ldr	r3, [r4, #0]
 800dfde:	07df      	lsls	r7, r3, #31
 800dfe0:	d508      	bpl.n	800dff4 <_printf_i+0x14c>
 800dfe2:	6923      	ldr	r3, [r4, #16]
 800dfe4:	6861      	ldr	r1, [r4, #4]
 800dfe6:	4299      	cmp	r1, r3
 800dfe8:	bfde      	ittt	le
 800dfea:	2330      	movle	r3, #48	; 0x30
 800dfec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dff0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dff4:	1b92      	subs	r2, r2, r6
 800dff6:	6122      	str	r2, [r4, #16]
 800dff8:	f8cd a000 	str.w	sl, [sp]
 800dffc:	464b      	mov	r3, r9
 800dffe:	aa03      	add	r2, sp, #12
 800e000:	4621      	mov	r1, r4
 800e002:	4640      	mov	r0, r8
 800e004:	f7ff fee2 	bl	800ddcc <_printf_common>
 800e008:	3001      	adds	r0, #1
 800e00a:	d14c      	bne.n	800e0a6 <_printf_i+0x1fe>
 800e00c:	f04f 30ff 	mov.w	r0, #4294967295
 800e010:	b004      	add	sp, #16
 800e012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e016:	4835      	ldr	r0, [pc, #212]	; (800e0ec <_printf_i+0x244>)
 800e018:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	680e      	ldr	r6, [r1, #0]
 800e020:	061f      	lsls	r7, r3, #24
 800e022:	f856 5b04 	ldr.w	r5, [r6], #4
 800e026:	600e      	str	r6, [r1, #0]
 800e028:	d514      	bpl.n	800e054 <_printf_i+0x1ac>
 800e02a:	07d9      	lsls	r1, r3, #31
 800e02c:	bf44      	itt	mi
 800e02e:	f043 0320 	orrmi.w	r3, r3, #32
 800e032:	6023      	strmi	r3, [r4, #0]
 800e034:	b91d      	cbnz	r5, 800e03e <_printf_i+0x196>
 800e036:	6823      	ldr	r3, [r4, #0]
 800e038:	f023 0320 	bic.w	r3, r3, #32
 800e03c:	6023      	str	r3, [r4, #0]
 800e03e:	2310      	movs	r3, #16
 800e040:	e7b0      	b.n	800dfa4 <_printf_i+0xfc>
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	f043 0320 	orr.w	r3, r3, #32
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	2378      	movs	r3, #120	; 0x78
 800e04c:	4828      	ldr	r0, [pc, #160]	; (800e0f0 <_printf_i+0x248>)
 800e04e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e052:	e7e3      	b.n	800e01c <_printf_i+0x174>
 800e054:	065e      	lsls	r6, r3, #25
 800e056:	bf48      	it	mi
 800e058:	b2ad      	uxthmi	r5, r5
 800e05a:	e7e6      	b.n	800e02a <_printf_i+0x182>
 800e05c:	4616      	mov	r6, r2
 800e05e:	e7bb      	b.n	800dfd8 <_printf_i+0x130>
 800e060:	680b      	ldr	r3, [r1, #0]
 800e062:	6826      	ldr	r6, [r4, #0]
 800e064:	6960      	ldr	r0, [r4, #20]
 800e066:	1d1d      	adds	r5, r3, #4
 800e068:	600d      	str	r5, [r1, #0]
 800e06a:	0635      	lsls	r5, r6, #24
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	d501      	bpl.n	800e074 <_printf_i+0x1cc>
 800e070:	6018      	str	r0, [r3, #0]
 800e072:	e002      	b.n	800e07a <_printf_i+0x1d2>
 800e074:	0671      	lsls	r1, r6, #25
 800e076:	d5fb      	bpl.n	800e070 <_printf_i+0x1c8>
 800e078:	8018      	strh	r0, [r3, #0]
 800e07a:	2300      	movs	r3, #0
 800e07c:	6123      	str	r3, [r4, #16]
 800e07e:	4616      	mov	r6, r2
 800e080:	e7ba      	b.n	800dff8 <_printf_i+0x150>
 800e082:	680b      	ldr	r3, [r1, #0]
 800e084:	1d1a      	adds	r2, r3, #4
 800e086:	600a      	str	r2, [r1, #0]
 800e088:	681e      	ldr	r6, [r3, #0]
 800e08a:	6862      	ldr	r2, [r4, #4]
 800e08c:	2100      	movs	r1, #0
 800e08e:	4630      	mov	r0, r6
 800e090:	f7f2 f8ae 	bl	80001f0 <memchr>
 800e094:	b108      	cbz	r0, 800e09a <_printf_i+0x1f2>
 800e096:	1b80      	subs	r0, r0, r6
 800e098:	6060      	str	r0, [r4, #4]
 800e09a:	6863      	ldr	r3, [r4, #4]
 800e09c:	6123      	str	r3, [r4, #16]
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0a4:	e7a8      	b.n	800dff8 <_printf_i+0x150>
 800e0a6:	6923      	ldr	r3, [r4, #16]
 800e0a8:	4632      	mov	r2, r6
 800e0aa:	4649      	mov	r1, r9
 800e0ac:	4640      	mov	r0, r8
 800e0ae:	47d0      	blx	sl
 800e0b0:	3001      	adds	r0, #1
 800e0b2:	d0ab      	beq.n	800e00c <_printf_i+0x164>
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	079b      	lsls	r3, r3, #30
 800e0b8:	d413      	bmi.n	800e0e2 <_printf_i+0x23a>
 800e0ba:	68e0      	ldr	r0, [r4, #12]
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	4298      	cmp	r0, r3
 800e0c0:	bfb8      	it	lt
 800e0c2:	4618      	movlt	r0, r3
 800e0c4:	e7a4      	b.n	800e010 <_printf_i+0x168>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	4632      	mov	r2, r6
 800e0ca:	4649      	mov	r1, r9
 800e0cc:	4640      	mov	r0, r8
 800e0ce:	47d0      	blx	sl
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	d09b      	beq.n	800e00c <_printf_i+0x164>
 800e0d4:	3501      	adds	r5, #1
 800e0d6:	68e3      	ldr	r3, [r4, #12]
 800e0d8:	9903      	ldr	r1, [sp, #12]
 800e0da:	1a5b      	subs	r3, r3, r1
 800e0dc:	42ab      	cmp	r3, r5
 800e0de:	dcf2      	bgt.n	800e0c6 <_printf_i+0x21e>
 800e0e0:	e7eb      	b.n	800e0ba <_printf_i+0x212>
 800e0e2:	2500      	movs	r5, #0
 800e0e4:	f104 0619 	add.w	r6, r4, #25
 800e0e8:	e7f5      	b.n	800e0d6 <_printf_i+0x22e>
 800e0ea:	bf00      	nop
 800e0ec:	0800eb35 	.word	0x0800eb35
 800e0f0:	0800eb46 	.word	0x0800eb46

0800e0f4 <_read_r>:
 800e0f4:	b538      	push	{r3, r4, r5, lr}
 800e0f6:	4d07      	ldr	r5, [pc, #28]	; (800e114 <_read_r+0x20>)
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	4608      	mov	r0, r1
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	2200      	movs	r2, #0
 800e100:	602a      	str	r2, [r5, #0]
 800e102:	461a      	mov	r2, r3
 800e104:	f7f3 fe76 	bl	8001df4 <_read>
 800e108:	1c43      	adds	r3, r0, #1
 800e10a:	d102      	bne.n	800e112 <_read_r+0x1e>
 800e10c:	682b      	ldr	r3, [r5, #0]
 800e10e:	b103      	cbz	r3, 800e112 <_read_r+0x1e>
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	bd38      	pop	{r3, r4, r5, pc}
 800e114:	20008e88 	.word	0x20008e88

0800e118 <_fstat_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4d07      	ldr	r5, [pc, #28]	; (800e138 <_fstat_r+0x20>)
 800e11c:	2300      	movs	r3, #0
 800e11e:	4604      	mov	r4, r0
 800e120:	4608      	mov	r0, r1
 800e122:	4611      	mov	r1, r2
 800e124:	602b      	str	r3, [r5, #0]
 800e126:	f7f3 fe8d 	bl	8001e44 <_fstat>
 800e12a:	1c43      	adds	r3, r0, #1
 800e12c:	d102      	bne.n	800e134 <_fstat_r+0x1c>
 800e12e:	682b      	ldr	r3, [r5, #0]
 800e130:	b103      	cbz	r3, 800e134 <_fstat_r+0x1c>
 800e132:	6023      	str	r3, [r4, #0]
 800e134:	bd38      	pop	{r3, r4, r5, pc}
 800e136:	bf00      	nop
 800e138:	20008e88 	.word	0x20008e88

0800e13c <_isatty_r>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4d06      	ldr	r5, [pc, #24]	; (800e158 <_isatty_r+0x1c>)
 800e140:	2300      	movs	r3, #0
 800e142:	4604      	mov	r4, r0
 800e144:	4608      	mov	r0, r1
 800e146:	602b      	str	r3, [r5, #0]
 800e148:	f7f3 fdea 	bl	8001d20 <_isatty>
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	d102      	bne.n	800e156 <_isatty_r+0x1a>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	b103      	cbz	r3, 800e156 <_isatty_r+0x1a>
 800e154:	6023      	str	r3, [r4, #0]
 800e156:	bd38      	pop	{r3, r4, r5, pc}
 800e158:	20008e88 	.word	0x20008e88

0800e15c <memmove>:
 800e15c:	4288      	cmp	r0, r1
 800e15e:	b510      	push	{r4, lr}
 800e160:	eb01 0402 	add.w	r4, r1, r2
 800e164:	d902      	bls.n	800e16c <memmove+0x10>
 800e166:	4284      	cmp	r4, r0
 800e168:	4623      	mov	r3, r4
 800e16a:	d807      	bhi.n	800e17c <memmove+0x20>
 800e16c:	1e43      	subs	r3, r0, #1
 800e16e:	42a1      	cmp	r1, r4
 800e170:	d008      	beq.n	800e184 <memmove+0x28>
 800e172:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e17a:	e7f8      	b.n	800e16e <memmove+0x12>
 800e17c:	4402      	add	r2, r0
 800e17e:	4601      	mov	r1, r0
 800e180:	428a      	cmp	r2, r1
 800e182:	d100      	bne.n	800e186 <memmove+0x2a>
 800e184:	bd10      	pop	{r4, pc}
 800e186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e18a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e18e:	e7f7      	b.n	800e180 <memmove+0x24>

0800e190 <_realloc_r>:
 800e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e192:	4607      	mov	r7, r0
 800e194:	4614      	mov	r4, r2
 800e196:	460e      	mov	r6, r1
 800e198:	b921      	cbnz	r1, 800e1a4 <_realloc_r+0x14>
 800e19a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e19e:	4611      	mov	r1, r2
 800e1a0:	f7fe be54 	b.w	800ce4c <_malloc_r>
 800e1a4:	b922      	cbnz	r2, 800e1b0 <_realloc_r+0x20>
 800e1a6:	f7ff fb0b 	bl	800d7c0 <_free_r>
 800e1aa:	4625      	mov	r5, r4
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b0:	f000 f814 	bl	800e1dc <_malloc_usable_size_r>
 800e1b4:	42a0      	cmp	r0, r4
 800e1b6:	d20f      	bcs.n	800e1d8 <_realloc_r+0x48>
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	f7fe fe46 	bl	800ce4c <_malloc_r>
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d0f2      	beq.n	800e1ac <_realloc_r+0x1c>
 800e1c6:	4631      	mov	r1, r6
 800e1c8:	4622      	mov	r2, r4
 800e1ca:	f7fe fe29 	bl	800ce20 <memcpy>
 800e1ce:	4631      	mov	r1, r6
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	f7ff faf5 	bl	800d7c0 <_free_r>
 800e1d6:	e7e9      	b.n	800e1ac <_realloc_r+0x1c>
 800e1d8:	4635      	mov	r5, r6
 800e1da:	e7e7      	b.n	800e1ac <_realloc_r+0x1c>

0800e1dc <_malloc_usable_size_r>:
 800e1dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1e0:	1f18      	subs	r0, r3, #4
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	bfbc      	itt	lt
 800e1e6:	580b      	ldrlt	r3, [r1, r0]
 800e1e8:	18c0      	addlt	r0, r0, r3
 800e1ea:	4770      	bx	lr

0800e1ec <_init>:
 800e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ee:	bf00      	nop
 800e1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f2:	bc08      	pop	{r3}
 800e1f4:	469e      	mov	lr, r3
 800e1f6:	4770      	bx	lr

0800e1f8 <_fini>:
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	bf00      	nop
 800e1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1fe:	bc08      	pop	{r3}
 800e200:	469e      	mov	lr, r3
 800e202:	4770      	bx	lr
